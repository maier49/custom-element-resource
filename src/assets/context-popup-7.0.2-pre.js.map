{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@dojo/framework/shim/global.mjs","webpack:///./node_modules/@dojo/framework/core/vdom.mjs","webpack:///./node_modules/@dojo/framework/shim/Set.mjs","webpack:///./src/context-popup/index.tsx","webpack:///./node_modules/@dojo/framework/core/middleware/icache.mjs","webpack:///./node_modules/@dojo/framework/core/diff.mjs","webpack:///./node_modules/@dojo/framework/shim/array.mjs","webpack:///./node_modules/@dojo/framework/core/RegistryHandler.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/theme.mjs","webpack:///./node_modules/@dojo/framework/core/Injector.mjs","webpack:///./node_modules/@dojo/cli-build-widget/template/custom-element.js?4a3e","webpack:///./node_modules/@dojo/framework/core/middleware/injector.mjs","webpack:///./node_modules/@dojo/framework/shim/Map.mjs","webpack:///./node_modules/@dojo/framework/core/Destroyable.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/focus.mjs","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@dojo/framework/shim/object.mjs","webpack:///./node_modules/@dojo/framework/core/registerCustomElement.mjs","webpack:///./node_modules/@dojo/framework/core/has.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/dimensions.mjs","webpack:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.js","webpack:///./node_modules/@dojo/framework/core/Registry.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/resize.mjs","webpack:///./src/popup/popup.m.css","webpack:///./node_modules/@dojo/framework/shim/ResizeObserver.mjs","webpack:///./node_modules/@dojo/framework/shim/util/wrapper.mjs","webpack:///./node_modules/@dojo/framework/shim/WeakMap.mjs","webpack:///./src/middleware/bodyScroll.tsx","webpack:///./src/theme/default/popup.m.css","webpack:///./src/popup/index.tsx","webpack:///./node_modules/@dojo/framework/core/ThemeInjector.mjs","webpack:///./node_modules/@dojo/framework/shim/support/util.mjs","webpack:///./node_modules/@dojo/framework/shim/Promise.mjs","webpack:///./src/theme/default/context-popup.m.css","webpack:///./node_modules/@dojo/framework/core/Evented.mjs"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","globalObject","window","navigator","userAgent","indexOf","globalThis","self","__webpack_exports__","isTextNode","isWNode","isVNode","w","v","dom","tsx","widgetInstanceMap","invalidator","node","diffProperty","destroy","getRegistry","renderer","_shim_global__WEBPACK_IMPORTED_MODULE_0__","_core_has__WEBPACK_IMPORTED_MODULE_1__","_shim_WeakMap__WEBPACK_IMPORTED_MODULE_2__","_shim_Set__WEBPACK_IMPORTED_MODULE_3__","_shim_Map__WEBPACK_IMPORTED_MODULE_4__","_shim_array__WEBPACK_IMPORTED_MODULE_5__","_Registry__WEBPACK_IMPORTED_MODULE_6__","_diff__WEBPACK_IMPORTED_MODULE_7__","_RegistryHandler__WEBPACK_IMPORTED_MODULE_8__","__rest","e","getOwnPropertySymbols","length","EMPTY_ARRAY","nodeOperations","NAMESPACE_SVG","NAMESPACE_W3","NAMESPACE_XLINK","WNODE","VNODE","DOMVNODE","scope","__DOJO_SCOPE","setRendering","rendering","item","nodeType","isWNodeWrapper","child","isVNodeWrapper","isVirtualWrapper","tag","isBodyWrapper","wrapper","isHeadWrapper","isSpecialWrapper","Boolean","type","isDomVNode","isElementNode","tagName","widgetConstructorOrNode","properties","children","__children__","assign","widgetConstructor","propertiesOrChildren","deferredPropertiesCallback","Array","isArray","classes","styles","newProperties","_a","nodeClasses","nodeStyles","nodeProperties","attrs","props","on","diffType","onAttach","toLowerCase","attributes","events","domNode","text","undefined","data","REGISTRY_ITEM","FromRegistry","[object Object]","this","__properties__","Infinity","__autoRegistryItem","buildPreviousProperties","current","deferredProperties","keys","forEach","propName","attrName","getAttribute","reduce","same","dnode1","dnode2","widgetConstructor1","registryItem","widgetConstructor2","props1","props2","instance","every","findIndexOfChild","sameAs","start","createClassPropValue","classNames","className","updateAttribute","attrValue","namespace","setAttributeNS","removeAttribute","setAttribute","arrayFrom","arr","slice","createFactory","callback","middlewares","factory","result","isWidget","middlewareName","middleware","isFactory","returns","widgetMetaMap","requestedDomNodes","wrapperId","metaId","addNodeToMap","id","widgetMeta","nodeMap","set","has","delete","destroyHandles","meta","destroyMap","middlewareIds","size","clear","widgetId","split","mountNode","contains","document","body","add","propertyName","propertiesOrDiff","diff","customDiffMap","customDiffProperties","propertyDiffMap","originalProperties","propertiesCalled","console","warn","widgetName","destroyFunction","registryHandler","base","registry","isDeferred","deferRefs","wrapFunctionProperties","propertyNames","args","unwrap","_renderScheduled","parentInvalidate","_appWrapperId","_mountOptions","sync","merge","transition","_invalidationQueue","_processQueue","_deferredProcessQueue","_applicationQueue","_eventMap","_idToWrapperMap","_wrapperSiblingMap","_idToChildrenWrappers","_insertBeforeMap","_nodeToWrapperMap","_deferredRenderCallbacks","_allMergedNodes","_deferredProcessIds","nodeOperation","propValue","previousValue","push","updateEvent","eventName","currentValue","previousEvent","removeEventListener","evt","target","addEventListener","removeOrphanedEvents","previousProperties","onlyEvents","isEvent","substr","eventCallback","resolveRegistryItem","owningNode","instanceData","registryLabel","label","isLazyDefine","define","renderedToWrapper","rendered","parent","currentParent","requiresInsertBefore","hasPreviousSiblings","depth","wrappedRendered","hasParentWNode","hasVirtualParentNode","hasCurrentParentChildren","insertBefore","previousItem","nodes","pop","mapNodeToInstance","renderedItem","order","parentId","exitAnimation","hasAnimations","nextParent","owningId","runDeferredProperties","next","processProperties","findInsertBefore","searchNode","nextSibling","childDomWrapperId","findDomNodeOnParentWrapper","childWrapper","parentNode","setValue","domValue","onInputValue","onSelectValue","setProperties","currentProperties","nextWrapper","includesEventsAndAttributes","propNames","propCount","previousClassString","currentClassString","merged","domClasses","styleNames","styleCount","j","styleName","newStyleValue","style","lastIndexOf","_createDeferredRenderCallback","callbacks","shift","_scheduleDeferredRenderCallbacks","run","requestAnimationFrame","previousAttributes","attrNames","attrCount","updateAttributes","event","_schedule","_runInvalidationQueue","getWNodeWrapper","invalidationQueue","previouslyRendered","sort","a","b","_runProcessQueue","sibling","_updateWidget","_runDomInstructionQueue","_cleanUpMergedNodes","mergedNode","removeChild","_process","reverse","parentDomNode","parentElement","enterAnimation","enterAnimationActive","enter","owningWrapper","nodeHandler","inserted","currentDomNode","replaceChild","exitAnimationActive","exit","attached","addRoot","onDetach","distinguishableCheck","childNodes","index","wrappers","parentWNodeWrapper","wrapperToCheck","parentName","nodeIdentifier","checkDistinguishable","createKeyMap","mergeNodes","oldIndex","newIndex","currentLength","nextLength","instructions","replace","currentKeys","nextKeys","currentWrapper","domElement","toUpperCase","mergeNodeIndex","splice","_processMergeNodes","_processOne","widget","currentNode","parentWrapper","findParentDomNode","isVirtual","isBody","isHead","createTextNode","head","createElementNS","createElement","_createDom","invalidate","Constructor","dirty","__setProperties__","__setChildren__","__render__","ids","resolveMiddleware","results","uniqueId","payload","createWidgetOptions","resolvedMiddleware","_createWidget","currentChildren","_updateDom","isSpecial","remove","specialIds","wrapperChildren","_removeDom","processResult","_removeWidget","didRender","customProperties","diffMap","runDiffs","ignoreProperties","changed","propertiesDiff","values","childId","mount","mountOptions","renderResult","wrapNodes","siblingId","unmount","cancelAnimationFrame","_global__WEBPACK_IMPORTED_MODULE_0__","Set","ContextPopup","_dojo_framework_core_vdom__WEBPACK_IMPORTED_MODULE_0__","_dojo_framework_core_middleware_focus__WEBPACK_IMPORTED_MODULE_1__","_popup__WEBPACK_IMPORTED_MODULE_2__","_dojo_framework_core_middleware_icache__WEBPACK_IMPORTED_MODULE_3__","_theme_default_context_popup_m_css__WEBPACK_IMPORTED_MODULE_4__","icache","focus","x","getOrSet","y","trigger","content","close","onClose","oncontextmenu","onOpen","preventDefault","pageX","pageY","yTop","yBottom","documentElement","scrollTop","clientHeight","position","open","shouldFocus","createICacheMiddleware","_shim_Map__WEBPACK_IMPORTED_MODULE_0__","_vdom__WEBPACK_IMPORTED_MODULE_1__","cacheMap","api","cachedValue","status","then","reference","shallow","auto","_Registry__WEBPACK_IMPORTED_MODULE_0__","isObjectOrArray","toString","previousProperty","newProperty","validOldProperty","validNewProperty","previousKeys","newKeys","some","_type","ignore","from","findIndex","flat","_support_util__WEBPACK_IMPORTED_MODULE_1__","of","copyWithin","fill","find","includes","flatMap","_core_Evented__WEBPACK_IMPORTED_MODULE_1__","_Registry__WEBPACK_IMPORTED_MODULE_2__","super","_registry","_registryWidgetLabelMap","_registryInjectorLabelMap","own","baseRegistry","injector","defineInjector","hasInjector","globalPrecedence","_get","getFunctionName","labelMap","registries","registeredLabels","handle","action","emit","theme","_vdom__WEBPACK_IMPORTED_MODULE_0__","_icache__WEBPACK_IMPORTED_MODULE_1__","_injector__WEBPACK_IMPORTED_MODULE_2__","_diff__WEBPACK_IMPORTED_MODULE_4__","_ThemeInjector__WEBPACK_IMPORTED_MODULE_5__","INJECTED_THEME_KEY","themeKeys","getTheme","themeInjector","themePayload","variant","themeRegistry","setInvalidator","registerThemeInjector","subscribe","css","cachedTheme","currentClasses","currentTheme","classKeys","classKey","join","root","Injector","_core_Evented__WEBPACK_IMPORTED_MODULE_0__","_payload","_invalidator","widgetFactory","registerCustomElement","default","defaultExport","injectorFactory","handles","getInjector","Map","Destroyable","_shim_Promise__WEBPACK_IMPORTED_MODULE_0__","noop","resolve","destroyed","Error","_handles","_icache__WEBPACK_IMPORTED_MODULE_2__","currentElement","initialized","previous","nodeSet","onFocusChange","activeElement","_","g","Function","eval","getOwnPropertyDescriptor","getOwnPropertyNames","is","getOwnPropertyDescriptors","entries","CustomElementChildType","DomToWidgetWrapper","register","_shim_array__WEBPACK_IMPORTED_MODULE_2__","_shim_global__WEBPACK_IMPORTED_MODULE_3__","_ThemeInjector__WEBPACK_IMPORTED_MODULE_4__","RESERVED_PROPS","wrappedWNode","setTimeout","dispatchEvent","CustomEvent","bubbles","detail","options","wrappedDomNode","descriptor","WidgetConstructor","registryFactory","attributeMap","attributeName","HTMLElement","arguments","_properties","_children","_eventProperties","_propertiesMap","_initialised","_childType","childType","_waitTillReady","readyState","element","_hasBeenParsed","_readyCallback","domProperties","_propertiesWithAttributes","_attributesToProperties","isReservedProp","filteredPropertyName","_getProperty","_setProperty","_getEventProperty","_setEventProperty","defineProperties","filter","childNode","isElement","isDojoChild","DOJO","NODE","_render","_childConnected","widgetProperties","renderChildren","Wrapper","themeContext","_getVariant","_getTheme","_renderer","display","getComputedStyle","dojoce","themes","slots","slotName","slotResult","existingSlotValue","Child","map","oldValue","parsedValue","JSON","parse","observedAttributes","__customElementDescriptor","customElements","testCache","testFunctions","staticFeatures","DojoHasEnvironment","staticCache","apply","feature","overwrite","normalizedFeature","exists","TypeError","strict","Promise","finally","Animation","KeyframeEffect","AbortController","AbortSignal","IntersectionObserver","ResizeObserver","onpointerdown","Element","dimensions","defaultDimensions","height","left","top","width","bottom","right","client","offset","scroll","boundingDimensions","getBoundingClientRect","clientLeft","clientTop","clientWidth","offsetHeight","offsetLeft","offsetTop","offsetWidth","scrollHeight","scrollLeft","scrollWidth","MapShim","getIndex","entry","anonymous","__entries__","prototypeAccessors","configurable","ctx","list","isBrowser","global$1","Math","requestAnimationFrame$1","Date","now","trailingTimeout","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","gatherActive","hasActive","broadcastActive","observe","childList","characterData","subtree","disconnect","ref","getInstance","instance_","defineConfigurable","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","positions","len","getHTMLElementContentRect","paddings","getPaddings","horizPad","vertPad","boxSizing","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","getContentRect","bbox","getSVGContentRect","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","broadcastRect","ResizeObserverEntry","rectInit","Constr","contentRect","DOMRectReadOnly","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","callback_","controller_","callbackCtx_","observations","unobserve","clearActive","this$1","observation","WeakMap","method","WIDGET_BASE_TYPE","isWidgetBaseConstructor","isWidgetFunction","isWNodeFactory","Registry","_shim_Map__WEBPACK_IMPORTED_MODULE_1__","_core_Evented__WEBPACK_IMPORTED_MODULE_2__","widgetLabel","_widgetRegistry","widgetCtor","emitLoadedEvent","error","_injectorRegistry","injectorItem","promise","isWidgetConstructorDefaultExport","resize","_shim_ResizeObserver__WEBPACK_IMPORTED_MODULE_0__","resizeObserver"," _key","underlay","ResizeObserver_default","nameOnGlobal","constructor","bodyScroll","_dojo_framework_shim_global__WEBPACK_IMPORTED_MODULE_1__","bodyStyle","disabled","previousOverflow","enableScroll","setProperty","removeProperty","enable","getPropertyValue","underlayVisible","Popup","_dojo_framework_core_middleware_dimensions__WEBPACK_IMPORTED_MODULE_0__","_dojo_framework_core_middleware_resize__WEBPACK_IMPORTED_MODULE_1__","_dojo_framework_core_middleware_theme__WEBPACK_IMPORTED_MODULE_2__","_middleware_bodyScroll__WEBPACK_IMPORTED_MODULE_3__","_dojo_framework_core_vdom__WEBPACK_IMPORTED_MODULE_4__","_theme_default_popup_m_css__WEBPACK_IMPORTED_MODULE_5__","_popup_m_css__WEBPACK_IMPORTED_MODULE_6__","wrapperDimensions","bottomOfVisibleScreen","topOfVisibleScreen","willFit","wrapperStyles","opacity","onclick","isThemeWithVariant","isThemeWithVariants","isThemeInjectorPayloadWithVariant","ThemeInjector_ThemeInjector","createThemeInjectorPayload","variants","isVariantModule","wrapNative","nativeFunction","isThenable","ShimPromise","onFinally","reason","Evented","_Destroyable__WEBPACK_IMPORTED_MODULE_1__","regexMap","listenersMap","methods","globString","targetString","regex","RegExp","test","isGlobMatch","listener","_addListener","listeners"],"mappings":"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","file":"context-popup-7.0.2-pre.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 180);\n","const globalObject = (function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof window !== 'undefined' && window.navigator.userAgent.indexOf('jsdom') > -1) {\n        return window;\n    }\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n})();\nexport default globalObject;\n//# sourceMappingURL=global.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport global from '../shim/global';\nimport has from '../core/has';\nimport WeakMap from '../shim/WeakMap';\nimport Set from '../shim/Set';\nimport Map from '../shim/Map';\nimport { flat } from '../shim/array';\nimport { Registry, isWidget, isWidgetBaseConstructor, isWidgetFunction, isWNodeFactory } from './Registry';\nimport { auto } from './diff';\nimport RegistryHandler from './RegistryHandler';\nconst EMPTY_ARRAY = [];\nconst nodeOperations = ['focus', 'blur', 'scrollIntoView', 'click'];\nconst NAMESPACE_W3 = 'http://www.w3.org/';\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\nconst WNODE = '__WNODE_TYPE';\nconst VNODE = '__VNODE_TYPE';\nconst DOMVNODE = '__DOMVNODE_TYPE';\n// @ts-ignore\nconst scope = typeof __DOJO_SCOPE === 'string' ? __DOJO_SCOPE : 'dojo_scope';\nif (!global[scope]) {\n    global[scope] = {};\n}\nexport function setRendering(value) {\n    global[scope].rendering = value;\n}\nexport function incrementBlockCount() {\n    const blocksPending = global[scope].blocksPending || 0;\n    global[scope].blocksPending = blocksPending + 1;\n}\nexport function decrementBlockCount() {\n    const blocksPending = global[scope].blocksPending || 0;\n    global[scope].blocksPending = blocksPending - 1;\n}\nexport function isTextNode(item) {\n    return item && item.nodeType === 3;\n}\nfunction isLazyDefine(item) {\n    return Boolean(item && item.label);\n}\nfunction isWNodeWrapper(child) {\n    return child && isWNode(child.node);\n}\nfunction isVNodeWrapper(child) {\n    return !!child && isVNode(child.node);\n}\nfunction isVirtualWrapper(child) {\n    return isVNodeWrapper(child) && child.node.tag === 'virtual';\n}\nfunction isBodyWrapper(wrapper) {\n    return isVNodeWrapper(wrapper) && wrapper.node.tag === 'body';\n}\nfunction isHeadWrapper(wrapper) {\n    return isVNodeWrapper(wrapper) && wrapper.node.tag === 'head';\n}\nfunction isSpecialWrapper(wrapper) {\n    return isHeadWrapper(wrapper) || isBodyWrapper(wrapper) || isVirtualWrapper(wrapper);\n}\nfunction isAttachApplication(value) {\n    return !!value.type;\n}\nexport function isWNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'string' && child.type === WNODE);\n}\nexport function isVNode(child) {\n    return Boolean(child &&\n        child !== true &&\n        typeof child !== 'number' &&\n        typeof child !== 'string' &&\n        (child.type === VNODE || child.type === DOMVNODE));\n}\nexport function isDomVNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'number' && typeof child !== 'string' && child.type === DOMVNODE);\n}\nexport function isElementNode(value) {\n    return !!value.tagName;\n}\nfunction toTextVNode(data) {\n    return {\n        tag: '',\n        properties: {},\n        children: undefined,\n        text: `${data}`,\n        type: VNODE\n    };\n}\nfunction updateAttributes(domNode, previousAttributes, attributes, namespace) {\n    const attrNames = Object.keys(attributes);\n    const attrCount = attrNames.length;\n    for (let i = 0; i < attrCount; i++) {\n        const attrName = attrNames[i];\n        const attrValue = attributes[attrName];\n        const previousAttrValue = previousAttributes[attrName];\n        if (attrValue !== previousAttrValue) {\n            updateAttribute(domNode, attrName, attrValue, namespace);\n        }\n    }\n}\nexport function w(widgetConstructorOrNode, properties, children) {\n    if (properties.__children__) {\n        delete properties.__children__;\n    }\n    if (isWNodeFactory(widgetConstructorOrNode)) {\n        return widgetConstructorOrNode(properties, children);\n    }\n    if (isWNode(widgetConstructorOrNode)) {\n        properties = Object.assign({}, widgetConstructorOrNode.properties, properties);\n        children = children ? children : widgetConstructorOrNode.children;\n        widgetConstructorOrNode = widgetConstructorOrNode.widgetConstructor;\n    }\n    return {\n        children: children || [],\n        widgetConstructor: widgetConstructorOrNode,\n        properties,\n        type: WNODE\n    };\n}\nexport function v(tag, propertiesOrChildren = {}, children = undefined) {\n    let properties = propertiesOrChildren;\n    let deferredPropertiesCallback;\n    if (typeof tag.tag === 'function') {\n        return tag.tag(properties, children);\n    }\n    if (Array.isArray(propertiesOrChildren)) {\n        children = propertiesOrChildren;\n        properties = {};\n    }\n    if (typeof properties === 'function') {\n        deferredPropertiesCallback = properties;\n        properties = {};\n    }\n    if (isVNode(tag)) {\n        let { classes = [], styles = {} } = properties, newProperties = __rest(properties, [\"classes\", \"styles\"]);\n        let _a = tag.properties, { classes: nodeClasses = [], styles: nodeStyles = {} } = _a, nodeProperties = __rest(_a, [\"classes\", \"styles\"]);\n        nodeClasses = Array.isArray(nodeClasses) ? nodeClasses : [nodeClasses];\n        classes = Array.isArray(classes) ? classes : [classes];\n        styles = Object.assign({}, nodeStyles, styles);\n        properties = Object.assign({}, nodeProperties, newProperties, { classes: [...nodeClasses, ...classes], styles });\n        children = children ? children : tag.children;\n        tag = tag.tag;\n    }\n    return {\n        tag,\n        deferredPropertiesCallback,\n        children,\n        properties,\n        type: VNODE\n    };\n}\n/**\n * Create a VNode for an existing DOM Node.\n */\nexport function dom({ node, attrs = {}, props = {}, on = {}, diffType = 'none', onAttach }, children) {\n    return {\n        tag: isElementNode(node) ? node.tagName.toLowerCase() : '',\n        properties: props,\n        attributes: attrs,\n        events: on,\n        children,\n        type: DOMVNODE,\n        domNode: node,\n        text: isElementNode(node) ? undefined : node.data,\n        diffType,\n        onAttach\n    };\n}\nexport const REGISTRY_ITEM = '__registry_item';\nexport class FromRegistry {\n    constructor() {\n        /* tslint:disable-next-line:variable-name */\n        this.__properties__ = {};\n    }\n}\nFromRegistry.type = REGISTRY_ITEM;\nexport function fromRegistry(tag) {\n    var _a;\n    return _a = class extends FromRegistry {\n            constructor() {\n                super(...arguments);\n                this.properties = {};\n                this.name = tag;\n            }\n        },\n        _a.type = REGISTRY_ITEM,\n        _a;\n}\nexport function tsx(tag, properties = {}, ...children) {\n    children = flat(children, Infinity);\n    properties = properties === null ? {} : properties;\n    if (typeof tag === 'string') {\n        return v(tag, properties, children);\n    }\n    else if (tag.type === 'registry' && properties.__autoRegistryItem) {\n        const name = properties.__autoRegistryItem;\n        delete properties.__autoRegistryItem;\n        return w(name, properties, children);\n    }\n    else if (tag.type === REGISTRY_ITEM) {\n        const registryItem = new tag();\n        return w(registryItem.name, properties, children);\n    }\n    else {\n        return w(tag, properties, children);\n    }\n}\nexport function propertiesDiff(current, next, invalidator, ignoreProperties) {\n    const propertyNames = [...Object.keys(current), ...Object.keys(next)];\n    for (let i = 0; i < propertyNames.length; i++) {\n        if (ignoreProperties.indexOf(propertyNames[i]) > -1) {\n            continue;\n        }\n        const result = auto(current[propertyNames[i]], next[propertyNames[i]]);\n        if (result.changed) {\n            invalidator();\n            break;\n        }\n        ignoreProperties.push(propertyNames[i]);\n    }\n}\nfunction buildPreviousProperties(domNode, current) {\n    const { node: { diffType, properties, attributes } } = current;\n    if (!diffType || diffType === 'vdom') {\n        return {\n            properties: current.deferredProperties\n                ? Object.assign({}, current.deferredProperties, current.node.properties) : current.node.properties,\n            attributes: current.node.attributes,\n            events: current.node.events\n        };\n    }\n    else if (diffType === 'none') {\n        return {\n            properties: {},\n            attributes: current.node.attributes ? {} : undefined,\n            events: current.node.events\n        };\n    }\n    let newProperties = {\n        properties: {}\n    };\n    if (attributes) {\n        newProperties.attributes = {};\n        newProperties.events = current.node.events;\n        Object.keys(properties).forEach((propName) => {\n            newProperties.properties[propName] = domNode[propName];\n        });\n        Object.keys(attributes).forEach((attrName) => {\n            newProperties.attributes[attrName] = domNode.getAttribute(attrName);\n        });\n        return newProperties;\n    }\n    newProperties.properties = Object.keys(properties).reduce((props, property) => {\n        props[property] = domNode.getAttribute(property) || domNode[property];\n        return props;\n    }, {});\n    return newProperties;\n}\nfunction checkDistinguishable(wrappers, index, parentWNodeWrapper) {\n    const wrapperToCheck = wrappers[index];\n    if (isVNodeWrapper(wrapperToCheck) && !wrapperToCheck.node.tag) {\n        return;\n    }\n    const { key } = wrapperToCheck.node.properties;\n    let parentName = 'unknown';\n    if (parentWNodeWrapper) {\n        const { node: { widgetConstructor } } = parentWNodeWrapper;\n        parentName = widgetConstructor.name || 'unknown';\n    }\n    if (key === undefined || key === null) {\n        for (let i = 0; i < wrappers.length; i++) {\n            if (i !== index) {\n                const wrapper = wrappers[i];\n                if (same(wrapper, wrapperToCheck)) {\n                    let nodeIdentifier;\n                    if (isWNodeWrapper(wrapper)) {\n                        nodeIdentifier = wrapper.node.widgetConstructor.name || 'unknown';\n                    }\n                    else {\n                        nodeIdentifier = wrapper.node.tag;\n                    }\n                    console.warn(`A widget (${parentName}) has had a child added or removed, but they were not able to uniquely identified. It is recommended to provide a unique 'key' property when using the same widget or element (${nodeIdentifier}) multiple times as siblings`);\n                    break;\n                }\n            }\n        }\n    }\n}\nfunction same(dnode1, dnode2) {\n    if (isVNodeWrapper(dnode1) && isVNodeWrapper(dnode2)) {\n        if (isDomVNode(dnode1.node) && isDomVNode(dnode2.node)) {\n            if (dnode1.node.domNode !== dnode2.node.domNode) {\n                return false;\n            }\n        }\n        if (dnode1.node.tag !== dnode2.node.tag) {\n            return false;\n        }\n        if (dnode1.node.properties.key !== dnode2.node.properties.key) {\n            return false;\n        }\n        return true;\n    }\n    else if (isWNodeWrapper(dnode1) && isWNodeWrapper(dnode2)) {\n        const widgetConstructor1 = dnode1.registryItem || dnode1.node.widgetConstructor;\n        const widgetConstructor2 = dnode2.registryItem || dnode2.node.widgetConstructor;\n        const { node: { properties: props1 } } = dnode1;\n        const { node: { properties: props2 } } = dnode2;\n        if (dnode1.instance === undefined && typeof widgetConstructor2 === 'string') {\n            return false;\n        }\n        if (widgetConstructor1 !== widgetConstructor2) {\n            return false;\n        }\n        if (props1.key !== props2.key) {\n            return false;\n        }\n        if (!(widgetConstructor1.keys || []).every((key) => props1[key] === props2[key])) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction findIndexOfChild(children, sameAs, start) {\n    for (let i = start; i < children.length; i++) {\n        if (same(children[i], sameAs)) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction createClassPropValue(classes = []) {\n    let classNames = '';\n    if (Array.isArray(classes)) {\n        for (let i = 0; i < classes.length; i++) {\n            let className = classes[i];\n            if (className && className !== true) {\n                classNames = classNames ? `${classNames} ${className}` : className;\n            }\n        }\n        return classNames;\n    }\n    if (classes && classes !== true) {\n        classNames = classes;\n    }\n    return classNames;\n}\nfunction updateAttribute(domNode, attrName, attrValue, namespace) {\n    if (namespace === NAMESPACE_SVG && attrName === 'href' && attrValue) {\n        domNode.setAttributeNS(NAMESPACE_XLINK, attrName, attrValue);\n    }\n    else if ((attrName === 'role' && attrValue === '') || attrValue === undefined) {\n        domNode.removeAttribute(attrName);\n    }\n    else {\n        domNode.setAttribute(attrName, attrValue);\n    }\n}\nfunction arrayFrom(arr) {\n    return Array.prototype.slice.call(arr);\n}\nfunction createFactory(callback, middlewares, key) {\n    const factory = (properties, children) => {\n        if (properties) {\n            const result = w(callback, properties, children);\n            callback.isWidget = true;\n            callback.middlewares = middlewares;\n            return result;\n        }\n        return {\n            middlewares,\n            callback\n        };\n    };\n    const keys = Object.keys(middlewares).reduce((keys, middlewareName) => {\n        const middleware = middlewares[middlewareName];\n        if (middleware.keys) {\n            keys = [...keys, ...middleware.keys];\n        }\n        return keys;\n    }, key ? [key] : []);\n    callback.keys = keys;\n    factory.keys = keys;\n    factory.isFactory = true;\n    return factory;\n}\nexport function create(middlewares = {}) {\n    function properties() {\n        function returns(callback) {\n            return createFactory(callback, middlewares);\n        }\n        function key(key) {\n            function returns(callback) {\n                return createFactory(callback, middlewares, key);\n            }\n            return returns;\n        }\n        function children() {\n            function returns(callback) {\n                return createFactory(callback, middlewares);\n            }\n            function key(key) {\n                function returns(callback) {\n                    return createFactory(callback, middlewares, key);\n                }\n                return returns;\n            }\n            returns.key = key;\n            return returns;\n        }\n        returns.children = children;\n        returns.key = key;\n        return returns;\n    }\n    function children() {\n        function properties() {\n            function returns(callback) {\n                return createFactory(callback, middlewares);\n            }\n            function key(key) {\n                function returns(callback) {\n                    return createFactory(callback, middlewares, key);\n                }\n                return returns;\n            }\n            returns.key = key;\n            return returns;\n        }\n        function returns(callback) {\n            return createFactory(callback, middlewares);\n        }\n        returns.properties = properties;\n        return returns;\n    }\n    function returns(callback) {\n        return createFactory(callback, middlewares);\n    }\n    returns.children = children;\n    returns.properties = properties;\n    return returns;\n}\nconst factory = create();\nfunction wrapNodes(renderer) {\n    const result = renderer();\n    const isWNodeWrapper = isWNode(result);\n    const callback = () => {\n        return result;\n    };\n    callback.isWNodeWrapper = isWNodeWrapper;\n    return factory(callback);\n}\nexport const widgetInstanceMap = new WeakMap();\nconst widgetMetaMap = new Map();\nconst requestedDomNodes = new Set();\nlet wrapperId = 0;\nlet metaId = 0;\nfunction addNodeToMap(id, key, node) {\n    const widgetMeta = widgetMetaMap.get(id);\n    if (widgetMeta) {\n        widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n        widgetMeta.nodeMap.set(key, node);\n        if (requestedDomNodes.has(`${id}-${key}`)) {\n            widgetMeta.invalidator();\n            requestedDomNodes.delete(`${id}-${key}`);\n        }\n    }\n}\nfunction destroyHandles(meta) {\n    const { destroyMap, middlewareIds } = meta;\n    if (!destroyMap) {\n        return;\n    }\n    for (let i = 0; i < middlewareIds.length; i++) {\n        const id = middlewareIds[i];\n        const destroy = destroyMap.get(id);\n        destroy && destroy();\n        destroyMap.delete(id);\n        if (destroyMap.size === 0) {\n            break;\n        }\n    }\n    destroyMap.clear();\n}\nfunction runDiffs(meta, current, next) {\n    let customProperties = {};\n    meta.customDiffMap = meta.customDiffMap || new Map();\n    if (meta.customDiffMap.size) {\n        meta.customDiffMap.forEach((diffMap) => {\n            diffMap.forEach((diff, propertyName) => {\n                const result = diff(Object.assign({}, current), Object.assign({}, next));\n                if (result) {\n                    customProperties[propertyName] = result;\n                }\n            });\n        });\n    }\n    return customProperties;\n}\nexport const invalidator = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            return widgetMeta.invalidator();\n        }\n    };\n});\nexport const node = factory(({ id }) => {\n    return {\n        get(key) {\n            const [widgetId] = id.split('-');\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n                const mountNode = widgetMeta.mountNode;\n                const node = widgetMeta.nodeMap.get(key);\n                if (node &&\n                    (mountNode.contains(node) ||\n                        (global.document.body !== mountNode && global.document.body.contains(node)))) {\n                    return node;\n                }\n                requestedDomNodes.add(`${widgetId}-${key}`);\n            }\n            return null;\n        }\n    };\n});\nexport const diffProperty = factory(({ id }) => {\n    function callback(propertyName, propertiesOrDiff, diff) {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (!diff) {\n            diff = propertiesOrDiff;\n        }\n        if (widgetMeta) {\n            widgetMeta.customDiffMap = widgetMeta.customDiffMap || new Map();\n            widgetMeta.customDiffProperties = widgetMeta.customDiffProperties || new Set();\n            const propertyDiffMap = widgetMeta.customDiffMap.get(id) || new Map();\n            if (!propertyDiffMap.has(propertyName)) {\n                const result = diff({}, widgetMeta.originalProperties);\n                if (result !== undefined) {\n                    if (has('dojo-debug')) {\n                        if (widgetMeta.propertiesCalled) {\n                            console.warn(`Calling \"propertyDiff\" middleware after accessing properties in \"${widgetMeta.widgetName}\", can result in referencing stale properties.`);\n                        }\n                    }\n                    widgetMeta.properties = Object.assign({}, widgetMeta.properties, { [propertyName]: result });\n                }\n                propertyDiffMap.set(propertyName, diff);\n                widgetMeta.customDiffProperties.add(propertyName);\n            }\n            widgetMeta.customDiffMap.set(id, propertyDiffMap);\n        }\n    }\n    return callback;\n});\nexport const destroy = factory(({ id }) => {\n    return (destroyFunction) => {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            widgetMeta.destroyMap = widgetMeta.destroyMap || new Map();\n            if (!widgetMeta.destroyMap.has(id)) {\n                widgetMeta.destroyMap.set(id, destroyFunction);\n            }\n        }\n    };\n});\nexport const getRegistry = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            if (!widgetMeta.registryHandler) {\n                widgetMeta.registryHandler = new RegistryHandler();\n                widgetMeta.registryHandler.base = widgetMeta.registry;\n                widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n            }\n            widgetMeta.registryHandler = widgetMeta.registryHandler || new RegistryHandler();\n            return widgetMeta.registryHandler;\n        }\n        return null;\n    };\n});\nexport const defer = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    let isDeferred = false;\n    return {\n        pause() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (!isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs + 1;\n                isDeferred = true;\n            }\n        },\n        resume() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs - 1;\n                isDeferred = false;\n            }\n        }\n    };\n});\nfunction wrapFunctionProperties(id, properties) {\n    const props = {};\n    const propertyNames = Object.keys(properties);\n    for (let i = 0; i < propertyNames.length; i++) {\n        const propertyName = propertyNames[i];\n        if (typeof properties[propertyName] === 'function') {\n            props[propertyName] = function WrappedProperty(...args) {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    return widgetMeta.originalProperties[propertyName](...args);\n                }\n                return properties[propertyName](...args);\n            };\n            props[propertyName].unwrap = () => {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    return widgetMeta.originalProperties[propertyName];\n                }\n                return properties[propertyName];\n            };\n        }\n        else {\n            props[propertyName] = properties[propertyName];\n        }\n    }\n    return props;\n}\nexport function renderer(renderer) {\n    let _mountOptions = {\n        sync: false,\n        merge: true,\n        transition: undefined,\n        domNode: global.document.body,\n        registry: new Registry()\n    };\n    let _invalidationQueue = [];\n    let _processQueue = [];\n    let _deferredProcessQueue = [];\n    let _applicationQueue = [];\n    let _eventMap = new WeakMap();\n    let _idToWrapperMap = new Map();\n    let _wrapperSiblingMap = new WeakMap();\n    let _idToChildrenWrappers = new Map();\n    let _insertBeforeMap = new WeakMap();\n    let _nodeToWrapperMap = new WeakMap();\n    let _renderScheduled;\n    let _deferredRenderCallbacks = [];\n    let parentInvalidate;\n    let _allMergedNodes = [];\n    let _appWrapperId;\n    let _deferredProcessIds = new Map();\n    function nodeOperation(propName, propValue, previousValue, domNode) {\n        let result = propValue && !previousValue;\n        if (typeof propValue === 'function') {\n            result = propValue();\n        }\n        if (result === true) {\n            _deferredRenderCallbacks.push(() => {\n                domNode[propName]();\n            });\n        }\n    }\n    function updateEvent(domNode, eventName, currentValue, previousValue) {\n        if (previousValue) {\n            const previousEvent = _eventMap.get(previousValue);\n            previousEvent && domNode.removeEventListener(eventName, previousEvent);\n        }\n        let callback = currentValue;\n        if (eventName === 'input') {\n            callback = function (evt) {\n                currentValue.call(this, evt);\n                evt.target['oninput-value'] = evt.target.value;\n            };\n        }\n        domNode.addEventListener(eventName, callback);\n        _eventMap.set(currentValue, callback);\n    }\n    function removeOrphanedEvents(domNode, previousProperties, properties, onlyEvents = false) {\n        Object.keys(previousProperties).forEach((propName) => {\n            const isEvent = propName.substr(0, 2) === 'on' || onlyEvents;\n            const eventName = onlyEvents ? propName : propName.substr(2);\n            if (isEvent && !properties[propName]) {\n                const eventCallback = _eventMap.get(previousProperties[propName]);\n                if (eventCallback) {\n                    domNode.removeEventListener(eventName, eventCallback);\n                }\n            }\n        });\n    }\n    function resolveRegistryItem(wrapper, instance, id) {\n        if (!isWidget(wrapper.node.widgetConstructor)) {\n            const owningNode = _nodeToWrapperMap.get(wrapper.node);\n            if (owningNode) {\n                if (owningNode.instance) {\n                    instance = owningNode.instance;\n                }\n                else {\n                    id = owningNode.id;\n                }\n            }\n            let registry;\n            if (instance) {\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    registry = instanceData.registry;\n                }\n            }\n            else if (id !== undefined) {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    if (!widgetMeta.registryHandler) {\n                        widgetMeta.registryHandler = new RegistryHandler();\n                        widgetMeta.registryHandler.base = widgetMeta.registry;\n                        widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n                    }\n                    registry = widgetMeta.registryHandler;\n                }\n            }\n            if (registry) {\n                let registryLabel;\n                if (isLazyDefine(wrapper.node.widgetConstructor)) {\n                    const { label, registryItem } = wrapper.node.widgetConstructor;\n                    if (!registry.has(label)) {\n                        registry.define(label, registryItem);\n                    }\n                    registryLabel = label;\n                }\n                else {\n                    registryLabel = wrapper.node.widgetConstructor;\n                }\n                let item = registry.get(registryLabel);\n                if (isWNodeFactory(item)) {\n                    const node = item(wrapper.node.properties, wrapper.node.children);\n                    if (isWidgetFunction(node.widgetConstructor)) {\n                        wrapper.registryItem = node.widgetConstructor;\n                    }\n                }\n                else {\n                    wrapper.registryItem = item;\n                }\n            }\n        }\n    }\n    function mapNodeToInstance(nodes, wrapper) {\n        while (nodes.length) {\n            let node = nodes.pop();\n            if (isWNode(node) || isVNode(node)) {\n                if (!_nodeToWrapperMap.has(node)) {\n                    _nodeToWrapperMap.set(node, wrapper);\n                    if (node.children && node.children.length) {\n                        nodes = [...nodes, ...node.children];\n                    }\n                }\n            }\n        }\n    }\n    function renderedToWrapper(rendered, parent, currentParent) {\n        const { requiresInsertBefore, hasPreviousSiblings, namespace, depth } = parent;\n        const wrappedRendered = [];\n        const hasParentWNode = isWNodeWrapper(parent);\n        const hasVirtualParentNode = isVirtualWrapper(parent);\n        const currentParentChildren = (isVNodeWrapper(currentParent) && _idToChildrenWrappers.get(currentParent.id)) || [];\n        const hasCurrentParentChildren = currentParentChildren.length > 0;\n        const insertBefore = ((requiresInsertBefore || hasPreviousSiblings !== false) && (hasParentWNode || hasVirtualParentNode)) ||\n            (hasCurrentParentChildren && rendered.length > 1);\n        let previousItem;\n        if (isWNodeWrapper(parent) && rendered.length) {\n            mapNodeToInstance([...rendered], parent);\n        }\n        for (let i = 0; i < rendered.length; i++) {\n            let renderedItem = rendered[i];\n            if (!renderedItem || renderedItem === true) {\n                continue;\n            }\n            if (typeof renderedItem === 'string' || typeof renderedItem === 'number') {\n                renderedItem = toTextVNode(renderedItem);\n            }\n            const owningNode = _nodeToWrapperMap.get(renderedItem);\n            const wrapper = {\n                node: renderedItem,\n                depth: depth + 1,\n                order: i,\n                parentId: parent.id,\n                requiresInsertBefore: insertBefore,\n                hasParentWNode,\n                namespace: namespace\n            };\n            if (isVNode(renderedItem)) {\n                if (renderedItem.deferredPropertiesCallback) {\n                    wrapper.deferredProperties = renderedItem.deferredPropertiesCallback(false);\n                }\n                if (renderedItem.properties.exitAnimation) {\n                    parent.hasAnimations = true;\n                    let nextParent = _idToWrapperMap.get(parent.parentId);\n                    while (nextParent) {\n                        if (nextParent.hasAnimations) {\n                            break;\n                        }\n                        nextParent.hasAnimations = true;\n                        nextParent = _idToWrapperMap.get(nextParent.parentId);\n                    }\n                }\n            }\n            if (owningNode) {\n                wrapper.owningId = owningNode.id;\n            }\n            if (isWNode(renderedItem)) {\n                resolveRegistryItem(wrapper, parent.instance, parent.id);\n            }\n            if (previousItem) {\n                _wrapperSiblingMap.set(previousItem, wrapper);\n            }\n            wrappedRendered.push(wrapper);\n            previousItem = wrapper;\n        }\n        return wrappedRendered;\n    }\n    function findParentDomNode(currentNode) {\n        let parentDomNode;\n        let parentWrapper = _idToWrapperMap.get(currentNode.parentId);\n        while (!parentDomNode && parentWrapper) {\n            if (!parentDomNode &&\n                isVNodeWrapper(parentWrapper) &&\n                !isVirtualWrapper(parentWrapper) &&\n                parentWrapper.domNode) {\n                parentDomNode = parentWrapper.domNode;\n            }\n            parentWrapper = _idToWrapperMap.get(parentWrapper.parentId);\n        }\n        return parentDomNode;\n    }\n    function runDeferredProperties(next) {\n        const { deferredPropertiesCallback } = next.node;\n        if (deferredPropertiesCallback) {\n            const properties = next.node.properties;\n            _deferredRenderCallbacks.push(() => {\n                if (_idToWrapperMap.has(next.owningId)) {\n                    const deferredProperties = next.deferredProperties;\n                    next.deferredProperties = deferredPropertiesCallback(true);\n                    processProperties(next, {\n                        properties: Object.assign({}, deferredProperties, properties)\n                    });\n                }\n            });\n        }\n    }\n    function findInsertBefore(next) {\n        let insertBefore = null;\n        let searchNode = next;\n        while (!insertBefore) {\n            const nextSibling = _wrapperSiblingMap.get(searchNode);\n            if (nextSibling) {\n                let domNode = nextSibling.domNode;\n                if (isWNodeWrapper(nextSibling) || isVirtualWrapper(nextSibling)) {\n                    if (!nextSibling.childDomWrapperId) {\n                        nextSibling.childDomWrapperId = findDomNodeOnParentWrapper(nextSibling.id);\n                    }\n                    if (nextSibling.childDomWrapperId) {\n                        const childWrapper = _idToWrapperMap.get(nextSibling.childDomWrapperId);\n                        if (childWrapper && !isBodyWrapper(childWrapper) && !isHeadWrapper(childWrapper)) {\n                            domNode = childWrapper.domNode;\n                        }\n                    }\n                }\n                if (domNode && domNode.parentNode) {\n                    insertBefore = domNode;\n                    break;\n                }\n                searchNode = nextSibling;\n                continue;\n            }\n            searchNode = searchNode && _idToWrapperMap.get(searchNode.parentId);\n            if (!searchNode || (isVNodeWrapper(searchNode) && !isVirtualWrapper(searchNode))) {\n                break;\n            }\n        }\n        return insertBefore;\n    }\n    function setValue(domNode, propValue, previousValue) {\n        const domValue = domNode.value;\n        const onInputValue = domNode['oninput-value'];\n        const onSelectValue = domNode['select-value'];\n        if (onSelectValue && domValue !== onSelectValue) {\n            domNode.value = onSelectValue;\n            if (domNode.value === onSelectValue) {\n                domNode['select-value'] = undefined;\n            }\n        }\n        else if ((onInputValue && domValue === onInputValue) || propValue !== previousValue) {\n            domNode.value = propValue;\n            domNode['oninput-value'] = undefined;\n        }\n    }\n    function setProperties(domNode, currentProperties = {}, nextWrapper, includesEventsAndAttributes = true) {\n        const properties = nextWrapper.deferredProperties\n            ? Object.assign({}, nextWrapper.deferredProperties, nextWrapper.node.properties) : nextWrapper.node.properties;\n        const propNames = Object.keys(properties);\n        const propCount = propNames.length;\n        if (propNames.indexOf('classes') === -1 && currentProperties.classes) {\n            domNode.removeAttribute('class');\n        }\n        includesEventsAndAttributes && removeOrphanedEvents(domNode, currentProperties, properties);\n        for (let i = 0; i < propCount; i++) {\n            const propName = propNames[i];\n            let propValue = properties[propName];\n            const previousValue = currentProperties[propName];\n            if (propName === 'classes') {\n                const previousClassString = createClassPropValue(previousValue);\n                let currentClassString = createClassPropValue(propValue);\n                if (previousClassString !== currentClassString) {\n                    if (currentClassString) {\n                        if (nextWrapper.merged) {\n                            const domClasses = (domNode.getAttribute('class') || '').split(' ');\n                            for (let i = 0; i < domClasses.length; i++) {\n                                if (currentClassString.indexOf(domClasses[i]) === -1) {\n                                    currentClassString = `${domClasses[i]} ${currentClassString}`;\n                                }\n                            }\n                        }\n                        domNode.setAttribute('class', currentClassString);\n                    }\n                    else {\n                        domNode.removeAttribute('class');\n                    }\n                }\n            }\n            else if (nodeOperations.indexOf(propName) !== -1) {\n                nodeOperation(propName, propValue, previousValue, domNode);\n            }\n            else if (propName === 'styles') {\n                const styleNames = Object.keys(propValue);\n                const styleCount = styleNames.length;\n                for (let j = 0; j < styleCount; j++) {\n                    const styleName = styleNames[j];\n                    const newStyleValue = propValue[styleName];\n                    const oldStyleValue = previousValue && previousValue[styleName];\n                    if (newStyleValue === oldStyleValue) {\n                        continue;\n                    }\n                    domNode.style[styleName] = newStyleValue || '';\n                }\n            }\n            else {\n                if (!propValue && typeof previousValue === 'string') {\n                    propValue = '';\n                }\n                if (propName === 'value') {\n                    if (domNode.tagName === 'SELECT') {\n                        domNode['select-value'] = propValue;\n                    }\n                    setValue(domNode, propValue, previousValue);\n                }\n                else if (propName !== 'key' && propValue !== previousValue) {\n                    const type = typeof propValue;\n                    if (type === 'function' && propName.lastIndexOf('on', 0) === 0 && includesEventsAndAttributes) {\n                        updateEvent(domNode, propName.substr(2), propValue, previousValue);\n                    }\n                    else if (type === 'string' && propName !== 'innerHTML' && includesEventsAndAttributes) {\n                        updateAttribute(domNode, propName, propValue, nextWrapper.namespace);\n                    }\n                    else if (propName === 'scrollLeft' || propName === 'scrollTop') {\n                        if (domNode[propName] !== propValue) {\n                            domNode[propName] = propValue;\n                        }\n                    }\n                    else {\n                        domNode[propName] = propValue;\n                    }\n                }\n            }\n        }\n    }\n    function _createDeferredRenderCallback() {\n        const callbacks = _deferredRenderCallbacks;\n        _deferredRenderCallbacks = [];\n        if (callbacks.length) {\n            return () => {\n                let callback;\n                while ((callback = callbacks.shift())) {\n                    callback();\n                }\n            };\n        }\n    }\n    function _scheduleDeferredRenderCallbacks() {\n        const { sync } = _mountOptions;\n        const run = _createDeferredRenderCallback();\n        if (run) {\n            if (sync) {\n                run();\n            }\n            else {\n                let id;\n                id = global.requestAnimationFrame(() => {\n                    _deferredProcessIds.delete(id);\n                    run();\n                });\n                _deferredProcessIds.set(id, run);\n            }\n        }\n    }\n    function processProperties(next, previousProperties) {\n        if (next.node.attributes && next.node.events) {\n            updateAttributes(next.domNode, previousProperties.attributes || {}, next.node.attributes, next.namespace);\n            setProperties(next.domNode, previousProperties.properties, next, false);\n            const events = next.node.events || {};\n            if (previousProperties.events) {\n                removeOrphanedEvents(next.domNode, previousProperties.events || {}, next.node.events, true);\n            }\n            previousProperties.events = previousProperties.events || {};\n            Object.keys(events).forEach((event) => {\n                updateEvent(next.domNode, event, events[event], previousProperties.events[event]);\n            });\n        }\n        else {\n            setProperties(next.domNode, previousProperties.properties, next);\n        }\n    }\n    function unmount() {\n        _processQueue.push({\n            current: [_idToWrapperMap.get(_appWrapperId)],\n            next: [],\n            meta: {}\n        });\n        if (_renderScheduled) {\n            global.cancelAnimationFrame(_renderScheduled);\n        }\n        _runProcessQueue();\n        _runDomInstructionQueue();\n        _deferredProcessIds.forEach((callback, id) => {\n            global.cancelAnimationFrame(id);\n            callback();\n        });\n        const run = _createDeferredRenderCallback();\n        run && run();\n        _invalidationQueue = [];\n        _processQueue = [];\n        _deferredProcessQueue = [];\n        _applicationQueue = [];\n        _deferredRenderCallbacks = [];\n        _allMergedNodes = [];\n        _eventMap = new WeakMap();\n        _idToWrapperMap.clear();\n        _idToChildrenWrappers.clear();\n        _wrapperSiblingMap = new WeakMap();\n        _nodeToWrapperMap = new WeakMap();\n        _insertBeforeMap = undefined;\n    }\n    function mount(mountOptions = {}) {\n        let domNode = mountOptions.domNode;\n        if (!domNode) {\n            if (has('dojo-debug') && domNode === null) {\n                console.warn('Unable to find node to mount the application, defaulting to the document body.');\n            }\n            domNode = global.document.body;\n        }\n        _mountOptions = Object.assign({}, _mountOptions, mountOptions, { domNode });\n        const renderResult = wrapNodes(renderer)({}, []);\n        _appWrapperId = `${wrapperId++}`;\n        const nextWrapper = {\n            id: _appWrapperId,\n            node: renderResult,\n            order: 0,\n            depth: 1,\n            owningId: '-1',\n            parentId: '-1',\n            siblingId: '-1',\n            properties: {}\n        };\n        _idToWrapperMap.set('-1', {\n            id: `-1`,\n            depth: 0,\n            order: 0,\n            owningId: '',\n            domNode,\n            node: v('fake'),\n            parentId: '-1'\n        });\n        _processQueue.push({\n            current: [],\n            next: [nextWrapper],\n            meta: { mergeNodes: arrayFrom(domNode.childNodes) }\n        });\n        _runProcessQueue();\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _insertBeforeMap = undefined;\n        _scheduleDeferredRenderCallbacks();\n        if (!_renderScheduled) {\n            setRendering(false);\n        }\n    }\n    function invalidate() {\n        parentInvalidate && parentInvalidate();\n    }\n    function _schedule() {\n        const { sync } = _mountOptions;\n        if (sync) {\n            _runInvalidationQueue();\n        }\n        else if (!_renderScheduled) {\n            setRendering(true);\n            _renderScheduled = global.requestAnimationFrame(() => {\n                _runInvalidationQueue();\n            });\n        }\n    }\n    function getWNodeWrapper(id) {\n        const wrapper = _idToWrapperMap.get(id);\n        if (wrapper && isWNodeWrapper(wrapper)) {\n            return wrapper;\n        }\n    }\n    function _runInvalidationQueue() {\n        _renderScheduled = undefined;\n        let invalidationQueue = [..._invalidationQueue];\n        const previouslyRendered = [];\n        _invalidationQueue = [];\n        invalidationQueue.sort((a, b) => {\n            let result = b.depth - a.depth;\n            if (result === 0) {\n                result = b.order - a.order;\n            }\n            return result;\n        });\n        if (_deferredProcessQueue.length) {\n            _processQueue = [..._deferredProcessQueue];\n            _deferredProcessQueue = [];\n            _runProcessQueue();\n            if (_deferredProcessQueue.length) {\n                _invalidationQueue = [...invalidationQueue];\n                invalidationQueue = [];\n            }\n        }\n        let item;\n        while ((item = invalidationQueue.pop())) {\n            let { id } = item;\n            const current = getWNodeWrapper(id);\n            if (!current || previouslyRendered.indexOf(id) !== -1 || !_idToWrapperMap.has(current.parentId)) {\n                continue;\n            }\n            previouslyRendered.push(id);\n            const sibling = _wrapperSiblingMap.get(current);\n            const next = {\n                node: {\n                    type: WNODE,\n                    widgetConstructor: current.node.widgetConstructor,\n                    properties: current.properties || {},\n                    children: current.node.children || []\n                },\n                instance: current.instance,\n                id: current.id,\n                properties: current.properties,\n                depth: current.depth,\n                order: current.order,\n                owningId: current.owningId,\n                parentId: current.parentId,\n                registryItem: current.registryItem\n            };\n            sibling && _wrapperSiblingMap.set(next, sibling);\n            const result = _updateWidget({ current, next });\n            if (result && result.item) {\n                _processQueue.push(result.item);\n                _idToWrapperMap.set(id, next);\n                _runProcessQueue();\n            }\n        }\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _scheduleDeferredRenderCallbacks();\n        if (!_renderScheduled) {\n            setRendering(false);\n        }\n    }\n    function _cleanUpMergedNodes() {\n        if (_deferredProcessQueue.length === 0) {\n            let mergedNode;\n            while ((mergedNode = _allMergedNodes.pop())) {\n                mergedNode.parentNode && mergedNode.parentNode.removeChild(mergedNode);\n            }\n            _mountOptions.merge = false;\n        }\n    }\n    function _runProcessQueue() {\n        let item;\n        while ((item = _processQueue.pop())) {\n            if (isAttachApplication(item)) {\n                item.instance && _applicationQueue.push(item);\n            }\n            else {\n                const { current, next, meta } = item;\n                _process(current || EMPTY_ARRAY, next || EMPTY_ARRAY, meta);\n            }\n        }\n    }\n    function _runDomInstructionQueue() {\n        _applicationQueue.reverse();\n        let item;\n        while ((item = _applicationQueue.pop())) {\n            if (item.type === 'create') {\n                const { parentDomNode, next, next: { domNode, merged, requiresInsertBefore, node } } = item;\n                processProperties(next, { properties: {} });\n                runDeferredProperties(next);\n                if (!merged) {\n                    let insertBefore;\n                    if (requiresInsertBefore) {\n                        insertBefore = findInsertBefore(next);\n                    }\n                    else if (_insertBeforeMap) {\n                        insertBefore = _insertBeforeMap.get(next);\n                    }\n                    parentDomNode.insertBefore(domNode, insertBefore);\n                    if (isDomVNode(next.node) && next.node.onAttach) {\n                        next.node.onAttach();\n                    }\n                }\n                if (domNode.tagName === 'OPTION' && domNode.parentElement) {\n                    setValue(domNode.parentElement);\n                }\n                const { enterAnimation, enterAnimationActive } = node.properties;\n                if (_mountOptions.transition && enterAnimation && enterAnimation !== true) {\n                    _mountOptions.transition.enter(domNode, enterAnimation, enterAnimationActive);\n                }\n                const owningWrapper = _nodeToWrapperMap.get(next.node);\n                if (owningWrapper && node.properties.key != null) {\n                    if (owningWrapper.instance) {\n                        const instanceData = widgetInstanceMap.get(owningWrapper.instance);\n                        instanceData && instanceData.nodeHandler.add(domNode, `${node.properties.key}`);\n                    }\n                    else {\n                        addNodeToMap(owningWrapper.id, node.properties.key, domNode);\n                    }\n                }\n                item.next.inserted = true;\n            }\n            else if (item.type === 'update') {\n                const { next, next: { domNode }, current, current: { domNode: currentDomNode } } = item;\n                if (isTextNode(domNode) && isTextNode(currentDomNode) && domNode !== currentDomNode) {\n                    currentDomNode.parentNode && currentDomNode.parentNode.replaceChild(domNode, currentDomNode);\n                }\n                else {\n                    const previousProperties = buildPreviousProperties(domNode, current);\n                    processProperties(next, previousProperties);\n                    runDeferredProperties(next);\n                }\n            }\n            else if (item.type === 'delete') {\n                const { current } = item;\n                const { exitAnimation, exitAnimationActive } = current.node.properties;\n                if (_mountOptions.transition && exitAnimation && exitAnimation !== true) {\n                    _mountOptions.transition.exit(current.domNode, exitAnimation, exitAnimationActive);\n                }\n                else {\n                    current.domNode.parentNode.removeChild(current.domNode);\n                }\n            }\n            else if (item.type === 'attach') {\n                const { instance, attached } = item;\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    instanceData.nodeHandler.addRoot();\n                    attached && instanceData.onAttach();\n                }\n            }\n            else if (item.type === 'detach') {\n                if (item.current.instance) {\n                    const instanceData = widgetInstanceMap.get(item.current.instance);\n                    instanceData && instanceData.onDetach();\n                }\n                item.current.instance = undefined;\n            }\n        }\n        if (_deferredProcessQueue.length === 0) {\n            _nodeToWrapperMap = new WeakMap();\n        }\n    }\n    function _processMergeNodes(next, mergeNodes) {\n        const { merge } = _mountOptions;\n        if (merge && mergeNodes.length) {\n            if (isVNodeWrapper(next)) {\n                let { node: { tag } } = next;\n                for (let i = 0; i < mergeNodes.length; i++) {\n                    const domElement = mergeNodes[i];\n                    const tagName = domElement.tagName || '';\n                    if (tag.toUpperCase() === tagName.toUpperCase()) {\n                        const mergeNodeIndex = _allMergedNodes.indexOf(domElement);\n                        if (mergeNodeIndex !== -1) {\n                            _allMergedNodes.splice(mergeNodeIndex, 1);\n                        }\n                        mergeNodes.splice(i, 1);\n                        next.domNode = domElement;\n                        break;\n                    }\n                }\n            }\n            else {\n                next.mergeNodes = mergeNodes;\n            }\n        }\n    }\n    function distinguishableCheck(childNodes, index) {\n        const parentWNodeWrapper = getWNodeWrapper(childNodes[index].owningId);\n        checkDistinguishable(childNodes, index, parentWNodeWrapper);\n    }\n    function createKeyMap(wrappers) {\n        const keys = [];\n        for (let i = 0; i < wrappers.length; i++) {\n            const wrapper = wrappers[i];\n            if (wrapper.node.properties.key != null) {\n                keys.push(wrapper.node.properties.key);\n            }\n            else {\n                return false;\n            }\n        }\n        return keys;\n    }\n    function _process(current, next, meta = {}) {\n        let { mergeNodes = [], oldIndex = 0, newIndex = 0 } = meta;\n        const currentLength = current.length;\n        const nextLength = next.length;\n        const hasPreviousSiblings = currentLength > 1 || (currentLength > 0 && currentLength < nextLength);\n        let instructions = [];\n        let replace = false;\n        if (oldIndex === 0 && newIndex === 0 && currentLength) {\n            const currentKeys = createKeyMap(current);\n            if (currentKeys) {\n                const nextKeys = createKeyMap(next);\n                if (nextKeys) {\n                    for (let i = 0; i < currentKeys.length; i++) {\n                        if (nextKeys.indexOf(currentKeys[i]) !== -1) {\n                            instructions = [];\n                            replace = false;\n                            break;\n                        }\n                        replace = true;\n                        instructions.push({ current: current[i], next: undefined });\n                    }\n                }\n            }\n        }\n        if (replace || (currentLength === 0 && !_mountOptions.merge)) {\n            for (let i = 0; i < next.length; i++) {\n                instructions.push({ current: undefined, next: next[i] });\n            }\n        }\n        else {\n            if (newIndex < nextLength) {\n                let currentWrapper = oldIndex < currentLength ? current[oldIndex] : undefined;\n                const nextWrapper = next[newIndex];\n                nextWrapper.hasPreviousSiblings = hasPreviousSiblings;\n                _processMergeNodes(nextWrapper, mergeNodes);\n                if (currentWrapper && same(currentWrapper, nextWrapper)) {\n                    oldIndex++;\n                    newIndex++;\n                    if (isVNodeWrapper(currentWrapper) && isVNodeWrapper(nextWrapper)) {\n                        nextWrapper.inserted = currentWrapper.inserted;\n                    }\n                    instructions.push({ current: currentWrapper, next: nextWrapper });\n                }\n                else if (!currentWrapper || findIndexOfChild(current, nextWrapper, oldIndex + 1) === -1) {\n                    has('dojo-debug') && current.length && distinguishableCheck(next, newIndex);\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    newIndex++;\n                }\n                else if (findIndexOfChild(next, currentWrapper, newIndex + 1) === -1) {\n                    has('dojo-debug') && distinguishableCheck(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    oldIndex++;\n                }\n                else {\n                    has('dojo-debug') && distinguishableCheck(next, newIndex);\n                    has('dojo-debug') && distinguishableCheck(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    oldIndex++;\n                    newIndex++;\n                }\n            }\n            if (newIndex < nextLength) {\n                _processQueue.push({ current, next, meta: { mergeNodes, oldIndex, newIndex } });\n            }\n            if (currentLength > oldIndex && newIndex >= nextLength) {\n                for (let i = oldIndex; i < currentLength; i++) {\n                    has('dojo-debug') && distinguishableCheck(current, i);\n                    instructions.push({ current: current[i], next: undefined });\n                }\n            }\n        }\n        for (let i = 0; i < instructions.length; i++) {\n            const result = _processOne(instructions[i]);\n            if (result === false) {\n                if (_mountOptions.merge && mergeNodes.length) {\n                    if (newIndex < nextLength) {\n                        _processQueue.pop();\n                    }\n                    _processQueue.push({ next, current, meta });\n                    _deferredProcessQueue = _processQueue;\n                    _processQueue = [];\n                    break;\n                }\n                continue;\n            }\n            const { widget, item, dom } = result;\n            widget && _processQueue.push(widget);\n            item && _processQueue.push(item);\n            dom && _applicationQueue.push(dom);\n        }\n    }\n    function _processOne({ current, next }) {\n        if (current !== next) {\n            if (!current && next) {\n                if (isVNodeWrapper(next)) {\n                    return _createDom({ next });\n                }\n                else {\n                    return _createWidget({ next });\n                }\n            }\n            else if (current && next) {\n                if (isVNodeWrapper(current) && isVNodeWrapper(next)) {\n                    return _updateDom({ current, next });\n                }\n                else if (isWNodeWrapper(current) && isWNodeWrapper(next)) {\n                    return _updateWidget({ current, next });\n                }\n            }\n            else if (current && !next) {\n                if (isVNodeWrapper(current)) {\n                    return _removeDom({ current });\n                }\n                else if (isWNodeWrapper(current)) {\n                    return _removeWidget({ current });\n                }\n            }\n        }\n        return {};\n    }\n    function createWidgetOptions(id, widgetId, middleware) {\n        return {\n            id,\n            properties: () => {\n                const widgetMeta = widgetMetaMap.get(widgetId);\n                if (widgetMeta) {\n                    widgetMeta.propertiesCalled = true;\n                    return Object.assign({}, widgetMeta.properties);\n                }\n                return {};\n            },\n            children: () => {\n                const widgetMeta = widgetMetaMap.get(widgetId);\n                if (widgetMeta) {\n                    return widgetMeta.children;\n                }\n                return [];\n            },\n            middleware\n        };\n    }\n    function resolveMiddleware(middlewares, id, middlewareIds = []) {\n        const keys = Object.keys(middlewares);\n        const results = {};\n        const uniqueId = `${id}-${metaId++}`;\n        for (let i = 0; i < keys.length; i++) {\n            const middleware = middlewares[keys[i]]();\n            const payload = createWidgetOptions(uniqueId, id);\n            if (middleware.middlewares) {\n                const { middlewares: resolvedMiddleware } = resolveMiddleware(middleware.middlewares, id, middlewareIds);\n                payload.middleware = resolvedMiddleware;\n                results[keys[i]] = middleware.callback(payload);\n            }\n            else {\n                results[keys[i]] = middleware.callback(payload);\n            }\n        }\n        middlewareIds.push(uniqueId);\n        return { middlewares: results, ids: middlewareIds };\n    }\n    function _createWidget({ next }) {\n        let { node: { widgetConstructor } } = next;\n        let { registry } = _mountOptions;\n        let Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            resolveRegistryItem(next);\n            if (!next.registryItem) {\n                return false;\n            }\n            Constructor = next.registryItem;\n        }\n        let rendered;\n        let invalidate;\n        next.properties = Object.assign({}, next.node.properties);\n        next.id = next.id || `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        const { id, depth, order } = next;\n        if (!isWidgetBaseConstructor(Constructor)) {\n            let widgetMeta = widgetMetaMap.get(id);\n            if (!widgetMeta) {\n                invalidate = () => {\n                    const widgetMeta = widgetMetaMap.get(id);\n                    if (widgetMeta) {\n                        widgetMeta.dirty = true;\n                        if (!widgetMeta.rendering && _idToWrapperMap.has(id)) {\n                            _invalidationQueue.push({ id, depth, order });\n                            _schedule();\n                        }\n                    }\n                };\n                widgetMeta = {\n                    widgetName: Constructor.name || 'unknown',\n                    mountNode: _mountOptions.domNode,\n                    dirty: false,\n                    invalidator: invalidate,\n                    properties: wrapFunctionProperties(id, next.node.properties),\n                    originalProperties: Object.assign({}, next.node.properties),\n                    children: next.node.children,\n                    deferRefs: 0,\n                    rendering: true,\n                    middleware: {},\n                    middlewareIds: [],\n                    registry: _mountOptions.registry,\n                    propertiesCalled: false\n                };\n                widgetMetaMap.set(next.id, widgetMeta);\n                if (Constructor.middlewares && Object.keys(Constructor.middlewares).length) {\n                    const { middlewares, ids } = resolveMiddleware(Constructor.middlewares, id);\n                    widgetMeta.middleware = middlewares;\n                    widgetMeta.middlewareIds = ids;\n                }\n            }\n            else {\n                invalidate = widgetMeta.invalidator;\n            }\n            rendered = Constructor(createWidgetOptions(id, id, widgetMeta.middleware));\n            widgetMeta.rendering = false;\n            widgetMeta.propertiesCalled = false;\n            if (widgetMeta.deferRefs > 0) {\n                return false;\n            }\n        }\n        else {\n            let instance = new Constructor();\n            instance.registry.base = registry;\n            const instanceData = widgetInstanceMap.get(instance);\n            invalidate = () => {\n                instanceData.dirty = true;\n                if (!instanceData.rendering && _idToWrapperMap.has(id)) {\n                    _invalidationQueue.push({ id, depth, order });\n                    _schedule();\n                }\n            };\n            instanceData.invalidate = invalidate;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            next.instance = instance;\n            rendered = instance.__render__();\n            instanceData.rendering = false;\n        }\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, null);\n            _idToChildrenWrappers.set(id, children);\n        }\n        if (!parentInvalidate && !Constructor.isWNodeWrapper) {\n            parentInvalidate = invalidate;\n        }\n        return {\n            item: {\n                next: children,\n                meta: { mergeNodes: next.mergeNodes }\n            },\n            widget: { type: 'attach', instance: next.instance, id, attached: true }\n        };\n    }\n    function _updateWidget({ current, next }) {\n        current = getWNodeWrapper(current.id) || current;\n        const { instance, domNode, hasAnimations, id } = current;\n        let { node: { widgetConstructor } } = next;\n        const Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            return {};\n        }\n        let rendered;\n        let processResult = {};\n        let didRender = false;\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        next.hasAnimations = hasAnimations;\n        next.id = id;\n        next.properties = Object.assign({}, next.node.properties);\n        _wrapperSiblingMap.delete(current);\n        if (domNode && domNode.parentNode) {\n            next.domNode = domNode;\n        }\n        if (!isWidgetBaseConstructor(Constructor)) {\n            const widgetMeta = widgetMetaMap.get(id);\n            if (widgetMeta) {\n                widgetMeta.originalProperties = Object.assign({}, next.properties);\n                widgetMeta.properties = wrapFunctionProperties(id, widgetMeta.originalProperties);\n                widgetMeta.children = next.node.children;\n                widgetMeta.rendering = true;\n                const customProperties = runDiffs(widgetMeta, current.properties, widgetMeta.originalProperties);\n                widgetMeta.properties = Object.assign({}, widgetMeta.properties, customProperties);\n                if (current.node.children.length > 0 || next.node.children.length > 0) {\n                    widgetMeta.dirty = true;\n                }\n                if (!widgetMeta.dirty) {\n                    propertiesDiff(current.properties, next.properties, () => {\n                        widgetMeta.dirty = true;\n                    }, widgetMeta.customDiffProperties ? [...widgetMeta.customDiffProperties.values()] : []);\n                }\n                if (widgetMeta.dirty) {\n                    _idToChildrenWrappers.delete(id);\n                    didRender = true;\n                    rendered = Constructor(createWidgetOptions(id, id, widgetMeta.middleware));\n                    widgetMeta.dirty = false;\n                    if (widgetMeta.deferRefs > 0) {\n                        rendered = null;\n                    }\n                }\n                widgetMeta.rendering = false;\n                widgetMeta.propertiesCalled = false;\n            }\n        }\n        else {\n            const instanceData = widgetInstanceMap.get(instance);\n            next.instance = instance;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            if (instanceData.dirty) {\n                didRender = true;\n                _idToChildrenWrappers.delete(id);\n                rendered = instance.__render__();\n            }\n            instanceData.rendering = false;\n        }\n        _idToWrapperMap.set(next.id, next);\n        processResult.widget = { type: 'attach', instance, id, attached: false };\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, current);\n            _idToChildrenWrappers.set(id, children);\n        }\n        if (didRender) {\n            processResult.item = {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            };\n        }\n        return processResult;\n    }\n    function _removeWidget({ current }) {\n        current = getWNodeWrapper(current.id) || current;\n        _idToWrapperMap.delete(current.id);\n        const meta = widgetMetaMap.get(current.id);\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        let processResult = {\n            item: {\n                current: currentChildren,\n                meta: {}\n            }\n        };\n        if (meta) {\n            meta.registryHandler && meta.registryHandler.destroy();\n            destroyHandles(meta);\n            widgetMetaMap.delete(current.id);\n        }\n        else {\n            processResult.widget = { type: 'detach', current, instance: current.instance };\n        }\n        return processResult;\n    }\n    function findDomNodeOnParentWrapper(id) {\n        const children = _idToChildrenWrappers.get(id) || [];\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            if (child.domNode) {\n                return child.id;\n            }\n            const childId = findDomNodeOnParentWrapper(child.id);\n            if (childId) {\n                return childId;\n            }\n        }\n    }\n    function _createDom({ next }) {\n        const parentDomNode = findParentDomNode(next);\n        const isVirtual = isVirtualWrapper(next);\n        const isBody = isBodyWrapper(next);\n        const isHead = isHeadWrapper(next);\n        let mergeNodes = [];\n        next.id = `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        if (!next.domNode) {\n            if (next.node.domNode) {\n                next.domNode = next.node.domNode;\n            }\n            else {\n                if (next.node.tag === 'svg') {\n                    next.namespace = NAMESPACE_SVG;\n                }\n                if (isBody) {\n                    next.domNode = global.document.body;\n                }\n                else if (isHead) {\n                    next.domNode = global.document.head;\n                }\n                else if (next.node.tag && !isVirtual) {\n                    if (next.namespace) {\n                        next.domNode = global.document.createElementNS(next.namespace, next.node.tag);\n                    }\n                    else {\n                        next.domNode = global.document.createElement(next.node.tag);\n                    }\n                }\n                else if (next.node.text != null) {\n                    next.domNode = global.document.createTextNode(next.node.text);\n                }\n            }\n            if (_insertBeforeMap && _allMergedNodes.length) {\n                if (parentDomNode === _allMergedNodes[0].parentNode) {\n                    _insertBeforeMap.set(next, _allMergedNodes[0]);\n                }\n            }\n        }\n        else if (_mountOptions.merge) {\n            next.merged = true;\n            if (isTextNode(next.domNode)) {\n                if (next.domNode.data !== next.node.text) {\n                    _allMergedNodes = [next.domNode, ..._allMergedNodes];\n                    next.domNode = global.document.createTextNode(next.node.text);\n                    next.merged = false;\n                }\n            }\n            else {\n                mergeNodes = arrayFrom(next.domNode.childNodes);\n                _allMergedNodes = [..._allMergedNodes, ...mergeNodes];\n            }\n        }\n        let children;\n        if (next.domNode || isVirtual) {\n            if (next.node.children && next.node.children.length) {\n                children = renderedToWrapper(next.node.children, next, null);\n                _idToChildrenWrappers.set(next.id, children);\n            }\n        }\n        const dom = isSpecialWrapper(next)\n            ? undefined\n            : {\n                next: next,\n                parentDomNode: parentDomNode,\n                type: 'create'\n            };\n        if (children) {\n            return {\n                item: {\n                    current: [],\n                    next: children,\n                    meta: { mergeNodes }\n                },\n                dom,\n                widget: isVirtual ? { type: 'attach', id: next.id, attached: false } : undefined\n            };\n        }\n        return { dom };\n    }\n    function _updateDom({ current, next }) {\n        next.domNode = current.domNode;\n        next.namespace = current.namespace;\n        next.id = current.id;\n        next.childDomWrapperId = current.childDomWrapperId;\n        let children;\n        let currentChildren = _idToChildrenWrappers.get(next.id);\n        if (next.node.text != null && next.node.text !== current.node.text) {\n            next.domNode = global.document.createTextNode(next.node.text);\n        }\n        else if (next.node.children) {\n            children = renderedToWrapper(next.node.children, next, current);\n            _idToChildrenWrappers.set(next.id, children);\n        }\n        _wrapperSiblingMap.delete(current);\n        _idToWrapperMap.set(next.id, next);\n        return {\n            item: {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            },\n            dom: { type: 'update', next, current }\n        };\n    }\n    function _removeDom({ current }) {\n        const isSpecial = isSpecialWrapper(current);\n        const children = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _idToWrapperMap.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        if (current.node.properties.key) {\n            const widgetMeta = widgetMetaMap.get(current.owningId);\n            const parentWrapper = getWNodeWrapper(current.owningId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap && widgetMeta.nodeMap.delete(current.node.properties.key);\n            }\n            else if (parentWrapper && parentWrapper.instance) {\n                const instanceData = widgetInstanceMap.get(parentWrapper.instance);\n                instanceData && instanceData.nodeHandler.remove(current.node.properties.key);\n            }\n        }\n        if (current.hasAnimations || isSpecial) {\n            return {\n                item: { current: children, meta: {} },\n                dom: isSpecial ? undefined : { type: 'delete', current }\n            };\n        }\n        if (children) {\n            _deferredRenderCallbacks.push(() => {\n                let wrappers = children || [];\n                let wrapper;\n                let specialIds = [];\n                while ((wrapper = wrappers.pop())) {\n                    if (isWNodeWrapper(wrapper)) {\n                        wrapper = getWNodeWrapper(wrapper.id) || wrapper;\n                        if (wrapper.instance) {\n                            const instanceData = widgetInstanceMap.get(wrapper.instance);\n                            instanceData && instanceData.onDetach();\n                            wrapper.instance = undefined;\n                        }\n                        else {\n                            const meta = widgetMetaMap.get(wrapper.id);\n                            if (meta) {\n                                meta.registryHandler && meta.registryHandler.destroy();\n                                destroyHandles(meta);\n                                widgetMetaMap.delete(wrapper.id);\n                            }\n                        }\n                    }\n                    let wrapperChildren = _idToChildrenWrappers.get(wrapper.id);\n                    if (wrapperChildren) {\n                        wrappers.push(...wrapperChildren);\n                    }\n                    if (isBodyWrapper(wrapper) || isHeadWrapper(wrapper)) {\n                        specialIds.push(wrapper.id);\n                    }\n                    else if (specialIds.indexOf(wrapper.parentId) !== -1) {\n                        if (isWNodeWrapper(wrapper) || isVirtualWrapper(wrapper)) {\n                            specialIds.push(wrapper.id);\n                        }\n                        else if (wrapper.domNode && wrapper.domNode.parentNode) {\n                            wrapper.domNode.parentNode.removeChild(wrapper.domNode);\n                        }\n                    }\n                    _idToChildrenWrappers.delete(wrapper.id);\n                    _idToWrapperMap.delete(wrapper.id);\n                }\n            });\n        }\n        return {\n            dom: { type: 'delete', current }\n        };\n    }\n    return {\n        mount,\n        unmount,\n        invalidate\n    };\n}\nexport default renderer;\n//# sourceMappingURL=vdom.mjs.map","var _a;\nimport global from './global';\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Set = global.Set;\nif (!true) {\n    Set = global.Set = (_a = class Set {\n            constructor(iterable) {\n                this._setData = [];\n                this[Symbol.toStringTag] = 'Set';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            this.add(iterable[i]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.add(value);\n                        }\n                    }\n                }\n            }\n            add(value) {\n                if (this.has(value)) {\n                    return this;\n                }\n                this._setData.push(value);\n                return this;\n            }\n            clear() {\n                this._setData.length = 0;\n            }\n            delete(value) {\n                const idx = this._setData.indexOf(value);\n                if (idx === -1) {\n                    return false;\n                }\n                this._setData.splice(idx, 1);\n                return true;\n            }\n            entries() {\n                return new ShimIterator(this._setData.map((value) => [value, value]));\n            }\n            forEach(callbackfn, thisArg) {\n                const iterator = this.values();\n                let result = iterator.next();\n                while (!result.done) {\n                    callbackfn.call(thisArg, result.value, result.value, this);\n                    result = iterator.next();\n                }\n            }\n            has(value) {\n                return this._setData.indexOf(value) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._setData);\n            }\n            get size() {\n                return this._setData.length;\n            }\n            values() {\n                return new ShimIterator(this._setData);\n            }\n            [Symbol.iterator]() {\n                return new ShimIterator(this._setData);\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Set;","import { create, tsx } from '@dojo/framework/core/vdom';\nimport focus from '@dojo/framework/core/middleware/focus';\nimport { RenderResult } from '@dojo/framework/core/interfaces';\nimport Popup from '../popup';\nimport { createICacheMiddleware } from '@dojo/framework/core/middleware/icache';\n\nimport * as css from '../theme/default/context-popup.m.css';\n\nexport interface ContextPopupProperties {\n\tonClose?(): void;\n\tonOpen?(): void;\n}\n\nexport interface ContextPopupChildren {\n\ttrigger: RenderResult;\n\tcontent: (callbacks: { close(): void; shouldFocus(): boolean }) => RenderResult;\n}\n\ninterface ContextIcache {\n\tx: number;\n\ty: number;\n\topen: boolean;\n}\n\nconst icache = createICacheMiddleware<ContextIcache>();\n\nconst factory = create({ icache, focus })\n\t.properties<ContextPopupProperties>()\n\t.children<ContextPopupChildren>();\n\nconst CursorWidth = 2;\nconst CursorHeight = 4;\n\nexport const ContextPopup = factory(function({\n\tproperties,\n\tchildren,\n\tmiddleware: { icache, focus }\n}) {\n\tconst x = icache.getOrSet('x', 0);\n\tconst y = icache.getOrSet('y', 0);\n\n\tconst { trigger, content } = children()[0];\n\tconst close = () => {\n\t\tconst { onClose } = properties();\n\t\ticache.set('open', false);\n\t\tonClose && onClose();\n\t};\n\n\treturn (\n\t\t<virtual>\n\t\t\t<div\n\t\t\t\tclasses={css.trigger}\n\t\t\t\tkey=\"trigger\"\n\t\t\t\toncontextmenu={(event: MouseEvent) => {\n\t\t\t\t\tconst { onOpen } = properties();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tfocus.focus();\n\t\t\t\t\ticache.set('x', event.pageX - CursorWidth);\n\t\t\t\t\ticache.set('y', event.pageY - CursorHeight);\n\t\t\t\t\ticache.set('open', true);\n\t\t\t\t\tonOpen && onOpen();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t<Popup\n\t\t\t\tkey=\"popup\"\n\t\t\t\tx={x}\n\t\t\t\tyTop={y}\n\t\t\t\tyBottom={document.documentElement.scrollTop + document.documentElement.clientHeight}\n\t\t\t\tonClose={close}\n\t\t\t\tposition=\"below\"\n\t\t\t\topen={icache.get('open')}\n\t\t\t>\n\t\t\t\t<div>{content({ close, shouldFocus: focus.shouldFocus })}</div>\n\t\t\t</Popup>\n\t\t</virtual>\n\t);\n});\n\nexport default ContextPopup;\n","/* tslint:disable:interface-name */\nimport Map from '../../shim/Map';\nimport { create, invalidator, destroy } from '../vdom';\nconst factory = create({ invalidator, destroy });\nexport function createICacheMiddleware() {\n    const icache = factory(({ middleware: { invalidator, destroy } }) => {\n        const cacheMap = new Map();\n        destroy(() => {\n            cacheMap.clear();\n        });\n        const api = {\n            get: (key) => {\n                const cachedValue = cacheMap.get(key);\n                if (!cachedValue || cachedValue.status === 'pending') {\n                    return undefined;\n                }\n                return cachedValue.value;\n            }\n        };\n        api.set = (key, value, invalidate = true) => {\n            const current = api.get(key);\n            if (typeof value === 'function') {\n                value = value(current);\n                if (value && typeof value.then === 'function') {\n                    cacheMap.set(key, {\n                        status: 'pending',\n                        value\n                    });\n                    value.then((result) => {\n                        const cachedValue = cacheMap.get(key);\n                        if (cachedValue && cachedValue.value === value) {\n                            cacheMap.set(key, {\n                                status: 'resolved',\n                                value: result\n                            });\n                            invalidate && invalidator();\n                        }\n                    });\n                    return undefined;\n                }\n            }\n            cacheMap.set(key, {\n                status: 'resolved',\n                value\n            });\n            invalidate && invalidator();\n            return value;\n        };\n        api.has = (key) => {\n            return cacheMap.has(key);\n        };\n        api.delete = (key, invalidate = true) => {\n            cacheMap.delete(key);\n            invalidate && invalidator();\n        };\n        api.clear = (invalidate = true) => {\n            cacheMap.clear();\n            invalidate && invalidator();\n        };\n        api.getOrSet = (key, value, invalidate = true) => {\n            let cachedValue = cacheMap.get(key);\n            if (!cachedValue) {\n                api.set(key, value, invalidate);\n            }\n            cachedValue = cacheMap.get(key);\n            if (!cachedValue || cachedValue.status === 'pending') {\n                return undefined;\n            }\n            return cachedValue.value;\n        };\n        return api;\n    });\n    return icache;\n}\nexport const icache = createICacheMiddleware();\nexport default icache;\n//# sourceMappingURL=icache.mjs.map","import { WIDGET_BASE_TYPE } from './Registry';\nfunction isObjectOrArray(value) {\n    return Object.prototype.toString.call(value) === '[object Object]' || Array.isArray(value);\n}\nexport function always(previousProperty, newProperty) {\n    return {\n        changed: true,\n        value: newProperty\n    };\n}\nexport function ignore(previousProperty, newProperty) {\n    return {\n        changed: false,\n        value: newProperty\n    };\n}\nexport function reference(previousProperty, newProperty) {\n    return {\n        changed: previousProperty !== newProperty,\n        value: newProperty\n    };\n}\nexport function shallow(previousProperty, newProperty, depth = 0) {\n    let changed = false;\n    const validOldProperty = previousProperty && isObjectOrArray(previousProperty);\n    const validNewProperty = newProperty && isObjectOrArray(newProperty);\n    if (!validOldProperty || !validNewProperty) {\n        return {\n            changed: true,\n            value: newProperty\n        };\n    }\n    const previousKeys = Object.keys(previousProperty);\n    const newKeys = Object.keys(newProperty);\n    if (previousKeys.length !== newKeys.length) {\n        changed = true;\n    }\n    else {\n        changed = newKeys.some((key) => {\n            if (depth > 0) {\n                return auto(newProperty[key], previousProperty[key], depth - 1).changed;\n            }\n            return newProperty[key] !== previousProperty[key];\n        });\n    }\n    return {\n        changed,\n        value: newProperty\n    };\n}\nexport function auto(previousProperty, newProperty, depth = 0) {\n    let result;\n    if (typeof newProperty === 'function') {\n        if (newProperty._type === WIDGET_BASE_TYPE) {\n            result = reference(previousProperty, newProperty);\n        }\n        else {\n            result = ignore(previousProperty, newProperty);\n        }\n    }\n    else if (isObjectOrArray(newProperty)) {\n        result = shallow(previousProperty, newProperty, depth);\n    }\n    else {\n        result = reference(previousProperty, newProperty);\n    }\n    return result;\n}\n//# sourceMappingURL=diff.mjs.map","var isArrayLike = undefined, isIterable = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\nimport { wrapNative } from './support/util';\nexport let from;\nexport let of;\nexport let copyWithin;\nexport let fill;\nexport let find;\nexport let findIndex;\nexport let includes;\nexport let flat;\nexport let flatMap;\nlet toLength;\nlet toInteger;\nlet normalizeOffset;\nif (!true || !true || !true) {\n    const MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n    /**\n     * Ensures a non-negative, non-infinite, safe integer.\n     *\n     * @param length The number to validate\n     * @return A proper length\n     */\n    toLength = function toLength(length) {\n        if (isNaN(length)) {\n            return 0;\n        }\n        length = Number(length);\n        if (isFinite(length)) {\n            length = Math.floor(length);\n        }\n        // Ensure a non-negative, real, safe integer\n        return Math.min(Math.max(length, 0), MAX_SAFE_INTEGER);\n    };\n    /**\n     * From ES6 7.1.4 ToInteger()\n     *\n     * @param value A value to convert\n     * @return An integer\n     */\n    toInteger = function toInteger(value) {\n        value = Number(value);\n        if (isNaN(value)) {\n            return 0;\n        }\n        if (value === 0 || !isFinite(value)) {\n            return value;\n        }\n        return (value > 0 ? 1 : -1) * Math.floor(Math.abs(value));\n    };\n    /**\n     * Normalizes an offset against a given length, wrapping it if negative.\n     *\n     * @param value The original offset\n     * @param length The total length to normalize against\n     * @return If negative, provide a distance from the end (length); otherwise provide a distance from 0\n     */\n    normalizeOffset = function normalizeOffset(value, length) {\n        return value < 0 ? Math.max(length + value, 0) : Math.min(value, length);\n    };\n}\nif (!true) {\n    Array.from = function from(arrayLike, mapFunction, thisArg) {\n        if (arrayLike == null) {\n            throw new TypeError('from: requires an array-like object');\n        }\n        if (mapFunction && thisArg) {\n            mapFunction = mapFunction.bind(thisArg);\n        }\n        /* tslint:disable-next-line:variable-name */\n        const Constructor = this;\n        const length = toLength(arrayLike.length);\n        // Support extension\n        const array = typeof Constructor === 'function' ? Object(new Constructor(length)) : new Array(length);\n        if (!isArrayLike(arrayLike) && !isIterable(arrayLike)) {\n            return array;\n        }\n        // if this is an array and the normalized length is 0, just return an empty array. this prevents a problem\n        // with the iteration on IE when using a NaN array length.\n        if (isArrayLike(arrayLike)) {\n            if (length === 0) {\n                return [];\n            }\n            for (let i = 0; i < arrayLike.length; i++) {\n                array[i] = mapFunction ? mapFunction(arrayLike[i], i) : arrayLike[i];\n            }\n        }\n        else {\n            let i = 0;\n            for (const value of arrayLike) {\n                array[i] = mapFunction ? mapFunction(value, i) : value;\n                i++;\n            }\n        }\n        if (arrayLike.length !== undefined) {\n            array.length = length;\n        }\n        return array;\n    };\n    Array.of = function of(...items) {\n        return Array.prototype.slice.call(items);\n    };\n    Array.prototype.copyWithin = function copyWithin(offset, start, end) {\n        if (this == null) {\n            throw new TypeError('copyWithin: target must be an array-like object');\n        }\n        const length = toLength(this.length);\n        offset = normalizeOffset(toInteger(offset), length);\n        start = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        let count = Math.min(end - start, length - offset);\n        let direction = 1;\n        if (offset > start && offset < start + count) {\n            direction = -1;\n            start += count - 1;\n            offset += count - 1;\n        }\n        while (count > 0) {\n            if (start in this) {\n                this[offset] = this[start];\n            }\n            else {\n                delete this[offset];\n            }\n            offset += direction;\n            start += direction;\n            count--;\n        }\n        return this;\n    };\n    Array.prototype.find = function find(callback, thisArg) {\n        const index = this.findIndex(callback, thisArg);\n        return index !== -1 ? this[index] : undefined;\n    };\n    Array.prototype.findIndex = function findIndex(callback, thisArg) {\n        const length = toLength(this.length);\n        if (!callback) {\n            throw new TypeError('find: second argument must be a function');\n        }\n        if (thisArg) {\n            callback = callback.bind(thisArg);\n        }\n        for (let i = 0; i < length; i++) {\n            if (callback(this[i], i, this)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\nif (!true) {\n    Array.prototype.fill = function fill(value, start, end) {\n        const length = toLength(this.length);\n        let i = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        while (i < (end || 0)) {\n            this[i++] = value;\n        }\n        return this;\n    };\n}\nif (!true) {\n    Array.prototype.includes = function includes(searchElement, fromIndex = 0) {\n        let len = toLength(this.length);\n        for (let i = fromIndex; i < len; ++i) {\n            const currentElement = this[i];\n            if (searchElement === currentElement ||\n                (searchElement !== searchElement && currentElement !== currentElement)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nif (!true) {\n    Array.prototype.flat = function flat(depth = 1) {\n        return depth > 0\n            ? this.reduce((acc, val) => acc.concat(Array.isArray(val) ? val.flat(depth - 1) : val), [])\n            : this.slice();\n    };\n    Array.prototype.flatMap = function flatMap(callback) {\n        return this.map(callback).flat();\n    };\n}\nfrom = Array.from;\nof = Array.of;\ncopyWithin = wrapNative(Array.prototype.copyWithin);\nfill = wrapNative(Array.prototype.fill);\nfind = wrapNative(Array.prototype.find);\nflat = wrapNative(Array.prototype.flat);\nflatMap = wrapNative(Array.prototype.flatMap);\nfindIndex = wrapNative(Array.prototype.findIndex);\nincludes = wrapNative(Array.prototype.includes);\nexport default Array;","import { Map } from '../shim/Map';\nimport { Evented } from '../core/Evented';\nimport { Registry } from './Registry';\nexport class RegistryHandler extends Evented {\n    constructor() {\n        super();\n        this._registry = new Registry();\n        this._registryWidgetLabelMap = new Map();\n        this._registryInjectorLabelMap = new Map();\n        this.own(this._registry);\n        const destroy = () => {\n            if (this.baseRegistry) {\n                this._registryWidgetLabelMap.delete(this.baseRegistry);\n                this._registryInjectorLabelMap.delete(this.baseRegistry);\n                this.baseRegistry = undefined;\n            }\n        };\n        this.own({ destroy });\n    }\n    set base(baseRegistry) {\n        if (this.baseRegistry) {\n            this._registryWidgetLabelMap.delete(this.baseRegistry);\n            this._registryInjectorLabelMap.delete(this.baseRegistry);\n        }\n        this.baseRegistry = baseRegistry;\n    }\n    get base() {\n        return this.baseRegistry;\n    }\n    define(label, widget) {\n        this._registry.define(label, widget);\n    }\n    defineInjector(label, injector) {\n        this._registry.defineInjector(label, injector);\n    }\n    has(label) {\n        return this._registry.has(label) || Boolean(this.baseRegistry && this.baseRegistry.has(label));\n    }\n    hasInjector(label) {\n        return this._registry.hasInjector(label) || Boolean(this.baseRegistry && this.baseRegistry.hasInjector(label));\n    }\n    get(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n    }\n    getInjector(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n    }\n    _get(label, globalPrecedence, getFunctionName, labelMap) {\n        const registries = globalPrecedence ? [this.baseRegistry, this._registry] : [this._registry, this.baseRegistry];\n        for (let i = 0; i < registries.length; i++) {\n            const registry = registries[i];\n            if (!registry) {\n                continue;\n            }\n            const item = registry[getFunctionName](label);\n            const registeredLabels = labelMap.get(registry) || [];\n            if (item) {\n                return item;\n            }\n            else if (registeredLabels.indexOf(label) === -1) {\n                const handle = registry.on(label, (event) => {\n                    if (event.action === 'loaded' &&\n                        this[getFunctionName](label, globalPrecedence) === event.item) {\n                        this.emit({ type: 'invalidate' });\n                    }\n                });\n                this.own(handle);\n                labelMap.set(registry, [...registeredLabels, label]);\n            }\n        }\n        return null;\n    }\n}\nexport default RegistryHandler;\n//# sourceMappingURL=RegistryHandler.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { create, invalidator, diffProperty, getRegistry } from '../vdom';\nimport icache from './icache';\nimport injector from './injector';\nimport Set from '../../shim/Set';\nimport { auto } from '../diff';\nimport { ThemeInjector, isThemeInjectorPayloadWithVariant, isThemeWithVariants, isThemeWithVariant } from '../ThemeInjector';\nexport const THEME_KEY = ' _key';\nexport const INJECTED_THEME_KEY = '__theme_injector';\nfunction registerThemeInjector(theme, themeRegistry) {\n    const themeInjector = new ThemeInjector(theme);\n    themeRegistry.defineInjector(INJECTED_THEME_KEY, (invalidator) => {\n        themeInjector.setInvalidator(invalidator);\n        return () => themeInjector;\n    });\n    return themeInjector;\n}\nconst factory = create({ invalidator, icache, diffProperty, injector, getRegistry }).properties();\nexport const theme = factory(({ middleware: { invalidator, icache, diffProperty, injector, getRegistry }, properties }) => {\n    let themeKeys = new Set();\n    diffProperty('theme', properties, (current, next) => {\n        const { changed } = auto(current.theme, next.theme, 3);\n        if (changed) {\n            icache.clear();\n            invalidator();\n        }\n    });\n    diffProperty('classes', (current, next) => {\n        let result = false;\n        if ((current.classes && !next.classes) || (!current.classes && next.classes)) {\n            result = true;\n        }\n        else if (current.classes && next.classes) {\n            const keys = [...themeKeys.values()];\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                result = auto(current.classes[key], next.classes[key], 2).changed;\n                if (result) {\n                    break;\n                }\n            }\n        }\n        if (result) {\n            icache.clear();\n            invalidator();\n        }\n    });\n    function getTheme() {\n        const { theme } = properties();\n        if (theme) {\n            return theme;\n        }\n        const themeInjector = injector.get(INJECTED_THEME_KEY);\n        if (themeInjector) {\n            const themePayload = themeInjector.get();\n            if (isThemeInjectorPayloadWithVariant(themePayload)) {\n                return { theme: themePayload.theme, variant: themePayload.variant };\n            }\n            else if (themePayload) {\n                return themePayload.theme;\n            }\n        }\n    }\n    const themeInjector = injector.get(INJECTED_THEME_KEY);\n    if (!themeInjector) {\n        const registry = getRegistry();\n        if (registry) {\n            registerThemeInjector(undefined, registry.base);\n        }\n    }\n    injector.subscribe(INJECTED_THEME_KEY, () => {\n        icache.clear();\n        invalidator();\n    });\n    function set(theme, variant) {\n        const currentTheme = injector.get(INJECTED_THEME_KEY);\n        if (currentTheme) {\n            if (isThemeWithVariants(theme)) {\n                currentTheme.set(theme, variant);\n            }\n            else {\n                currentTheme.set(theme);\n            }\n        }\n    }\n    return {\n        classes(css) {\n            const cachedTheme = icache.get(css);\n            if (cachedTheme) {\n                return cachedTheme;\n            }\n            const _a = THEME_KEY, key = css[_a], classes = __rest(css, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n            themeKeys.add(key);\n            let theme = classes;\n            let { classes: currentClasses } = properties();\n            let currentTheme = getTheme();\n            if (currentTheme && isThemeWithVariant(currentTheme)) {\n                currentTheme = isThemeWithVariants(currentTheme.theme)\n                    ? currentTheme.theme.theme\n                    : currentTheme.theme;\n            }\n            if (currentTheme && currentTheme[key]) {\n                theme = Object.assign({}, theme, currentTheme[key]);\n            }\n            if (currentClasses && currentClasses[key]) {\n                const classKeys = Object.keys(currentClasses[key]);\n                for (let i = 0; i < classKeys.length; i++) {\n                    const classKey = classKeys[i];\n                    if (theme[classKey]) {\n                        theme[classKey] = `${theme[classKey]} ${currentClasses[key][classKey].join(' ')}`;\n                    }\n                }\n            }\n            icache.set(css, theme, false);\n            return theme;\n        },\n        variant() {\n            const theme = getTheme();\n            if (theme && isThemeWithVariant(theme)) {\n                return theme.variant.value.root;\n            }\n        },\n        set,\n        get() {\n            const currentTheme = injector.get(INJECTED_THEME_KEY);\n            if (currentTheme) {\n                return currentTheme.get();\n            }\n        }\n    };\n});\nexport default theme;\n//# sourceMappingURL=theme.mjs.map","import { Evented } from '../core/Evented';\nexport class Injector extends Evented {\n    constructor(payload) {\n        super();\n        this._payload = payload;\n    }\n    setInvalidator(invalidator) {\n        this._invalidator = invalidator;\n    }\n    get() {\n        return this._payload;\n    }\n    set(payload) {\n        this._payload = payload;\n        if (this._invalidator) {\n            this._invalidator();\n        }\n    }\n}\nexport default Injector;\n//# sourceMappingURL=Injector.mjs.map","/*** IMPORTS FROM imports-loader ***/\nvar widgetFactory = require(\"src/context-popup\");\n\nvar registerCustomElement = require('@dojo/framework/core/registerCustomElement').default;\n\nvar defaultExport = widgetFactory.default;\ndefaultExport && registerCustomElement(defaultExport);\n\n","import { create, getRegistry, invalidator, destroy } from '../vdom';\nconst injectorFactory = create({ getRegistry, invalidator, destroy });\nexport const injector = injectorFactory(({ middleware: { getRegistry, invalidator, destroy } }) => {\n    const handles = [];\n    destroy(() => {\n        let handle;\n        while ((handle = handles.pop())) {\n            handle.destroy();\n        }\n    });\n    const registry = getRegistry();\n    return {\n        subscribe(label, callback = invalidator) {\n            if (registry) {\n                const item = registry.getInjector(label);\n                if (item) {\n                    const handle = item.invalidator.on('invalidate', () => {\n                        callback();\n                    });\n                    handles.push(handle);\n                    return () => {\n                        const index = handles.indexOf(handle);\n                        if (index !== -1) {\n                            handles.splice(index, 1);\n                            handle.destroy();\n                        }\n                    };\n                }\n            }\n        },\n        get(label) {\n            if (registry) {\n                const item = registry.getInjector(label);\n                if (item) {\n                    return item.injector();\n                }\n            }\n            return null;\n        }\n    };\n});\nexport default injector;\n//# sourceMappingURL=injector.mjs.map","var _a;\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport global from './global';\nimport { is as objectIs } from './object';\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Map = global.Map;\nif (!true) {\n    Map = global.Map = (_a = class Map {\n            constructor(iterable) {\n                this._keys = [];\n                this._values = [];\n                this[Symbol.toStringTag] = 'Map';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            const value = iterable[i];\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                }\n            }\n            /**\n             * An alternative to Array.prototype.indexOf using Object.is\n             * to check for equality. See http://mzl.la/1zuKO2V\n             */\n            _indexOfKey(keys, key) {\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    if (objectIs(keys[i], key)) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n            get size() {\n                return this._keys.length;\n            }\n            clear() {\n                this._keys.length = this._values.length = 0;\n            }\n            delete(key) {\n                const index = this._indexOfKey(this._keys, key);\n                if (index < 0) {\n                    return false;\n                }\n                this._keys.splice(index, 1);\n                this._values.splice(index, 1);\n                return true;\n            }\n            entries() {\n                const values = this._keys.map((key, i) => {\n                    return [key, this._values[i]];\n                });\n                return new ShimIterator(values);\n            }\n            forEach(callback, context) {\n                const keys = this._keys;\n                const values = this._values;\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    callback.call(context, values[i], keys[i], this);\n                }\n            }\n            get(key) {\n                const index = this._indexOfKey(this._keys, key);\n                return index < 0 ? undefined : this._values[index];\n            }\n            has(key) {\n                return this._indexOfKey(this._keys, key) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._keys);\n            }\n            set(key, value) {\n                let index = this._indexOfKey(this._keys, key);\n                index = index < 0 ? this._keys.length : index;\n                this._keys[index] = key;\n                this._values[index] = value;\n                return this;\n            }\n            values() {\n                return new ShimIterator(this._values);\n            }\n            [Symbol.iterator]() {\n                return this.entries();\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Map;","import Promise from '../shim/Promise';\n/**\n * No op function used to replace a Destroyable instance's `destroy` method, once the instance has been destroyed\n */\nfunction noop() {\n    return Promise.resolve(false);\n}\n/**\n * No op function used to replace a Destroyable instance's `own` method, once the instance has been destroyed\n */\nfunction destroyed() {\n    throw new Error('Call made to destroyed method');\n}\nexport class Destroyable {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.handles = [];\n    }\n    /**\n     * Register handles for the instance that will be destroyed when `this.destroy` is called\n     *\n     * @param {Handle} handle The handle to add for the instance\n     * @returns {Handle} A wrapper Handle. When the wrapper Handle's `destroy` method is invoked, the original handle is\n     *                   removed from the instance, and its `destroy` method is invoked.\n     */\n    own(handle) {\n        const { handles: _handles } = this;\n        _handles.push(handle);\n        return {\n            destroy() {\n                _handles.splice(_handles.indexOf(handle));\n                handle.destroy();\n            }\n        };\n    }\n    /**\n     * Destroys all handlers registered for the instance\n     *\n     * @returns {Promise<any} A Promise that resolves once all handles have been destroyed\n     */\n    destroy() {\n        return new Promise((resolve) => {\n            this.handles.forEach((handle) => {\n                handle && handle.destroy && handle.destroy();\n            });\n            this.destroy = noop;\n            this.own = destroyed;\n            resolve(true);\n        });\n    }\n}\nexport default Destroyable;\n//# sourceMappingURL=Destroyable.mjs.map","import global from '../../shim/global';\nimport { create, diffProperty, node, destroy, invalidator } from '../vdom';\nimport { createICacheMiddleware } from './icache';\nconst icache = createICacheMiddleware();\nconst factory = create({ icache, diffProperty, node, destroy, invalidator }).properties();\nexport const focus = factory(({ middleware: { icache, diffProperty, node, destroy, invalidator } }) => {\n    let initialized = false;\n    let currentElement;\n    let previous = 0;\n    const nodeSet = new Set();\n    diffProperty('focus', (_, next) => {\n        const result = next.focus && next.focus();\n        if (result) {\n            const current = icache.getOrSet('current', 0);\n            icache.set('current', current + 1);\n        }\n    });\n    function onFocusChange() {\n        const activeElement = global.document.activeElement;\n        if ((nodeSet.has(currentElement) || nodeSet.has(activeElement)) && currentElement !== activeElement) {\n            invalidator();\n        }\n        currentElement = activeElement;\n    }\n    destroy(() => {\n        global.document.removeEventListener('focusin', onFocusChange);\n        global.document.removeEventListener('focusout', onFocusChange);\n        nodeSet.clear();\n    });\n    return {\n        shouldFocus() {\n            const current = icache.get('current') || 0;\n            const shouldFocus = current !== previous;\n            previous = current;\n            return shouldFocus;\n        },\n        focus() {\n            const current = icache.getOrSet('current', 0);\n            icache.set('current', current + 1);\n        },\n        isFocused(key) {\n            const domNode = node.get(key);\n            if (!domNode) {\n                return false;\n            }\n            nodeSet.add(domNode);\n            if (!initialized) {\n                global.document.addEventListener('focusin', onFocusChange);\n                global.document.addEventListener('focusout', onFocusChange);\n                initialized = true;\n            }\n            return global.document.activeElement === domNode;\n        }\n    };\n});\nexport default focus;\n//# sourceMappingURL=focus.mjs.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import has from '../core/has';\nexport let assign;\n/**\n * Gets the own property descriptor of the specified object.\n * An own property descriptor is one that is defined directly on the object and is not\n * inherited from the object's prototype.\n * @param o Object that contains the property.\n * @param p Name of the property.\n */\nexport let getOwnPropertyDescriptor;\n/**\n * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n * @param o Object that contains the own properties.\n */\nexport let getOwnPropertyNames;\n/**\n * Returns an array of all symbol properties found directly on object o.\n * @param o Object to retrieve the symbols from.\n */\nexport let getOwnPropertySymbols;\n/**\n * Returns true if the values are the same value, false otherwise.\n * @param value1 The first value.\n * @param value2 The second value.\n */\nexport let is;\n/**\n * Returns the names of the enumerable properties and methods of an object.\n * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n */\nexport let keys;\n/* ES7 Object static methods */\nexport let getOwnPropertyDescriptors;\nexport let entries;\nexport let values;\nif (!true) {\n    const keys = Object.keys.bind(Object);\n    Object.keys = function symbolAwareKeys(o) {\n        return keys(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.assign = function assign(target, ...sources) {\n        if (target == null) {\n            // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        const to = Object(target);\n        sources.forEach((nextSource) => {\n            if (nextSource) {\n                // Skip over if undefined or null\n                keys(nextSource).forEach((nextKey) => {\n                    to[nextKey] = nextSource[nextKey];\n                });\n            }\n        });\n        return to;\n    };\n    const getOwnPropertyNames = Object.getOwnPropertyNames.bind(Object);\n    Object.getOwnPropertyNames = function symbolAwareGetOwnPropertyNames(o) {\n        return getOwnPropertyNames(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.getOwnPropertySymbols = function getOwnPropertySymbols(o) {\n        return getOwnPropertyNames(o)\n            .filter((key) => Boolean(key.match(/^@@.+/)))\n            .map((key) => Symbol.for(key.substring(2)));\n    };\n    Object.is = function is(value1, value2) {\n        if (value1 === value2) {\n            return value1 !== 0 || 1 / value1 === 1 / value2; // -0\n        }\n        return value1 !== value1 && value2 !== value2; // NaN\n    };\n}\nif (!true) {\n    Object.getOwnPropertyDescriptors = function getOwnPropertyDescriptors(o) {\n        return Object.getOwnPropertyNames(o).reduce((previous, key) => {\n            previous[key] = Object.getOwnPropertyDescriptor(o, key);\n            return previous;\n        }, {});\n    };\n    Object.entries = function entries(o) {\n        return keys(o).map((key) => [key, o[key]]);\n    };\n    Object.values = function values(o) {\n        return keys(o).map((key) => o[key]);\n    };\n}\nassign = Object.assign;\ngetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\ngetOwnPropertyNames = Object.getOwnPropertyNames;\ngetOwnPropertySymbols = Object.getOwnPropertySymbols;\nis = Object.is;\nkeys = Object.keys;\ngetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\nentries = Object.entries;\nvalues = Object.values;\nexport default Object;\n//# sourceMappingURL=object.mjs.map","import Registry from './Registry';\nimport { create as vdomCreate, diffProperty, dom as vdomDom, invalidator, isTextNode, renderer, w as vdomW } from './vdom';\nimport { from } from '../shim/array';\nimport global from '../shim/global';\nimport ThemeInjector from './ThemeInjector';\nconst RESERVED_PROPS = ['focus'];\nexport var CustomElementChildType;\n(function (CustomElementChildType) {\n    CustomElementChildType[\"DOJO\"] = \"DOJO\";\n    CustomElementChildType[\"NODE\"] = \"NODE\";\n    CustomElementChildType[\"TEXT\"] = \"TEXT\";\n})(CustomElementChildType || (CustomElementChildType = {}));\nfunction isElement(item) {\n    return item && item.nodeType === 1;\n}\nfunction isDojoChild(item) {\n    return isElement(item) && item.tagName.indexOf('-') > -1;\n}\nfunction w(node, properties, children) {\n    const wrappedWNode = vdomW(node, properties, children);\n    function wrapper(...args) {\n        const { domNode } = node;\n        if (args.length && domNode) {\n            setTimeout(() => {\n                domNode.dispatchEvent(new CustomEvent('render', {\n                    bubbles: false,\n                    detail: args\n                }));\n            });\n        }\n        return wrappedWNode;\n    }\n    Object.keys(wrappedWNode).forEach((key) => (wrapper[key] = wrappedWNode[key]));\n    return wrapper;\n}\nfunction dom(options, children) {\n    const wrappedDomNode = vdomDom(options, children);\n    function wrapper(...args) {\n        const { domNode } = wrappedDomNode;\n        if (args.length && domNode) {\n            setTimeout(() => {\n                domNode.dispatchEvent(new CustomEvent('render', {\n                    bubbles: false,\n                    detail: args\n                }));\n            });\n        }\n        return wrappedDomNode;\n    }\n    Object.keys(wrappedDomNode).forEach((key) => (wrapper[key] = wrappedDomNode[key]));\n    return wrapper;\n}\nconst factory = vdomCreate({ diffProperty, invalidator }).properties();\nexport function DomToWidgetWrapper(domNode) {\n    const wrapper = factory(function DomToWidgetWrapper({ properties, middleware: { invalidator, diffProperty } }) {\n        diffProperty('', invalidator);\n        const props = Object.keys(properties()).reduce((props, key) => {\n            const value = properties()[key];\n            if (key.indexOf('on') === 0 || RESERVED_PROPS.indexOf(key) !== -1) {\n                key = `__${key}`;\n            }\n            props[key] = value;\n            return props;\n        }, {});\n        return dom({ node: domNode, props, diffType: 'dom' });\n    });\n    wrapper.domNode = domNode;\n    return wrapper;\n}\nfunction registerThemeInjector(theme, themeRegistry) {\n    const themeInjector = new ThemeInjector(theme);\n    themeRegistry.defineInjector('__theme_injector', (invalidator) => {\n        themeInjector.setInvalidator(invalidator);\n        return () => themeInjector;\n    });\n    return themeInjector;\n}\nexport function create(descriptor, WidgetConstructor) {\n    const { attributes = [], properties = [], registryFactory = () => new Registry() } = descriptor;\n    const attributeMap = {};\n    attributes.forEach((propertyName) => {\n        const attributeName = propertyName.toLowerCase();\n        attributeMap[attributeName] = propertyName;\n    });\n    properties.forEach((propertyName) => {\n        const attributeName = propertyName.toLowerCase();\n        attributeMap[attributeName] = propertyName;\n    });\n    return class extends HTMLElement {\n        constructor() {\n            super(...arguments);\n            this._properties = {};\n            this._children = [];\n            this._eventProperties = {};\n            this._propertiesMap = {};\n            this._initialised = false;\n            this._childType = descriptor.childType;\n        }\n        connectedCallback() {\n            if (this._initialised) {\n                return;\n            }\n            this._waitTillReady();\n        }\n        _hasBeenParsed() {\n            if (document.readyState !== 'loading') {\n                return true;\n            }\n            let element = this;\n            while (element) {\n                if (element.nextSibling) {\n                    return true;\n                }\n                element = element.parentNode;\n            }\n            return false;\n        }\n        _waitTillReady() {\n            this._initialised = true;\n            if (this._hasBeenParsed()) {\n                this._readyCallback();\n            }\n            else {\n                setTimeout(() => {\n                    this._waitTillReady();\n                }, 100);\n            }\n        }\n        _readyCallback() {\n            const domProperties = {};\n            const { properties = [], events = [] } = descriptor;\n            this._properties = Object.assign({}, this._propertiesWithAttributes(properties), this._attributesToProperties(attributes));\n            [...attributes, ...properties].forEach((propertyName) => {\n                const isReservedProp = RESERVED_PROPS.indexOf(propertyName) !== -1;\n                const value = this._propertiesMap[propertyName] || !isReservedProp ? this[propertyName] : undefined;\n                let filteredPropertyName = propertyName.replace(/^on/, '__');\n                if (isReservedProp) {\n                    filteredPropertyName = `__${propertyName}`;\n                }\n                if (value !== undefined) {\n                    this._properties[propertyName] = value;\n                }\n                if (filteredPropertyName !== propertyName) {\n                    domProperties[filteredPropertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n                if (!isReservedProp) {\n                    domProperties[propertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n            });\n            events.forEach((propertyName) => {\n                const eventName = propertyName.replace(/^on/, '').toLowerCase();\n                const filteredPropertyName = propertyName.replace(/^on/, '__on');\n                domProperties[filteredPropertyName] = {\n                    get: () => this._getEventProperty(propertyName),\n                    set: (value) => this._setEventProperty(propertyName, value)\n                };\n                this._eventProperties[propertyName] = undefined;\n                this._properties[propertyName] = (...args) => {\n                    const eventCallback = this._getEventProperty(propertyName);\n                    if (typeof eventCallback === 'function') {\n                        eventCallback(...args);\n                    }\n                    this.dispatchEvent(new CustomEvent(eventName, {\n                        bubbles: false,\n                        detail: args\n                    }));\n                };\n            });\n            Object.defineProperties(this, domProperties);\n            const children = from(this.childNodes).filter((childNode) => !isTextNode(childNode) || childNode.data.replace(/^\\s+|\\s+$/g, ''));\n            if (!this._childType) {\n                if (children.some((child) => isDojoChild(child))) {\n                    this._childType = CustomElementChildType.DOJO;\n                }\n                else {\n                    this._childType = CustomElementChildType.NODE;\n                }\n            }\n            from(children).forEach((childNode) => {\n                if (this._childType === CustomElementChildType.DOJO) {\n                    childNode.addEventListener('dojo-ce-render', () => this._render());\n                    childNode.addEventListener('dojo-ce-connected', () => this._render());\n                    this._children.push(DomToWidgetWrapper(childNode));\n                }\n                else {\n                    this._children.push(dom({ node: childNode, diffType: 'dom' }));\n                }\n            });\n            this.addEventListener('dojo-ce-connected', (e) => this._childConnected(e));\n            const widgetProperties = this._properties;\n            const renderChildren = () => this.__children__();\n            const Wrapper = factory(() => w(WidgetConstructor, widgetProperties, renderChildren()));\n            const registry = registryFactory();\n            const themeContext = registerThemeInjector(this._getVariant() ? { theme: this._getTheme(), variant: this._getVariant() } : this._getTheme(), registry);\n            global.addEventListener('dojo-theme-set', () => {\n                const variant = this._getVariant();\n                if (variant !== 'noVariant') {\n                    themeContext.set(this._getTheme(), variant);\n                }\n                else {\n                    themeContext.set(this._getTheme());\n                }\n            });\n            const r = renderer(() => w(Wrapper, {}));\n            this._renderer = r;\n            r.mount({ domNode: this, merge: false, registry });\n            const root = this.children[0];\n            if (root) {\n                const { display = 'block' } = global.getComputedStyle(root);\n                this.style.display = display;\n            }\n            this.dispatchEvent(new CustomEvent('dojo-ce-connected', {\n                bubbles: true,\n                detail: this\n            }));\n        }\n        _getTheme() {\n            if (global && global.dojoce && global.dojoce.theme) {\n                return global.dojoce.themes[global.dojoce.theme];\n            }\n        }\n        _getVariant() {\n            if (global && global.dojoce && global.dojoce.variant) {\n                return global.dojoce.variant;\n            }\n        }\n        _childConnected(e) {\n            const node = e.detail;\n            if (node.parentNode === this) {\n                const exists = this._children.some((child) => child.domNode === node);\n                if (!exists) {\n                    node.addEventListener('dojo-ce-render', () => this._render());\n                    this._children.push(DomToWidgetWrapper(node));\n                    this._render();\n                }\n            }\n        }\n        _render() {\n            if (this._renderer) {\n                this._renderer.invalidate();\n                this.dispatchEvent(new CustomEvent('dojo-ce-render', {\n                    bubbles: false,\n                    detail: this\n                }));\n            }\n        }\n        __properties__() {\n            return Object.assign({}, this._properties, this._eventProperties);\n        }\n        __children__() {\n            if (this._children.some((child) => child.domNode.getAttribute && child.domNode.getAttribute('slot'))) {\n                const slots = this._children.reduce((slots, child) => {\n                    const { domNode } = child;\n                    const slotName = domNode.getAttribute && domNode.getAttribute('slot');\n                    if (!slotName) {\n                        return slots;\n                    }\n                    let slotResult = child.isFactory\n                        ? w(child, domNode.__properties__ ? Object.assign({}, domNode.__properties__()) : {}, domNode.__children__ ? [...domNode.__children__()] : [])\n                        : child;\n                    const existingSlotValue = slots[slotName];\n                    return Object.assign({}, slots, { [slotName]: existingSlotValue ? [...existingSlotValue, slotResult] : [slotResult] });\n                }, {});\n                return [\n                    Object.keys(slots).reduce((result, key) => {\n                        const value = slots[key];\n                        return Object.assign({}, result, { [key]: value.length === 1 ? value[0] : value });\n                    }, {})\n                ];\n            }\n            if (this._childType === CustomElementChildType.DOJO) {\n                return this._children.filter((Child) => Child.domNode.isWidget).map((Child) => {\n                    const { domNode } = Child;\n                    return w(Child, Object.assign({}, domNode.__properties__()), [...domNode.__children__()]);\n                });\n            }\n            else {\n                return this._children;\n            }\n        }\n        attributeChangedCallback(name, oldValue, value) {\n            const propertyName = attributeMap[name];\n            if (attributes.indexOf(propertyName) >= 0) {\n                this._setProperty(propertyName, value);\n            }\n            else {\n                try {\n                    const parsedValue = value ? JSON.parse(value) : null;\n                    this._setProperty(propertyName, parsedValue);\n                }\n                catch (e) {\n                    // if json parsing error, we do not set the property\n                }\n            }\n        }\n        _setEventProperty(propertyName, value) {\n            this._eventProperties[propertyName] = value;\n        }\n        _getEventProperty(propertyName) {\n            return this._eventProperties[propertyName];\n        }\n        _setProperty(propertyName, value) {\n            this._properties[propertyName] = value;\n            this._render();\n        }\n        _getProperty(propertyName) {\n            return this._properties[propertyName];\n        }\n        _propertiesWithAttributes(properties) {\n            return properties.reduce((properties, propertyName) => {\n                const attributeName = propertyName.toLowerCase();\n                const value = this.getAttribute(attributeName);\n                if (value !== null) {\n                    try {\n                        properties[propertyName] = JSON.parse(value);\n                    }\n                    catch (e) {\n                        // invalid json values do not get set\n                    }\n                }\n                return properties;\n            }, {});\n        }\n        _attributesToProperties(attributes) {\n            return attributes.reduce((properties, propertyName) => {\n                const attributeName = propertyName.toLowerCase();\n                const value = this.getAttribute(attributeName);\n                if (value !== null) {\n                    properties[propertyName] = value;\n                }\n                return properties;\n            }, {});\n        }\n        static get observedAttributes() {\n            return Object.keys(attributeMap);\n        }\n        get isWidget() {\n            return true;\n        }\n        set(key, value) {\n            this._propertiesMap[key] = value;\n            if (this._renderer) {\n                this._setProperty(key, value);\n            }\n        }\n    };\n}\nexport function register(WidgetConstructor) {\n    const descriptor = WidgetConstructor.__customElementDescriptor;\n    if (!descriptor) {\n        throw new Error('Cannot get descriptor for Custom Element, have you added the @customElement decorator to your Widget?');\n    }\n    global.customElements.define(descriptor.tagName, create(descriptor, WidgetConstructor));\n}\nexport default register;\n//# sourceMappingURL=registerCustomElement.mjs.map","import global from '../shim/global';\n/**\n * A cache of results of feature tests\n */\nexport const testCache = {};\n/**\n * A cache of the un-resolved feature tests\n */\nexport const testFunctions = {};\n/* Grab the staticFeatures if there are available */\nconst { staticFeatures } = global.DojoHasEnvironment || {};\n/* Cleaning up the DojoHasEnviornment */\nif ('DojoHasEnvironment' in global) {\n    delete global.DojoHasEnvironment;\n}\n/**\n * Custom type guard to narrow the `staticFeatures` to either a map or a function that\n * returns a map.\n *\n * @param value The value to guard for\n */\nfunction isStaticFeatureFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * The cache of asserted features that were available in the global scope when the\n * module loaded\n */\nconst staticCache = staticFeatures\n    ? isStaticFeatureFunction(staticFeatures)\n        ? staticFeatures.apply(global)\n        : staticFeatures\n    : {}; /* Providing an empty cache, if none was in the environment\n\n\n/**\n* AMD plugin function.\n*\n* Resolves resourceId into a module id based on possibly-nested tenary expression that branches on has feature test\n* value(s).\n*\n* @param resourceId The id of the module\n* @param normalize Resolves a relative module id into an absolute module id\n*/\nexport function normalize(resourceId, normalize) {\n    const tokens = resourceId.match(/[\\?:]|[^:\\?]*/g) || [];\n    let i = 0;\n    function get(skip) {\n        const term = tokens[i++];\n        if (term === ':') {\n            // empty string module name, resolves to null\n            return null;\n        }\n        else {\n            // postfixed with a ? means it is a feature to branch on, the term is the name of the feature\n            if (tokens[i++] === '?') {\n                if (!skip && has(term)) {\n                    // matched the feature, get the first value from the options\n                    return get();\n                }\n                else {\n                    // did not match, get the second value, passing over the first\n                    get(true);\n                    return get(skip);\n                }\n            }\n            // a module\n            return term;\n        }\n    }\n    const id = get();\n    return id && normalize(id);\n}\n/**\n * Check if a feature has already been registered\n *\n * @param feature the name of the feature\n */\nexport function exists(feature) {\n    const normalizedFeature = feature.toLowerCase();\n    return Boolean(normalizedFeature in staticCache || normalizedFeature in testCache || testFunctions[normalizedFeature]);\n}\n/**\n * Register a new test for a named feature.\n *\n * @example\n * has.add('dom-addeventlistener', !!document.addEventListener);\n *\n * @example\n * has.add('touch-events', function () {\n *    return 'ontouchstart' in document\n * });\n *\n * @param feature the name of the feature\n * @param value the value reported of the feature, or a function that will be executed once on first test\n * @param overwrite if an existing value should be overwritten. Defaults to false.\n */\nexport function add(feature, value, overwrite = false) {\n    const normalizedFeature = feature.toLowerCase();\n    if (exists(normalizedFeature) && !overwrite && !(normalizedFeature in staticCache)) {\n        throw new TypeError(`Feature \"${feature}\" exists and overwrite not true.`);\n    }\n    if (typeof value === 'function') {\n        testFunctions[normalizedFeature] = value;\n    }\n    else {\n        testCache[normalizedFeature] = value;\n        delete testFunctions[normalizedFeature];\n    }\n}\n/**\n * Return the current value of a named feature.\n *\n * @param feature The name of the feature to test.\n */\nexport default function has(feature, strict = false) {\n    let result;\n    const normalizedFeature = feature.toLowerCase();\n    if (normalizedFeature in staticCache) {\n        result = staticCache[normalizedFeature];\n    }\n    else if (testFunctions[normalizedFeature]) {\n        result = testCache[normalizedFeature] = testFunctions[normalizedFeature].call(null);\n        delete testFunctions[normalizedFeature];\n    }\n    else if (normalizedFeature in testCache) {\n        result = testCache[normalizedFeature];\n    }\n    else if (strict) {\n        throw new TypeError(`Attempt to detect unregistered has feature \"${feature}\"`);\n    }\n    return result;\n}\n/*\n * Out of the box feature tests\n */\nadd('public-path', undefined);\n/* flag for dojo debug, default to false */\nadd('dojo-debug', false);\n/* Detects if the environment is \"browser like\" */\nadd('host-browser', true);\n/* Detects if the environment is \"jsdom\" */\nadd('host-jsdom', true && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('jsdom') !== -1);\n/* Detects if the environment appears to be NodeJS */\nadd('host-node', false);\nadd('fetch', true);\nadd('es6-array', true);\nadd('es6-array-fill', true);\nadd('es7-array', true);\nadd('es2019-array', true);\n/* Map */\nadd('es6-map', true);\nadd('es6-iterator', true);\n/* Math */\nadd('es6-math', true);\nadd('es6-math-imul', true);\n/* Object */\nadd('es6-object', true);\nadd('es2017-object', true);\n/* Observable */\nadd('es-observable', false);\n/* Promise */\nadd('es6-promise', true);\nadd('es2018-promise-finally', () => true && typeof global.Promise.prototype.finally !== 'undefined', true);\n/* Set */\nadd('es6-set', true);\n/* String */\nadd('es6-string', true);\nadd('es6-string-raw', true);\nadd('es2017-string', true);\n/* Symbol */\nadd('es6-symbol', true);\n/* WeakMap */\nadd('es6-weakmap', true);\n/* Miscellaneous features */\nadd('microtasks', true);\nadd('postmessage', true);\nadd('raf', true);\nadd('setimmediate', false);\n/* DOM Features */\nadd('dom-mutationobserver', true);\nadd('dom-webanimation', () => true && global.Animation !== undefined && global.KeyframeEffect !== undefined, true);\nadd('abort-controller', () => typeof global.AbortController !== 'undefined');\nadd('abort-signal', () => typeof global.AbortSignal !== 'undefined');\nadd('dom-intersection-observer', () => true && global.IntersectionObserver !== undefined, true);\nadd('dom-resize-observer', () => true && global.ResizeObserver !== undefined, true);\nadd('dom-pointer-events', () => true && global.onpointerdown !== undefined, true);\nadd('dom-css-variables', true);\nadd('dom-inert', () => true && Element.prototype.hasOwnProperty('inert'), true);\nadd('build-elide', false);\nadd('test', false);\nadd('global-this', () => typeof global.globalThis !== 'undefined');\n//# sourceMappingURL=has.mjs.map","import { create, node } from '../vdom';\nconst factory = create({ node });\nconst defaultDimensions = {\n    client: {\n        height: 0,\n        left: 0,\n        top: 0,\n        width: 0\n    },\n    offset: {\n        height: 0,\n        left: 0,\n        top: 0,\n        width: 0\n    },\n    position: {\n        bottom: 0,\n        left: 0,\n        right: 0,\n        top: 0\n    },\n    scroll: {\n        height: 0,\n        left: 0,\n        top: 0,\n        width: 0\n    },\n    size: {\n        width: 0,\n        height: 0\n    }\n};\nexport const dimensions = factory(({ middleware: { node } }) => {\n    return {\n        get(key) {\n            const domNode = node.get(key);\n            if (!domNode) {\n                return {\n                    client: Object.assign({}, defaultDimensions.client),\n                    offset: Object.assign({}, defaultDimensions.offset),\n                    position: Object.assign({}, defaultDimensions.position),\n                    scroll: Object.assign({}, defaultDimensions.scroll),\n                    size: Object.assign({}, defaultDimensions.size)\n                };\n            }\n            const boundingDimensions = domNode.getBoundingClientRect();\n            const result = {\n                client: {\n                    height: domNode.clientHeight,\n                    left: domNode.clientLeft,\n                    top: domNode.clientTop,\n                    width: domNode.clientWidth\n                },\n                offset: {\n                    height: domNode.offsetHeight,\n                    left: domNode.offsetLeft,\n                    top: domNode.offsetTop,\n                    width: domNode.offsetWidth\n                },\n                position: {\n                    bottom: boundingDimensions.bottom,\n                    left: boundingDimensions.left,\n                    right: boundingDimensions.right,\n                    top: boundingDimensions.top\n                },\n                scroll: {\n                    height: domNode.scrollHeight,\n                    left: domNode.scrollLeft,\n                    top: domNode.scrollTop,\n                    width: domNode.scrollWidth\n                },\n                size: {\n                    width: boundingDimensions.width,\n                    height: boundingDimensions.height\n                }\n            };\n            return result;\n        }\n    };\n});\nexport default dimensions;\n//# sourceMappingURL=dimensions.mjs.map","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ResizeObserver = factory());\n}(this, (function () { 'use strict';\n\n/**\n * A collection of shims that provide minimal functionality of the ES6 collections.\n *\n * These implementations are not meant to be used outside of the ResizeObserver\n * modules as they cover only a limited range of use cases.\n */\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = (function () {\n    if (typeof Map !== 'undefined') {\n        return Map;\n    }\n\n    /**\n     * Returns index in provided array that matches the specified key.\n     *\n     * @param {Array<Array>} arr\n     * @param {*} key\n     * @returns {number}\n     */\n    function getIndex(arr, key) {\n        var result = -1;\n\n        arr.some(function (entry, index) {\n            if (entry[0] === key) {\n                result = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        return result;\n    }\n\n    return (function () {\n        function anonymous() {\n            this.__entries__ = [];\n        }\n\n        var prototypeAccessors = { size: { configurable: true } };\n\n        /**\n         * @returns {boolean}\n         */\n        prototypeAccessors.size.get = function () {\n            return this.__entries__.length;\n        };\n\n        /**\n         * @param {*} key\n         * @returns {*}\n         */\n        anonymous.prototype.get = function (key) {\n            var index = getIndex(this.__entries__, key);\n            var entry = this.__entries__[index];\n\n            return entry && entry[1];\n        };\n\n        /**\n         * @param {*} key\n         * @param {*} value\n         * @returns {void}\n         */\n        anonymous.prototype.set = function (key, value) {\n            var index = getIndex(this.__entries__, key);\n\n            if (~index) {\n                this.__entries__[index][1] = value;\n            } else {\n                this.__entries__.push([key, value]);\n            }\n        };\n\n        /**\n         * @param {*} key\n         * @returns {void}\n         */\n        anonymous.prototype.delete = function (key) {\n            var entries = this.__entries__;\n            var index = getIndex(entries, key);\n\n            if (~index) {\n                entries.splice(index, 1);\n            }\n        };\n\n        /**\n         * @param {*} key\n         * @returns {void}\n         */\n        anonymous.prototype.has = function (key) {\n            return !!~getIndex(this.__entries__, key);\n        };\n\n        /**\n         * @returns {void}\n         */\n        anonymous.prototype.clear = function () {\n            this.__entries__.splice(0);\n        };\n\n        /**\n         * @param {Function} callback\n         * @param {*} [ctx=null]\n         * @returns {void}\n         */\n        anonymous.prototype.forEach = function (callback, ctx) {\n            var this$1 = this;\n            if ( ctx === void 0 ) ctx = null;\n\n            for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {\n                var entry = list[i];\n\n                callback.call(ctx, entry[1], entry[0]);\n            }\n        };\n\n        Object.defineProperties( anonymous.prototype, prototypeAccessors );\n\n        return anonymous;\n    }());\n})();\n\n/**\n * Detects whether window and document objects are available in current environment.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\nvar global$1 = (function () {\n    if (typeof global !== 'undefined' && global.Math === Math) {\n        return global;\n    }\n\n    if (typeof self !== 'undefined' && self.Math === Math) {\n        return self;\n    }\n\n    if (typeof window !== 'undefined' && window.Math === Math) {\n        return window;\n    }\n\n    // eslint-disable-next-line no-new-func\n    return Function('return this')();\n})();\n\n/**\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\n * first one is not supported.\n *\n * @returns {number} Requests' identifier.\n */\nvar requestAnimationFrame$1 = (function () {\n    if (typeof requestAnimationFrame === 'function') {\n        // It's required to use a bounded function because IE sometimes throws\n        // an \"Invalid calling object\" error if rAF is invoked without the global\n        // object on the left hand side.\n        return requestAnimationFrame.bind(global$1);\n    }\n\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\n})();\n\n// Defines minimum timeout before adding a trailing call.\nvar trailingTimeout = 2;\n\n/**\n * Creates a wrapper function which ensures that provided callback will be\n * invoked only once during the specified delay period.\n *\n * @param {Function} callback - Function to be invoked after the delay period.\n * @param {number} delay - Delay after which to invoke callback.\n * @returns {Function}\n */\nvar throttle = function (callback, delay) {\n    var leadingCall = false,\n        trailingCall = false,\n        lastCallTime = 0;\n\n    /**\n     * Invokes the original callback function and schedules new invocation if\n     * the \"proxy\" was called during current request.\n     *\n     * @returns {void}\n     */\n    function resolvePending() {\n        if (leadingCall) {\n            leadingCall = false;\n\n            callback();\n        }\n\n        if (trailingCall) {\n            proxy();\n        }\n    }\n\n    /**\n     * Callback invoked after the specified delay. It will further postpone\n     * invocation of the original function delegating it to the\n     * requestAnimationFrame.\n     *\n     * @returns {void}\n     */\n    function timeoutCallback() {\n        requestAnimationFrame$1(resolvePending);\n    }\n\n    /**\n     * Schedules invocation of the original function.\n     *\n     * @returns {void}\n     */\n    function proxy() {\n        var timeStamp = Date.now();\n\n        if (leadingCall) {\n            // Reject immediately following calls.\n            if (timeStamp - lastCallTime < trailingTimeout) {\n                return;\n            }\n\n            // Schedule new call to be in invoked when the pending one is resolved.\n            // This is important for \"transitions\" which never actually start\n            // immediately so there is a chance that we might miss one if change\n            // happens amids the pending invocation.\n            trailingCall = true;\n        } else {\n            leadingCall = true;\n            trailingCall = false;\n\n            setTimeout(timeoutCallback, delay);\n        }\n\n        lastCallTime = timeStamp;\n    }\n\n    return proxy;\n};\n\n// Minimum delay before invoking the update of observers.\nvar REFRESH_DELAY = 20;\n\n// A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\n\n// Check if MutationObserver is available.\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n\n/**\n * Singleton controller class which handles updates of ResizeObserver instances.\n */\nvar ResizeObserverController = function() {\n    this.connected_ = false;\n    this.mutationEventsAdded_ = false;\n    this.mutationsObserver_ = null;\n    this.observers_ = [];\n\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n};\n\n/**\n * Adds observer to observers list.\n *\n * @param {ResizeObserverSPI} observer - Observer to be added.\n * @returns {void}\n */\n\n\n/**\n * Holds reference to the controller's instance.\n *\n * @private {ResizeObserverController}\n */\n\n\n/**\n * Keeps reference to the instance of MutationObserver.\n *\n * @private {MutationObserver}\n */\n\n/**\n * Indicates whether DOM listeners have been added.\n *\n * @private {boolean}\n */\nResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n        this.observers_.push(observer);\n    }\n\n    // Add listeners if they haven't been added yet.\n    if (!this.connected_) {\n        this.connect_();\n    }\n};\n\n/**\n * Removes observer from observers list.\n *\n * @param {ResizeObserverSPI} observer - Observer to be removed.\n * @returns {void}\n */\nResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer);\n\n    // Remove observer if it's present in registry.\n    if (~index) {\n        observers.splice(index, 1);\n    }\n\n    // Remove listeners if controller has no connected observers.\n    if (!observers.length && this.connected_) {\n        this.disconnect_();\n    }\n};\n\n/**\n * Invokes the update of observers. It will continue running updates insofar\n * it detects changes.\n *\n * @returns {void}\n */\nResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_();\n\n    // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n    if (changesDetected) {\n        this.refresh();\n    }\n};\n\n/**\n * Updates every observer from observers list and notifies them of queued\n * entries.\n *\n * @private\n * @returns {boolean} Returns \"true\" if any observer has detected changes in\n *  dimensions of it's elements.\n */\nResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n        return observer.gatherActive(), observer.hasActive();\n    });\n\n    // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n    activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\n\n    return activeObservers.length > 0;\n};\n\n/**\n * Initializes DOM listeners.\n *\n * @private\n * @returns {void}\n */\nResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n        return;\n    }\n\n    // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n        this.mutationsObserver_ = new MutationObserver(this.refresh);\n\n        this.mutationsObserver_.observe(document, {\n            attributes: true,\n            childList: true,\n            characterData: true,\n            subtree: true\n        });\n    } else {\n        document.addEventListener('DOMSubtreeModified', this.refresh);\n\n        this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n};\n\n/**\n * Removes DOM listeners.\n *\n * @private\n * @returns {void}\n */\nResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n        return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n        this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n        document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n};\n\n/**\n * \"Transitionend\" event handler.\n *\n * @private\n * @param {TransitionEvent} event\n * @returns {void}\n */\nResizeObserverController.prototype.onTransitionEnd_ = function (ref) {\n        var propertyName = ref.propertyName; if ( propertyName === void 0 ) propertyName = '';\n\n    // Detect whether transition may affect dimensions of an element.\n    var isReflowProperty = transitionKeys.some(function (key) {\n        return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n        this.refresh();\n    }\n};\n\n/**\n * Returns instance of the ResizeObserverController.\n *\n * @returns {ResizeObserverController}\n */\nResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n        this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n};\n\nResizeObserverController.instance_ = null;\n\n/**\n * Defines non-writable/enumerable properties of the provided target object.\n *\n * @param {Object} target - Object for which to define properties.\n * @param {Object} props - Properties to be defined.\n * @returns {Object} Target object.\n */\nvar defineConfigurable = (function (target, props) {\n    for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {\n        var key = list[i];\n\n        Object.defineProperty(target, key, {\n            value: props[key],\n            enumerable: false,\n            writable: false,\n            configurable: true\n        });\n    }\n\n    return target;\n});\n\n/**\n * Returns the global object associated with provided element.\n *\n * @param {Object} target\n * @returns {Object}\n */\nvar getWindowOf = (function (target) {\n    // Assume that the element is an instance of Node, which means that it\n    // has the \"ownerDocument\" property from which we can retrieve a\n    // corresponding global object.\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\n\n    // Return the local global object if it's not possible extract one from\n    // provided element.\n    return ownerGlobal || global$1;\n});\n\n// Placeholder of an empty content rectangle.\nvar emptyRect = createRectInit(0, 0, 0, 0);\n\n/**\n * Converts provided string to a number.\n *\n * @param {number|string} value\n * @returns {number}\n */\nfunction toFloat(value) {\n    return parseFloat(value) || 0;\n}\n\n/**\n * Extracts borders size from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @param {...string} positions - Borders positions (top, right, ...)\n * @returns {number}\n */\nfunction getBordersSize(styles) {\n    var positions = [], len = arguments.length - 1;\n    while ( len-- > 0 ) positions[ len ] = arguments[ len + 1 ];\n\n    return positions.reduce(function (size, position) {\n        var value = styles['border-' + position + '-width'];\n\n        return size + toFloat(value);\n    }, 0);\n}\n\n/**\n * Extracts paddings sizes from provided styles.\n *\n * @param {CSSStyleDeclaration} styles\n * @returns {Object} Paddings box.\n */\nfunction getPaddings(styles) {\n    var positions = ['top', 'right', 'bottom', 'left'];\n    var paddings = {};\n\n    for (var i = 0, list = positions; i < list.length; i += 1) {\n        var position = list[i];\n\n        var value = styles['padding-' + position];\n\n        paddings[position] = toFloat(value);\n    }\n\n    return paddings;\n}\n\n/**\n * Calculates content rectangle of provided SVG element.\n *\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\n *      to be calculated.\n * @returns {DOMRectInit}\n */\nfunction getSVGContentRect(target) {\n    var bbox = target.getBBox();\n\n    return createRectInit(0, 0, bbox.width, bbox.height);\n}\n\n/**\n * Calculates content rectangle of provided HTMLElement.\n *\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\n * @returns {DOMRectInit}\n */\nfunction getHTMLElementContentRect(target) {\n    // Client width & height properties can't be\n    // used exclusively as they provide rounded values.\n    var clientWidth = target.clientWidth;\n    var clientHeight = target.clientHeight;\n\n    // By this condition we can catch all non-replaced inline, hidden and\n    // detached elements. Though elements with width & height properties less\n    // than 0.5 will be discarded as well.\n    //\n    // Without it we would need to implement separate methods for each of\n    // those cases and it's not possible to perform a precise and performance\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n    // gives wrong results for elements with width & height less than 0.5.\n    if (!clientWidth && !clientHeight) {\n        return emptyRect;\n    }\n\n    var styles = getWindowOf(target).getComputedStyle(target);\n    var paddings = getPaddings(styles);\n    var horizPad = paddings.left + paddings.right;\n    var vertPad = paddings.top + paddings.bottom;\n\n    // Computed styles of width & height are being used because they are the\n    // only dimensions available to JS that contain non-rounded values. It could\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\n    var width = toFloat(styles.width),\n        height = toFloat(styles.height);\n\n    // Width & height include paddings and borders when the 'border-box' box\n    // model is applied (except for IE).\n    if (styles.boxSizing === 'border-box') {\n        // Following conditions are required to handle Internet Explorer which\n        // doesn't include paddings and borders to computed CSS dimensions.\n        //\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\n        // properties then it's either IE, and thus we don't need to subtract\n        // anything, or an element merely doesn't have paddings/borders styles.\n        if (Math.round(width + horizPad) !== clientWidth) {\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\n        }\n\n        if (Math.round(height + vertPad) !== clientHeight) {\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n        }\n    }\n\n    // Following steps can't be applied to the document's root element as its\n    // client[Width/Height] properties represent viewport area of the window.\n    // Besides, it's as well not necessary as the <html> itself neither has\n    // rendered scroll bars nor it can be clipped.\n    if (!isDocumentElement(target)) {\n        // In some browsers (only in Firefox, actually) CSS width & height\n        // include scroll bars size which can be removed at this step as scroll\n        // bars are the only difference between rounded dimensions + paddings\n        // and \"client\" properties, though that is not always true in Chrome.\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\n\n        // Chrome has a rather weird rounding of \"client\" properties.\n        // E.g. for an element with content width of 314.2px it sometimes gives\n        // the client width of 315px and for the width of 314.7px it may give\n        // 314px. And it doesn't happen all the time. So just ignore this delta\n        // as a non-relevant.\n        if (Math.abs(vertScrollbar) !== 1) {\n            width -= vertScrollbar;\n        }\n\n        if (Math.abs(horizScrollbar) !== 1) {\n            height -= horizScrollbar;\n        }\n    }\n\n    return createRectInit(paddings.left, paddings.top, width, height);\n}\n\n/**\n * Checks whether provided element is an instance of the SVGGraphicsElement.\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\nvar isSVGGraphicsElement = (function () {\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n    // interface.\n    if (typeof SVGGraphicsElement !== 'undefined') {\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\n    }\n\n    // If it's so, then check that element is at least an instance of the\n    // SVGElement and that it has the \"getBBox\" method.\n    // eslint-disable-next-line no-extra-parens\n    return function (target) { return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function'; };\n})();\n\n/**\n * Checks whether provided element is a document element (<html>).\n *\n * @param {Element} target - Element to be checked.\n * @returns {boolean}\n */\nfunction isDocumentElement(target) {\n    return target === getWindowOf(target).document.documentElement;\n}\n\n/**\n * Calculates an appropriate content rectangle for provided html or svg element.\n *\n * @param {Element} target - Element content rectangle of which needs to be calculated.\n * @returns {DOMRectInit}\n */\nfunction getContentRect(target) {\n    if (!isBrowser) {\n        return emptyRect;\n    }\n\n    if (isSVGGraphicsElement(target)) {\n        return getSVGContentRect(target);\n    }\n\n    return getHTMLElementContentRect(target);\n}\n\n/**\n * Creates rectangle with an interface of the DOMRectReadOnly.\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\n *\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\n * @returns {DOMRectReadOnly}\n */\nfunction createReadOnlyRect(ref) {\n    var x = ref.x;\n    var y = ref.y;\n    var width = ref.width;\n    var height = ref.height;\n\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n    var rect = Object.create(Constr.prototype);\n\n    // Rectangle's properties are not writable and non-enumerable.\n    defineConfigurable(rect, {\n        x: x, y: y, width: width, height: height,\n        top: y,\n        right: x + width,\n        bottom: height + y,\n        left: x\n    });\n\n    return rect;\n}\n\n/**\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\n *\n * @param {number} x - X coordinate.\n * @param {number} y - Y coordinate.\n * @param {number} width - Rectangle's width.\n * @param {number} height - Rectangle's height.\n * @returns {DOMRectInit}\n */\nfunction createRectInit(x, y, width, height) {\n    return { x: x, y: y, width: width, height: height };\n}\n\n/**\n * Class that is responsible for computations of the content rectangle of\n * provided DOM element and for keeping track of it's changes.\n */\nvar ResizeObservation = function(target) {\n    this.broadcastWidth = 0;\n    this.broadcastHeight = 0;\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n\n    this.target = target;\n};\n\n/**\n * Updates content rectangle and tells whether it's width or height properties\n * have changed since the last broadcast.\n *\n * @returns {boolean}\n */\n\n\n/**\n * Reference to the last observed content rectangle.\n *\n * @private {DOMRectInit}\n */\n\n\n/**\n * Broadcasted width of content rectangle.\n *\n * @type {number}\n */\nResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n\n    this.contentRect_ = rect;\n\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n};\n\n/**\n * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\n * from the corresponding properties of the last observed content rectangle.\n *\n * @returns {DOMRectInit} Last observed content rectangle.\n */\nResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n\n    return rect;\n};\n\nvar ResizeObserverEntry = function(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit);\n\n    // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n    defineConfigurable(this, { target: target, contentRect: contentRect });\n};\n\nvar ResizeObserverSPI = function(callback, controller, callbackCtx) {\n    this.activeObservations_ = [];\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n        throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n};\n\n/**\n * Starts observing provided element.\n *\n * @param {Element} target - Element to be observed.\n * @returns {void}\n */\n\n\n/**\n * Registry of the ResizeObservation instances.\n *\n * @private {Map<Element, ResizeObservation>}\n */\n\n\n/**\n * Public ResizeObserver instance which will be passed to the callback\n * function and used as a value of it's \"this\" binding.\n *\n * @private {ResizeObserver}\n */\n\n/**\n * Collection of resize observations that have detected changes in dimensions\n * of elements.\n *\n * @private {Array<ResizeObservation>}\n */\nResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is already being observed.\n    if (observations.has(target)) {\n        return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n\n    this.controller_.addObserver(this);\n\n    // Force the update of observations.\n    this.controller_.refresh();\n};\n\n/**\n * Stops observing provided element.\n *\n * @param {Element} target - Element to stop observing.\n * @returns {void}\n */\nResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    // Do nothing if current environment doesn't have the Element interface.\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n        return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n        throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_;\n\n    // Do nothing if element is not being observed.\n    if (!observations.has(target)) {\n        return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n        this.controller_.removeObserver(this);\n    }\n};\n\n/**\n * Stops observing all elements.\n *\n * @returns {void}\n */\nResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n};\n\n/**\n * Collects observation instances the associated element of which has changed\n * it's content rectangle.\n *\n * @returns {void}\n */\nResizeObserverSPI.prototype.gatherActive = function () {\n        var this$1 = this;\n\n    this.clearActive();\n\n    this.observations_.forEach(function (observation) {\n        if (observation.isActive()) {\n            this$1.activeObservations_.push(observation);\n        }\n    });\n};\n\n/**\n * Invokes initial callback function with a list of ResizeObserverEntry\n * instances collected from active resize observations.\n *\n * @returns {void}\n */\nResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n        return;\n    }\n\n    var ctx = this.callbackCtx_;\n\n    // Create ResizeObserverEntry instance for every active observation.\n    var entries = this.activeObservations_.map(function (observation) {\n        return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n};\n\n/**\n * Clears the collection of active observations.\n *\n * @returns {void}\n */\nResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n};\n\n/**\n * Tells whether observer has active observations.\n *\n * @returns {boolean}\n */\nResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n};\n\n// Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n\n/**\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\n * exposing only those methods and properties that are defined in the spec.\n */\nvar ResizeObserver = function(callback) {\n    if (!(this instanceof ResizeObserver)) {\n        throw new TypeError('Cannot call a class as a function.');\n    }\n    if (!arguments.length) {\n        throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n\n    observers.set(this, observer);\n};\n\n// Expose public methods of ResizeObserver.\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n    ResizeObserver.prototype[method] = function () {\n        return (ref = observers.get(this))[method].apply(ref, arguments);\n        var ref;\n    };\n});\n\nvar index = (function () {\n    // Export existing implementation if available.\n    if (typeof global$1.ResizeObserver !== 'undefined') {\n        return global$1.ResizeObserver;\n    }\n\n    return ResizeObserver;\n})();\n\nreturn index;\n\n})));\n","import Promise from '../shim/Promise';\nimport Map from '../shim/Map';\nimport { Evented } from '../core/Evented';\n/**\n * Widget base type\n */\nexport const WIDGET_BASE_TYPE = '__widget_base_type';\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor(item) {\n    return Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\nexport function isWidgetFunction(item) {\n    return Boolean(item && item.isWidget);\n}\nexport function isWNodeFactory(node) {\n    if (typeof node === 'function' && node.isFactory) {\n        return true;\n    }\n    return false;\n}\nexport function isWidget(item) {\n    return isWidgetBaseConstructor(item) || isWidgetFunction(item);\n}\nexport function isWidgetConstructorDefaultExport(item) {\n    return Boolean(item &&\n        item.hasOwnProperty('__esModule') &&\n        item.hasOwnProperty('default') &&\n        (isWidget(item.default) || isWNodeFactory(item.default)));\n}\n/**\n * The Registry implementation\n */\nexport class Registry extends Evented {\n    /**\n     * Emit loaded event for registry label\n     */\n    emitLoadedEvent(widgetLabel, item) {\n        this.emit({\n            type: widgetLabel,\n            action: 'loaded',\n            item\n        });\n    }\n    define(label, item) {\n        if (this._widgetRegistry === undefined) {\n            this._widgetRegistry = new Map();\n        }\n        if (this._widgetRegistry.has(label)) {\n            throw new Error(`widget has already been registered for '${label.toString()}'`);\n        }\n        this._widgetRegistry.set(label, item);\n        if (item instanceof Promise) {\n            item.then((widgetCtor) => {\n                this._widgetRegistry.set(label, widgetCtor);\n                this.emitLoadedEvent(label, widgetCtor);\n                return widgetCtor;\n            }, (error) => {\n                throw error;\n            });\n        }\n        else if (isWidgetBaseConstructor(item)) {\n            this.emitLoadedEvent(label, item);\n        }\n    }\n    defineInjector(label, injectorFactory) {\n        if (this._injectorRegistry === undefined) {\n            this._injectorRegistry = new Map();\n        }\n        if (this._injectorRegistry.has(label)) {\n            throw new Error(`injector has already been registered for '${label.toString()}'`);\n        }\n        const invalidator = new Evented();\n        const injectorItem = {\n            injector: injectorFactory(() => invalidator.emit({ type: 'invalidate' })),\n            invalidator\n        };\n        this._injectorRegistry.set(label, injectorItem);\n        this.emitLoadedEvent(label, injectorItem);\n    }\n    get(label) {\n        if (!this._widgetRegistry || !this.has(label)) {\n            return null;\n        }\n        const item = this._widgetRegistry.get(label);\n        if (isWidget(item) || isWNodeFactory(item)) {\n            return item;\n        }\n        if (item instanceof Promise) {\n            return null;\n        }\n        const promise = item();\n        this._widgetRegistry.set(label, promise);\n        promise.then((widgetCtor) => {\n            if (isWidgetConstructorDefaultExport(widgetCtor)) {\n                widgetCtor = widgetCtor.default;\n            }\n            this._widgetRegistry.set(label, widgetCtor);\n            this.emitLoadedEvent(label, widgetCtor);\n            return widgetCtor;\n        }, (error) => {\n            throw error;\n        });\n        return null;\n    }\n    getInjector(label) {\n        if (!this._injectorRegistry || !this.hasInjector(label)) {\n            return null;\n        }\n        return this._injectorRegistry.get(label);\n    }\n    has(label) {\n        return Boolean(this._widgetRegistry && this._widgetRegistry.has(label));\n    }\n    hasInjector(label) {\n        return Boolean(this._injectorRegistry && this._injectorRegistry.has(label));\n    }\n}\nexport default Registry;\n//# sourceMappingURL=Registry.mjs.map","import ResizeObserver from '../../shim/ResizeObserver';\nimport { create, node, destroy } from '../vdom';\nimport { icache } from './icache';\nconst factory = create({ node, destroy, icache });\nexport const resize = factory(({ middleware: { node, destroy, icache } }) => {\n    const keys = [];\n    const handles = [];\n    destroy(() => {\n        let handle;\n        while ((handle = handles.pop())) {\n            handle && handle();\n        }\n    });\n    return {\n        get(key) {\n            const domNode = node.get(key);\n            if (!domNode) {\n                return null;\n            }\n            if (keys.indexOf(key) === -1) {\n                keys.push(key);\n                const resizeObserver = new ResizeObserver(([entry]) => {\n                    icache.set(key, entry.contentRect);\n                });\n                resizeObserver.observe(domNode);\n                handles.push(() => resizeObserver.disconnect());\n            }\n            return icache.get(key) || null;\n        }\n    };\n});\nexport default resize;\n//# sourceMappingURL=resize.mjs.map","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/popup\",\"root\":\"popup-m__root__3WJlO\",\"underlay\":\"popup-m__underlay__2CC_p\"};","import global from './global';\nimport has from '../core/has';\n// !has('build-elide')\nimport * as Resize from 'resize-observer-polyfill';\nimport wrapper from './util/wrapper';\nif (!has('build-elide')) {\n    if (!global.ResizeObserver) {\n        // default is undefined when UMD module is used\n        global.ResizeObserver = Resize.default || Resize;\n    }\n}\nexport default wrapper('ResizeObserver', true);","import global from '../global';\nimport has from '../../core/has';\nexport default function wrapper(nameOnGlobal, constructor = false, bind = false) {\n    if (has('test')) {\n        if (constructor) {\n            return function (...args) {\n                return new global[nameOnGlobal](...args);\n            };\n        }\n        else {\n            return function (...args) {\n                return global[nameOnGlobal](...args);\n            };\n        }\n    }\n    return bind ? global[nameOnGlobal].bind(global) : global[nameOnGlobal];\n}\n//# sourceMappingURL=wrapper.mjs.map","import global from './global';\nvar isArrayLike = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let WeakMap = global.WeakMap;\nif (!true) {\n    const DELETED = {};\n    const getUID = function getUID() {\n        return Math.floor(Math.random() * 100000000);\n    };\n    const generateName = (function () {\n        let startId = Math.floor(Date.now() % 100000000);\n        return function generateName() {\n            return '__wm' + getUID() + (startId++ + '__');\n        };\n    })();\n    WeakMap = global.WeakMap = class WeakMap {\n        constructor(iterable) {\n            this[Symbol.toStringTag] = 'WeakMap';\n            this._name = generateName();\n            this._frozenEntries = [];\n            if (iterable) {\n                if (isArrayLike(iterable)) {\n                    for (let i = 0; i < iterable.length; i++) {\n                        const item = iterable[i];\n                        this.set(item[0], item[1]);\n                    }\n                }\n                else {\n                    for (const [key, value] of iterable) {\n                        this.set(key, value);\n                    }\n                }\n            }\n        }\n        _getFrozenEntryIndex(key) {\n            for (let i = 0; i < this._frozenEntries.length; i++) {\n                if (this._frozenEntries[i].key === key) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        delete(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                entry.value = DELETED;\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                this._frozenEntries.splice(frozenIndex, 1);\n                return true;\n            }\n            return false;\n        }\n        get(key) {\n            if (key === undefined || key === null) {\n                return undefined;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                return entry.value;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return this._frozenEntries[frozenIndex].value;\n            }\n        }\n        has(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (Boolean(entry && entry.key === key && entry.value !== DELETED)) {\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return true;\n            }\n            return false;\n        }\n        set(key, value) {\n            if (!key || (typeof key !== 'object' && typeof key !== 'function')) {\n                throw new TypeError('Invalid value used as weak map key');\n            }\n            let entry = key[this._name];\n            if (!entry || entry.key !== key) {\n                entry = Object.create(null, {\n                    key: { value: key }\n                });\n                if (Object.isFrozen(key)) {\n                    this._frozenEntries.push(entry);\n                }\n                else {\n                    Object.defineProperty(key, this._name, {\n                        value: entry\n                    });\n                }\n            }\n            entry.value = value;\n            return this;\n        }\n    };\n}\nexport default WeakMap;","import { create, destroy } from '@dojo/framework/core/vdom';\nimport global from '@dojo/framework/shim/global';\n\nconst factory = create({ destroy });\nconst bodyStyle = global.document.body.style;\n\nexport const bodyScroll = factory(function bodyScroll({ middleware: { destroy } }) {\n\tlet disabled = false;\n\tlet previousOverflow: string | undefined = undefined;\n\n\tconst enableScroll = () => {\n\t\tif (!disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (previousOverflow) {\n\t\t\tbodyStyle.setProperty('overflow', previousOverflow);\n\t\t} else {\n\t\t\tbodyStyle.removeProperty('overflow');\n\t\t}\n\t\tdisabled = false;\n\t\tpreviousOverflow = undefined;\n\t};\n\n\tconst disableScroll = () => {\n\t\tif (disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tdisabled = true;\n\t\tpreviousOverflow = bodyStyle.getPropertyValue('overflow');\n\t\tbodyStyle.setProperty('overflow', 'hidden');\n\t};\n\n\tdestroy(() => {\n\t\tdisabled && enableScroll();\n\t});\n\n\treturn (enable: boolean) => {\n\t\tenable ? enableScroll() : disableScroll();\n\t};\n});\n\nexport default bodyScroll;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/popup\",\"underlayVisible\":\"popup-m__underlayVisible__1Cxv3\"};","import { dimensions } from '@dojo/framework/core/middleware/dimensions';\nimport { resize } from '@dojo/framework/core/middleware/resize';\nimport { theme } from '@dojo/framework/core/middleware/theme';\nimport { bodyScroll } from '../middleware/bodyScroll';\nimport { create, tsx } from '@dojo/framework/core/vdom';\nimport * as css from '../theme/default/popup.m.css';\nimport * as fixedCss from './popup.m.css';\nimport { RenderResult } from '@dojo/framework/core/interfaces';\n\nexport type PopupPosition = 'above' | 'below';\n\nexport interface BasePopupProperties {\n\t/** Preferred position where the popup should render relative to the provided position (defaults to \"below\"). If the popup does not have room to fully render in the preferred position it will switch to the opposite side. */\n\tposition?: PopupPosition;\n\t/** If the underlay should be visible (defaults to false) */\n\tunderlayVisible?: boolean;\n\t/** Callback triggered when the popup is closed */\n\tonClose?(): void;\n}\n\nexport interface PopupProperties extends BasePopupProperties {\n\t/** The X position on the page where the popup should render */\n\tx: number;\n\t/** The Y position on the page where the bottom of the popup should be if rendering \"above\" */\n\tyBottom: number;\n\t/** The Y position on the page where the popup should start if rendering \"below\" */\n\tyTop: number;\n\t/** Whether the popup is currently open */\n\topen?: boolean;\n}\n\nconst factory = create({ dimensions, theme, bodyScroll, resize })\n\t.properties<PopupProperties>()\n\t.children<RenderResult | undefined>();\n\nexport const Popup = factory(function({\n\tproperties,\n\tchildren,\n\tmiddleware: { dimensions, theme, bodyScroll, resize }\n}) {\n\tconst {\n\t\tunderlayVisible = false,\n\t\tposition = 'below',\n\t\tx,\n\t\tyBottom,\n\t\tyTop,\n\t\tonClose,\n\t\topen\n\t} = properties();\n\n\tresize.get('wrapper');\n\tconst wrapperDimensions = dimensions.get('wrapper');\n\tconst bottomOfVisibleScreen =\n\t\tdocument.documentElement.scrollTop + document.documentElement.clientHeight;\n\tconst topOfVisibleScreen = document.documentElement.scrollTop;\n\n\tconst willFit = {\n\t\tbelow: yTop + wrapperDimensions.size.height <= bottomOfVisibleScreen,\n\t\tabove: yBottom - wrapperDimensions.size.height >= topOfVisibleScreen\n\t};\n\n\tlet wrapperStyles: Partial<CSSStyleDeclaration> = {\n\t\topacity: '0'\n\t};\n\n\tif (wrapperDimensions.size.height) {\n\t\twrapperStyles = {\n\t\t\tleft: `${x}px`,\n\t\t\topacity: '1'\n\t\t};\n\n\t\tif (position === 'below') {\n\t\t\tif (willFit.below) {\n\t\t\t\twrapperStyles.top = `${yTop}px`;\n\t\t\t} else {\n\t\t\t\twrapperStyles.top = `${yBottom - wrapperDimensions.size.height}px`;\n\t\t\t}\n\t\t} else if (position === 'above') {\n\t\t\tif (willFit.above) {\n\t\t\t\twrapperStyles.top = `${yBottom - wrapperDimensions.size.height}px`;\n\t\t\t} else {\n\t\t\t\twrapperStyles.top = `${yTop}px`;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst classes = theme.classes(css);\n\n\tbodyScroll(!open);\n\n\treturn (\n\t\topen && (\n\t\t\t<body>\n\t\t\t\t<div\n\t\t\t\t\tkey=\"underlay\"\n\t\t\t\t\tclasses={[\n\t\t\t\t\t\ttheme.variant(),\n\t\t\t\t\t\tfixedCss.underlay,\n\t\t\t\t\t\tunderlayVisible && classes.underlayVisible\n\t\t\t\t\t]}\n\t\t\t\t\tonclick={onClose}\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tkey=\"wrapper\"\n\t\t\t\t\tclasses={[theme.variant(), fixedCss.root]}\n\t\t\t\t\tstyles={wrapperStyles}\n\t\t\t\t>\n\t\t\t\t\t{children()}\n\t\t\t\t</div>\n\t\t\t</body>\n\t\t)\n\t);\n});\n\nexport default Popup;\n","import global from '../shim/global';\nimport Injector from './Injector';\nimport cssVars from '../shim/cssVariables';\nimport Map from '../shim/Map';\nimport has from './has';\nexport function isVariantModule(variant) {\n    return typeof variant !== 'string';\n}\nexport function isThemeWithVariant(theme) {\n    return theme && theme.hasOwnProperty('variant');\n}\nexport function isThemeWithVariants(theme) {\n    return theme && theme.hasOwnProperty('variants');\n}\nexport function isThemeInjectorPayloadWithVariant(theme) {\n    return !!theme && theme.hasOwnProperty('variant');\n}\nlet processCssVariant = function (_) { };\nif (!true) {\n    const setUpCssVariantSupport = () => {\n        const styleId = '__dojo_processed_styles';\n        const processedCssMap = new Map();\n        let variantStyleElement;\n        function applyStyles(css) {\n            const style = document.createElement('style');\n            style.textContent = css;\n            style.setAttribute('id', styleId);\n            if (variantStyleElement && variantStyleElement.parentNode) {\n                variantStyleElement.parentNode.replaceChild(style, variantStyleElement);\n            }\n            else {\n                global.document.head.appendChild(style);\n            }\n            variantStyleElement = style;\n        }\n        return function processCssVariant(variantName) {\n            const processedCss = processedCssMap.get(variantName);\n            if (processedCss) {\n                applyStyles(processedCss);\n            }\n            else {\n                cssVars({\n                    exclude: `style[id=${styleId}]`,\n                    onSuccess: (css) => {\n                        let temp = css;\n                        let index = temp.indexOf(variantName);\n                        let variantCss = '';\n                        while (index !== -1) {\n                            temp = temp.substring(index + variantName.length);\n                            const match = temp.match(/\\{([^}]+)\\}/);\n                            if (match) {\n                                if (variantCss) {\n                                    variantCss = `${variantCss.substring(0, variantCss.length - 1)}${match[0].substring(1)}`;\n                                }\n                                else {\n                                    variantCss = match[0];\n                                }\n                            }\n                            index = temp.indexOf(variantName);\n                        }\n                        if (variantCss) {\n                            css = `:root ${variantCss}${css}`;\n                        }\n                        return css;\n                    },\n                    onComplete: (css) => {\n                        processedCssMap.set(variantName, css);\n                        applyStyles(css);\n                    },\n                    updateDOM: false,\n                    silent: true\n                });\n            }\n        };\n    };\n    processCssVariant = setUpCssVariantSupport();\n}\nfunction createThemeInjectorPayload(theme, variant) {\n    if (isThemeWithVariant(theme)) {\n        if (typeof theme.variant === 'string') {\n            return {\n                theme: theme.theme,\n                variant: { name: theme.variant, value: theme.theme.variants[theme.variant] }\n            };\n        }\n        return { theme: theme.theme, variant: theme.variant };\n    }\n    else if (isThemeWithVariants(theme)) {\n        variant = variant || 'default';\n        if (isVariantModule(variant)) {\n            if (!true) {\n                processCssVariant(variant.value.root);\n            }\n            return { theme, variant };\n        }\n        if (!true) {\n            processCssVariant(theme.variants[variant].root);\n        }\n        return { theme: theme, variant: { name: variant, value: theme.variants[variant] } };\n    }\n    return { theme };\n}\nexport class ThemeInjector extends Injector {\n    constructor(theme) {\n        super(theme ? createThemeInjectorPayload(theme) : theme);\n    }\n    set(theme, variant) {\n        super.set(createThemeInjectorPayload(theme, variant));\n    }\n    get() {\n        return super.get();\n    }\n}\nexport default ThemeInjector;\n//# sourceMappingURL=ThemeInjector.mjs.map","/**\n * Helper function to generate a value property descriptor\n *\n * @param value        The value the property descriptor should be set to\n * @param enumerable   If the property should be enumberable, defaults to false\n * @param writable     If the property should be writable, defaults to true\n * @param configurable If the property should be configurable, defaults to true\n * @return             The property descriptor object\n */\nexport function getValueDescriptor(value, enumerable = false, writable = true, configurable = true) {\n    return {\n        value: value,\n        enumerable: enumerable,\n        writable: writable,\n        configurable: configurable\n    };\n}\nexport function wrapNative(nativeFunction) {\n    return function (target, ...args) {\n        return nativeFunction.apply(target, args);\n    };\n}\n//# sourceMappingURL=util.mjs.map","var _a;\nimport global from './global';\nvar queueMicroTask = undefined;\n// !has('microtasks')\n// elided: import './support/queue'\n// !has('es6-symbol')\n// elided: import './Symbol'\nimport has from '../core/has';\nexport let ShimPromise = global.Promise;\nexport const isThenable = function isThenable(value) {\n    return value && typeof value.then === 'function';\n};\nif (!true) {\n    global.Promise = ShimPromise = (_a = class Promise {\n            /**\n             * Creates a new Promise.\n             *\n             * @constructor\n             *\n             * @param executor\n             * The executor function is called immediately when the Promise is instantiated. It is responsible for\n             * starting the asynchronous operation when it is invoked.\n             *\n             * The executor must call either the passed `resolve` function when the asynchronous operation has completed\n             * successfully, or the `reject` function when the operation fails.\n             */\n            constructor(executor) {\n                /**\n                 * The current state of this promise.\n                 */\n                this.state = 1 /* Pending */;\n                this[Symbol.toStringTag] = 'Promise';\n                /**\n                 * If true, the resolution of this promise is chained (\"locked in\") to another promise.\n                 */\n                let isChained = false;\n                /**\n                 * Whether or not this promise is in a resolved state.\n                 */\n                const isResolved = () => {\n                    return this.state !== 1 /* Pending */ || isChained;\n                };\n                /**\n                 * Callbacks that should be invoked once the asynchronous operation has completed.\n                 */\n                let callbacks = [];\n                /**\n                 * Initially pushes callbacks onto a queue for execution once this promise settles. After the promise settles,\n                 * enqueues callbacks for execution on the next event loop turn.\n                 */\n                let whenFinished = function (callback) {\n                    if (callbacks) {\n                        callbacks.push(callback);\n                    }\n                };\n                /**\n                 * Settles this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const settle = (newState, value) => {\n                    // A promise can only be settled once.\n                    if (this.state !== 1 /* Pending */) {\n                        return;\n                    }\n                    this.state = newState;\n                    this.resolvedValue = value;\n                    whenFinished = queueMicroTask;\n                    // Only enqueue a callback runner if there are callbacks so that initially fulfilled Promises don't have to\n                    // wait an extra turn.\n                    if (callbacks && callbacks.length > 0) {\n                        queueMicroTask(function () {\n                            if (callbacks) {\n                                let count = callbacks.length;\n                                for (let i = 0; i < count; ++i) {\n                                    callbacks[i].call(null);\n                                }\n                                callbacks = null;\n                            }\n                        });\n                    }\n                };\n                /**\n                 * Resolves this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const resolve = (newState, value) => {\n                    if (isResolved()) {\n                        return;\n                    }\n                    if (isThenable(value)) {\n                        value.then(settle.bind(null, 0 /* Fulfilled */), settle.bind(null, 2 /* Rejected */));\n                        isChained = true;\n                    }\n                    else {\n                        settle(newState, value);\n                    }\n                };\n                this.then = (onFulfilled, onRejected) => {\n                    return new Promise((resolve, reject) => {\n                        // whenFinished initially queues up callbacks for execution after the promise has settled. Once the\n                        // promise has settled, whenFinished will schedule callbacks for execution on the next turn through the\n                        // event loop.\n                        whenFinished(() => {\n                            const callback = this.state === 2 /* Rejected */ ? onRejected : onFulfilled;\n                            if (typeof callback === 'function') {\n                                try {\n                                    resolve(callback(this.resolvedValue));\n                                }\n                                catch (error) {\n                                    reject(error);\n                                }\n                            }\n                            else if (this.state === 2 /* Rejected */) {\n                                reject(this.resolvedValue);\n                            }\n                            else {\n                                resolve(this.resolvedValue);\n                            }\n                        });\n                    });\n                };\n                try {\n                    executor(resolve.bind(null, 0 /* Fulfilled */), resolve.bind(null, 2 /* Rejected */));\n                }\n                catch (error) {\n                    settle(2 /* Rejected */, error);\n                }\n            }\n            static all(iterable) {\n                return new this(function (resolve, reject) {\n                    const values = [];\n                    let complete = 0;\n                    let total = 0;\n                    let populating = true;\n                    function fulfill(index, value) {\n                        values[index] = value;\n                        ++complete;\n                        finish();\n                    }\n                    function finish() {\n                        if (populating || complete < total) {\n                            return;\n                        }\n                        resolve(values);\n                    }\n                    function processItem(index, item) {\n                        ++total;\n                        if (isThenable(item)) {\n                            // If an item Promise rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(fulfill.bind(null, index), reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(fulfill.bind(null, index));\n                        }\n                    }\n                    let i = 0;\n                    for (const value of iterable) {\n                        processItem(i, value);\n                        i++;\n                    }\n                    populating = false;\n                    finish();\n                });\n            }\n            static race(iterable) {\n                return new this(function (resolve, reject) {\n                    for (const item of iterable) {\n                        if (item instanceof Promise) {\n                            // If a Promise item rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(resolve, reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(resolve);\n                        }\n                    }\n                });\n            }\n            static reject(reason) {\n                return new this(function (resolve, reject) {\n                    reject(reason);\n                });\n            }\n            static resolve(value) {\n                return new this(function (resolve) {\n                    resolve(value);\n                });\n            }\n            catch(onRejected) {\n                return this.then(undefined, onRejected);\n            }\n        },\n        _a[Symbol.species] = ShimPromise,\n        _a);\n    // this cast is needed in order to omit finally in the class declaration; this was done so the finally code\n    // is not duplicated and always added in the conditional below\n}\nif (!has('es2018-promise-finally')) {\n    global.Promise.prototype.finally = function (onFinally) {\n        return this.then(onFinally && ((value) => Promise.resolve(onFinally()).then(() => value)), onFinally &&\n            ((reason) => Promise.resolve(onFinally()).then(() => {\n                throw reason;\n            })));\n    };\n}\nexport default ShimPromise;","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/context-popup\",\"trigger\":\"context-popup-m__trigger__3A_JZ\"};","import Map from '../shim/Map';\nimport { Destroyable } from './Destroyable';\n/**\n * Map of computed regular expressions, keyed by string\n */\nconst regexMap = new Map();\n/**\n * Determines if the event type glob has been matched\n *\n * @returns boolean that indicates if the glob is matched\n */\nexport function isGlobMatch(globString, targetString) {\n    if (typeof targetString === 'string' && typeof globString === 'string' && globString.indexOf('*') !== -1) {\n        let regex;\n        if (regexMap.has(globString)) {\n            regex = regexMap.get(globString);\n        }\n        else {\n            regex = new RegExp(`^${globString.replace(/\\*/g, '.*')}$`);\n            regexMap.set(globString, regex);\n        }\n        return regex.test(targetString);\n    }\n    else {\n        return globString === targetString;\n    }\n}\n/**\n * Event Class\n */\nexport class Evented extends Destroyable {\n    constructor() {\n        super(...arguments);\n        /**\n         * map of listeners keyed by event type\n         */\n        this.listenersMap = new Map();\n    }\n    emit(event) {\n        this.listenersMap.forEach((methods, type) => {\n            if (isGlobMatch(type, event.type)) {\n                [...methods].forEach((method) => {\n                    method.call(this, event);\n                });\n            }\n        });\n    }\n    on(type, listener) {\n        if (Array.isArray(listener)) {\n            const handles = listener.map((listener) => this._addListener(type, listener));\n            return {\n                destroy() {\n                    handles.forEach((handle) => handle.destroy());\n                }\n            };\n        }\n        return this._addListener(type, listener);\n    }\n    _addListener(type, listener) {\n        const listeners = this.listenersMap.get(type) || [];\n        listeners.push(listener);\n        this.listenersMap.set(type, listeners);\n        return {\n            destroy: () => {\n                const listeners = this.listenersMap.get(type) || [];\n                listeners.splice(listeners.indexOf(listener), 1);\n            }\n        };\n    }\n}\nexport default Evented;\n//# sourceMappingURL=Evented.mjs.map"],"sourceRoot":""}