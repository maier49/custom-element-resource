{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@dojo/framework/shim/global.mjs","webpack:///./node_modules/@dojo/framework/core/vdom.mjs","webpack:///./node_modules/@dojo/framework/shim/support/util.mjs","webpack:///./node_modules/@dojo/framework/core/Evented.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/icache.mjs","webpack:///./node_modules/@dojo/framework/shim/array.mjs","webpack:///./src/common/util.ts","webpack:///./node_modules/@dojo/framework/core/RegistryHandler.mjs","webpack:///./src/middleware/theme.tsx","webpack:///./node_modules/@dojo/cli-build-widget/template/custom-element.js?c86b","webpack:///./node_modules/@dojo/framework/core/middleware/theme.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/resources.mjs","webpack:///./node_modules/@dojo/framework/core/Injector.mjs","webpack:///./node_modules/@dojo/framework/shim/Map.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/injector.mjs","webpack:///./node_modules/@dojo/framework/core/Destroyable.mjs","webpack:///./node_modules/@dojo/framework/core/middleware/focus.mjs","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@dojo/framework/shim/object.mjs","webpack:///./node_modules/@dojo/framework/core/registerCustomElement.mjs","webpack:///./node_modules/@dojo/framework/core/has.mjs","webpack:///./node_modules/@dojo/framework/core/Registry.mjs","webpack:///./node_modules/@dojo/framework/shim/Set.mjs","webpack:///./node_modules/@dojo/framework/shim/WeakMap.mjs","webpack:///./src/theme/default/button.m.css","webpack:///./src/button/index.tsx","webpack:///./node_modules/@dojo/framework/core/ThemeInjector.mjs","webpack:///./node_modules/@dojo/framework/shim/Promise.mjs","webpack:///./node_modules/@dojo/framework/core/diff.mjs"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","globalObject","window","navigator","userAgent","indexOf","globalThis","self","__webpack_exports__","isTextNode","isWNode","isVNode","w","v","dom","tsx","widgetInstanceMap","invalidator","node","diffProperty","destroy","getRegistry","renderer","_shim_global__WEBPACK_IMPORTED_MODULE_0__","_core_has__WEBPACK_IMPORTED_MODULE_1__","_shim_WeakMap__WEBPACK_IMPORTED_MODULE_2__","_shim_Set__WEBPACK_IMPORTED_MODULE_3__","_shim_Map__WEBPACK_IMPORTED_MODULE_4__","_shim_array__WEBPACK_IMPORTED_MODULE_5__","_Registry__WEBPACK_IMPORTED_MODULE_6__","_diff__WEBPACK_IMPORTED_MODULE_7__","_RegistryHandler__WEBPACK_IMPORTED_MODULE_8__","__rest","e","getOwnPropertySymbols","length","EMPTY_ARRAY","nodeOperations","NAMESPACE_SVG","NAMESPACE_W3","NAMESPACE_XLINK","WNODE","VNODE","DOMVNODE","scope","__DOJO_SCOPE","setRendering","rendering","item","nodeType","isWNodeWrapper","child","isVNodeWrapper","isVirtualWrapper","tag","isBodyWrapper","wrapper","isHeadWrapper","isSpecialWrapper","Boolean","type","isDomVNode","isElementNode","tagName","widgetConstructorOrNode","properties","children","__children__","assign","widgetConstructor","propertiesOrChildren","deferredPropertiesCallback","Array","isArray","classes","styles","newProperties","_a","nodeClasses","nodeStyles","nodeProperties","attrs","props","on","diffType","onAttach","toLowerCase","attributes","events","domNode","text","undefined","data","REGISTRY_ITEM","FromRegistry","[object Object]","this","__properties__","Infinity","__autoRegistryItem","buildPreviousProperties","current","deferredProperties","keys","forEach","propName","attrName","getAttribute","reduce","same","dnode1","dnode2","widgetConstructor1","registryItem","widgetConstructor2","props1","props2","instance","every","findIndexOfChild","sameAs","start","createClassPropValue","classNames","className","updateAttribute","attrValue","namespace","setAttributeNS","removeAttribute","setAttribute","arrayFrom","arr","slice","createFactory","callback","middlewares","factory","result","isWidget","middlewareName","middleware","hasResource","isFactory","returns","widgetMetaMap","requestedDomNodes","wrapperId","metaId","addNodeToMap","id","widgetMeta","nodeMap","set","has","delete","destroyHandles","meta","destroyMap","middlewareIds","size","clear","widgetId","split","mountNode","contains","document","body","add","propertyName","propertiesOrDiff","diff","customDiffMap","customDiffProperties","propertyDiffMap","originalProperties","propertiesCalled","console","warn","widgetName","destroyFunction","registryHandler","base","registry","isDeferred","deferRefs","wrapFunctionProperties","propertyNames","args","unwrap","_renderScheduled","parentInvalidate","_appWrapperId","_mountOptions","sync","merge","transition","_invalidationQueue","_processQueue","_deferredProcessQueue","_applicationQueue","_eventMap","_idToWrapperMap","_wrapperSiblingMap","_idToChildrenWrappers","_insertBeforeMap","_nodeToWrapperMap","_deferredRenderCallbacks","_allMergedNodes","_deferredProcessIds","nodeOperation","propValue","previousValue","push","updateEvent","eventName","currentValue","previousEvent","removeEventListener","evt","target","addEventListener","removeOrphanedEvents","previousProperties","onlyEvents","isEvent","substr","eventCallback","resolveRegistryItem","owningNode","instanceData","registryLabel","label","isLazyDefine","define","renderedToWrapper","rendered","parent","currentParent","requiresInsertBefore","hasPreviousSiblings","depth","wrappedRendered","hasParentWNode","hasVirtualParentNode","hasCurrentParentChildren","insertBefore","previousItem","nodes","pop","mapNodeToInstance","renderedItem","order","parentId","exitAnimation","hasAnimations","nextParent","owningId","runDeferredProperties","next","processProperties","findInsertBefore","searchNode","nextSibling","childDomWrapperId","findDomNodeOnParentWrapper","childWrapper","parentNode","setValue","domValue","onInputValue","onSelectValue","setProperties","currentProperties","nextWrapper","includesEventsAndAttributes","propNames","propCount","previousClassString","currentClassString","merged","domClasses","styleNames","styleCount","j","styleName","newStyleValue","style","lastIndexOf","_createDeferredRenderCallback","callbacks","shift","_scheduleDeferredRenderCallbacks","run","requestAnimationFrame","previousAttributes","attrNames","attrCount","updateAttributes","event","_schedule","_runInvalidationQueue","getWNodeWrapper","invalidationQueue","previouslyRendered","sort","a","b","_runProcessQueue","sibling","_updateWidget","_runDomInstructionQueue","_cleanUpMergedNodes","mergedNode","removeChild","_process","reverse","parentDomNode","parentElement","enterAnimation","enterAnimationActive","enter","owningWrapper","nodeHandler","inserted","currentDomNode","replaceChild","exitAnimationActive","exit","attached","addRoot","onDetach","distinguishableCheck","childNodes","index","wrappers","parentWNodeWrapper","wrapperToCheck","parentName","nodeIdentifier","checkDistinguishable","createKeyMap","mergeNodes","oldIndex","newIndex","currentLength","nextLength","instructions","replace","currentKeys","nextKeys","currentWrapper","domElement","toUpperCase","mergeNodeIndex","splice","_processMergeNodes","_processOne","widget","currentNode","parentWrapper","findParentDomNode","isVirtual","isBody","isHead","createTextNode","head","createElementNS","createElement","_createDom","invalidate","Constructor","dirty","__setProperties__","__setChildren__","__render__","ids","resolveMiddleware","results","uniqueId","payload","createWidgetOptions","resolvedMiddleware","_createWidget","currentChildren","_updateDom","isSpecial","remove","specialIds","wrapperChildren","_removeDom","processResult","_removeWidget","didRender","customProperties","diffMap","runDiffs","ignoreProperties","changed","propertiesDiff","values","childId","mount","mountOptions","renderResult","wrapNodes","siblingId","unmount","cancelAnimationFrame","wrapNative","nativeFunction","apply","Evented","_shim_Map__WEBPACK_IMPORTED_MODULE_0__","_Destroyable__WEBPACK_IMPORTED_MODULE_1__","regexMap","super","arguments","listenersMap","methods","globString","targetString","regex","RegExp","test","isGlobMatch","method","listener","handles","map","_addListener","handle","listeners","createICacheMiddleware","icache","_vdom__WEBPACK_IMPORTED_MODULE_1__","cacheMap","api","cachedValue","status","then","getOrSet","from","findIndex","flat","_support_util__WEBPACK_IMPORTED_MODULE_1__","of","copyWithin","fill","find","includes","flatMap","Keys","formatAriaProperties","isRenderResult","_dojo_framework_core_vdom__WEBPACK_IMPORTED_MODULE_0__","aria","childIsRenderResult","_core_Evented__WEBPACK_IMPORTED_MODULE_1__","_Registry__WEBPACK_IMPORTED_MODULE_2__","_registry","_registryWidgetLabelMap","_registryInjectorLabelMap","own","baseRegistry","injector","defineInjector","hasInjector","globalPrecedence","_get","getFunctionName","labelMap","registries","registeredLabels","action","emit","theme","_dojo_framework_core_middleware_theme__WEBPACK_IMPORTED_MODULE_1__","_dojo_framework_core_ThemeInjector__WEBPACK_IMPORTED_MODULE_2__","coreTheme","uppercaseFirstChar","charAt","isThemeWithVariant","compose","baseCss","css","prefix","themePayload","variant","getTheme","baseKey","variantKey","virtualCss"," _key","virtualTheme","variantTheme","baseTheme","prefixedCss","prefixCss","classKey","lowercaseFirstChar","trim","variants","constructedTheme","variantComposesClass","widgetFactory","registerCustomElement","default","defaultExport","_vdom__WEBPACK_IMPORTED_MODULE_0__","_icache__WEBPACK_IMPORTED_MODULE_1__","_injector__WEBPACK_IMPORTED_MODULE_2__","_diff__WEBPACK_IMPORTED_MODULE_4__","_ThemeInjector__WEBPACK_IMPORTED_MODULE_5__","INJECTED_THEME_KEY","themeKeys","themeInjector","themeRegistry","setInvalidator","registerThemeInjector","subscribe","cachedTheme","currentClasses","currentTheme","classKeys","join","root","createMemoryResourceTemplate","createResourceMiddleware","_shim_Set__WEBPACK_IMPORTED_MODULE_1__","_vdom__WEBPACK_IMPORTED_MODULE_2__","_shim_Promise__WEBPACK_IMPORTED_MODULE_3__","memoryTemplate","defaultFilter","query","queryKeys","queryKey","freeze","init","put","total","offset","read","request","filteredData","filter","options","found","getMetaKey","JSON","stringify","getFindKey","findOptions","getFindOptions","getReadKey","page","getDataKey","isFindOptions","isFindRequest","isFindResponse","transformData","transformConfig","transformedItem","sourceKeys","sourceKey","transformQuery","transformedQuery","transformOptions","isTemplateWithInit","diffInitOptions","some","initKey","createResource","template","initOptions","dataMap","metaMap","statusMap","findMap","requestPageMap","invalidatorMaps","failed","loading","dataKey","response","cachedData","maxItem","clearStatus","Math","floor","setMeta","setData","pageIndex","setFind","invalidatorSet","keyedInvalidatorMap","releaseResource","isStatus","statusType","setStatus","isLoading","isFailed","metaKey","getCachedPageData","requestedPages","requestedCachedData","getOrRead","pages","getOrReadResponse","requestKey","promises","statusKey","catch","Promise","all","requireDiff","reset","subscribeMeta","subscribeRead","subscribeFind","subscribeFailed","subscribeLoading","unsubscribe","resourceMap","templateToResourceMap","optionInvalidatorMap","idToResourceMap","createOptionsWrapper","setOptions","newOptions","calculatedOptions","isTemplate","isResource","getResource","templateOrWrapper","templateId","resource","registeredResources","ownerId","substring","isOwner","ownerResources","middlewareId","optionsMap","resources","currentInitOptions","nextInitOptions","nextOptions","currOptions","transform","rest","createOptions","optionsWrapper","resourceOptions","items","Injector","_core_Evented__WEBPACK_IMPORTED_MODULE_0__","_payload","_invalidator","Map","_global__WEBPACK_IMPORTED_MODULE_0__","injectorFactory","getInjector","Destroyable","_shim_Promise__WEBPACK_IMPORTED_MODULE_0__","noop","resolve","destroyed","Error","_handles","focus","_icache__WEBPACK_IMPORTED_MODULE_2__","currentElement","initialized","previous","nodeSet","Set","onFocusChange","activeElement","_","shouldFocus","g","Function","eval","getOwnPropertyDescriptor","getOwnPropertyNames","is","getOwnPropertyDescriptors","entries","CustomElementChildType","DomToWidgetWrapper","register","_Registry__WEBPACK_IMPORTED_MODULE_0__","_shim_array__WEBPACK_IMPORTED_MODULE_2__","_shim_global__WEBPACK_IMPORTED_MODULE_3__","_ThemeInjector__WEBPACK_IMPORTED_MODULE_4__","_middleware_resources__WEBPACK_IMPORTED_MODULE_5__","RESERVED_PROPS","wrappedWNode","setTimeout","dispatchEvent","CustomEvent","bubbles","detail","wrappedDomNode","descriptor","WidgetConstructor","registryFactory","attributeMap","attributeName","HTMLElement","_properties","_children","_eventProperties","_propertiesMap","_initialised","_childType","childType","_waitTillReady","readyState","element","_hasBeenParsed","_readyCallback","domProperties","_propertiesWithAttributes","_attributesToProperties","resourceProps","useResource","resourceProp","dojoResourceTemplate","resourcePropertyName","_getProperty","_setProperty","isReservedProp","filteredPropertyName","_getEventProperty","_setEventProperty","defineProperties","childNode","isElement","isDojoChild","DOJO","NODE","_render","_childConnected","widgetProperties","renderChildren","Wrapper","dojoResourceOptions","dojoResourceTransform","dojoResourceId","dojoResourceInitOptions","childProperties","_resource","themeContext","_getVariant","_getTheme","_renderer","display","getComputedStyle","dojoce","themes","slots","slotName","slotResult","existingSlotValue","Child","oldValue","parsedValue","parse","observedAttributes","__customElementDescriptor","customElements","testCache","testFunctions","staticFeatures","DojoHasEnvironment","staticCache","feature","overwrite","normalizedFeature","exists","TypeError","strict","finally","Animation","KeyframeEffect","AbortController","AbortSignal","IntersectionObserver","ResizeObserver","onpointerdown","Element","WIDGET_BASE_TYPE","isWidgetBaseConstructor","isWidgetFunction","isWNodeFactory","Registry","_shim_Map__WEBPACK_IMPORTED_MODULE_1__","_core_Evented__WEBPACK_IMPORTED_MODULE_2__","_type","widgetLabel","_widgetRegistry","toString","widgetCtor","emitLoadedEvent","error","_injectorRegistry","injectorItem","promise","isWidgetConstructorDefaultExport","WeakMap","pressed","popup","disabled","Button","_dojo_framework_core_middleware_focus__WEBPACK_IMPORTED_MODULE_0__","_dojo_framework_core_vdom__WEBPACK_IMPORTED_MODULE_1__","_common_util__WEBPACK_IMPORTED_MODULE_2__","_middleware_theme__WEBPACK_IMPORTED_MODULE_3__","_theme_default_button_m_css__WEBPACK_IMPORTED_MODULE_4__","onClick","onOut","onOver","onDown","onUp","onBlur","onFocus","title","themeCss","idBase","onblur","onclick","stopPropagation","onfocus","onpointerenter","onpointerleave","onpointerup","aria-pressed","isThemeWithVariants","isThemeInjectorPayloadWithVariant","ThemeInjector_ThemeInjector","createThemeInjectorPayload","isVariantModule","isThenable","ShimPromise","onFinally","reason","reference","shallow","auto","isObjectOrArray","previousProperty","newProperty","validOldProperty","validNewProperty","previousKeys","newKeys","ignore"],"mappings":"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","file":"button-7.0.2-pre.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 163);\n","const globalObject = (function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof window !== 'undefined' && window.navigator.userAgent.indexOf('jsdom') > -1) {\n        return window;\n    }\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n})();\nexport default globalObject;\n//# sourceMappingURL=global.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport global from '../shim/global';\nimport has from '../core/has';\nimport WeakMap from '../shim/WeakMap';\nimport Set from '../shim/Set';\nimport Map from '../shim/Map';\nimport { flat } from '../shim/array';\nimport { Registry, isWidget, isWidgetBaseConstructor, isWidgetFunction, isWNodeFactory } from './Registry';\nimport { auto } from './diff';\nimport RegistryHandler from './RegistryHandler';\nconst EMPTY_ARRAY = [];\nconst nodeOperations = ['focus', 'blur', 'scrollIntoView', 'click'];\nconst NAMESPACE_W3 = 'http://www.w3.org/';\nconst NAMESPACE_SVG = NAMESPACE_W3 + '2000/svg';\nconst NAMESPACE_XLINK = NAMESPACE_W3 + '1999/xlink';\nconst WNODE = '__WNODE_TYPE';\nconst VNODE = '__VNODE_TYPE';\nconst DOMVNODE = '__DOMVNODE_TYPE';\n// @ts-ignore\nconst scope = typeof __DOJO_SCOPE === 'string' ? __DOJO_SCOPE : 'dojo_scope';\nif (!global[scope]) {\n    global[scope] = {};\n}\nexport function setRendering(value) {\n    global[scope].rendering = value;\n}\nexport function incrementBlockCount() {\n    const blocksPending = global[scope].blocksPending || 0;\n    global[scope].blocksPending = blocksPending + 1;\n}\nexport function decrementBlockCount() {\n    const blocksPending = global[scope].blocksPending || 0;\n    global[scope].blocksPending = blocksPending - 1;\n}\nexport function isTextNode(item) {\n    return item && item.nodeType === 3;\n}\nfunction isLazyDefine(item) {\n    return Boolean(item && item.label);\n}\nfunction isWNodeWrapper(child) {\n    return child && isWNode(child.node);\n}\nfunction isVNodeWrapper(child) {\n    return !!child && isVNode(child.node);\n}\nfunction isVirtualWrapper(child) {\n    return isVNodeWrapper(child) && child.node.tag === 'virtual';\n}\nfunction isBodyWrapper(wrapper) {\n    return isVNodeWrapper(wrapper) && wrapper.node.tag === 'body';\n}\nfunction isHeadWrapper(wrapper) {\n    return isVNodeWrapper(wrapper) && wrapper.node.tag === 'head';\n}\nfunction isSpecialWrapper(wrapper) {\n    return isHeadWrapper(wrapper) || isBodyWrapper(wrapper) || isVirtualWrapper(wrapper);\n}\nfunction isAttachApplication(value) {\n    return !!value.type;\n}\nexport function isWNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'string' && child.type === WNODE);\n}\nexport function isVNode(child) {\n    return Boolean(child &&\n        child !== true &&\n        typeof child !== 'number' &&\n        typeof child !== 'string' &&\n        (child.type === VNODE || child.type === DOMVNODE));\n}\nexport function isDomVNode(child) {\n    return Boolean(child && child !== true && typeof child !== 'number' && typeof child !== 'string' && child.type === DOMVNODE);\n}\nexport function isElementNode(value) {\n    return !!value.tagName;\n}\nfunction toTextVNode(data) {\n    return {\n        tag: '',\n        properties: {},\n        children: undefined,\n        text: `${data}`,\n        type: VNODE\n    };\n}\nfunction updateAttributes(domNode, previousAttributes, attributes, namespace) {\n    const attrNames = Object.keys(attributes);\n    const attrCount = attrNames.length;\n    for (let i = 0; i < attrCount; i++) {\n        const attrName = attrNames[i];\n        const attrValue = attributes[attrName];\n        const previousAttrValue = previousAttributes[attrName];\n        if (attrValue !== previousAttrValue) {\n            updateAttribute(domNode, attrName, attrValue, namespace);\n        }\n    }\n}\nexport function w(widgetConstructorOrNode, properties, children) {\n    if (properties.__children__) {\n        delete properties.__children__;\n    }\n    if (isWNodeFactory(widgetConstructorOrNode)) {\n        return widgetConstructorOrNode(properties, children);\n    }\n    if (isWNode(widgetConstructorOrNode)) {\n        properties = Object.assign({}, widgetConstructorOrNode.properties, properties);\n        children = children ? children : widgetConstructorOrNode.children;\n        widgetConstructorOrNode = widgetConstructorOrNode.widgetConstructor;\n    }\n    return {\n        children: children || [],\n        widgetConstructor: widgetConstructorOrNode,\n        properties,\n        type: WNODE\n    };\n}\nexport function v(tag, propertiesOrChildren = {}, children = undefined) {\n    let properties = propertiesOrChildren;\n    let deferredPropertiesCallback;\n    if (typeof tag.tag === 'function') {\n        return tag.tag(properties, children);\n    }\n    if (Array.isArray(propertiesOrChildren)) {\n        children = propertiesOrChildren;\n        properties = {};\n    }\n    if (typeof properties === 'function') {\n        deferredPropertiesCallback = properties;\n        properties = {};\n    }\n    if (isVNode(tag)) {\n        let { classes = [], styles = {} } = properties, newProperties = __rest(properties, [\"classes\", \"styles\"]);\n        let _a = tag.properties, { classes: nodeClasses = [], styles: nodeStyles = {} } = _a, nodeProperties = __rest(_a, [\"classes\", \"styles\"]);\n        nodeClasses = Array.isArray(nodeClasses) ? nodeClasses : [nodeClasses];\n        classes = Array.isArray(classes) ? classes : [classes];\n        styles = Object.assign({}, nodeStyles, styles);\n        properties = Object.assign({}, nodeProperties, newProperties, { classes: [...nodeClasses, ...classes], styles });\n        children = children ? children : tag.children;\n        tag = tag.tag;\n    }\n    return {\n        tag,\n        deferredPropertiesCallback,\n        children,\n        properties,\n        type: VNODE\n    };\n}\n/**\n * Create a VNode for an existing DOM Node.\n */\nexport function dom({ node, attrs = {}, props = {}, on = {}, diffType = 'none', onAttach }, children) {\n    return {\n        tag: isElementNode(node) ? node.tagName.toLowerCase() : '',\n        properties: props,\n        attributes: attrs,\n        events: on,\n        children,\n        type: DOMVNODE,\n        domNode: node,\n        text: isElementNode(node) ? undefined : node.data,\n        diffType,\n        onAttach\n    };\n}\nexport const REGISTRY_ITEM = '__registry_item';\nexport class FromRegistry {\n    constructor() {\n        /* tslint:disable-next-line:variable-name */\n        this.__properties__ = {};\n    }\n}\nFromRegistry.type = REGISTRY_ITEM;\nexport function fromRegistry(tag) {\n    var _a;\n    return _a = class extends FromRegistry {\n            constructor() {\n                super(...arguments);\n                this.properties = {};\n                this.name = tag;\n            }\n        },\n        _a.type = REGISTRY_ITEM,\n        _a;\n}\nexport function tsx(tag, properties = {}, ...children) {\n    children = flat(children, Infinity);\n    properties = properties === null ? {} : properties;\n    if (typeof tag === 'string') {\n        return v(tag, properties, children);\n    }\n    else if (tag.type === 'registry' && properties.__autoRegistryItem) {\n        const name = properties.__autoRegistryItem;\n        delete properties.__autoRegistryItem;\n        return w(name, properties, children);\n    }\n    else if (tag.type === REGISTRY_ITEM) {\n        const registryItem = new tag();\n        return w(registryItem.name, properties, children);\n    }\n    else {\n        return w(tag, properties, children);\n    }\n}\nexport function propertiesDiff(current, next, invalidator, ignoreProperties) {\n    const propertyNames = [...Object.keys(current), ...Object.keys(next)];\n    for (let i = 0; i < propertyNames.length; i++) {\n        if (ignoreProperties.indexOf(propertyNames[i]) > -1) {\n            continue;\n        }\n        const result = auto(current[propertyNames[i]], next[propertyNames[i]]);\n        if (result.changed) {\n            invalidator();\n            break;\n        }\n        ignoreProperties.push(propertyNames[i]);\n    }\n}\nfunction buildPreviousProperties(domNode, current) {\n    const { node: { diffType, properties, attributes } } = current;\n    if (!diffType || diffType === 'vdom') {\n        return {\n            properties: current.deferredProperties\n                ? Object.assign({}, current.deferredProperties, current.node.properties) : current.node.properties,\n            attributes: current.node.attributes,\n            events: current.node.events\n        };\n    }\n    else if (diffType === 'none') {\n        return {\n            properties: {},\n            attributes: current.node.attributes ? {} : undefined,\n            events: current.node.events\n        };\n    }\n    let newProperties = {\n        properties: {}\n    };\n    if (attributes) {\n        newProperties.attributes = {};\n        newProperties.events = current.node.events;\n        Object.keys(properties).forEach((propName) => {\n            newProperties.properties[propName] = domNode[propName];\n        });\n        Object.keys(attributes).forEach((attrName) => {\n            newProperties.attributes[attrName] = domNode.getAttribute(attrName);\n        });\n        return newProperties;\n    }\n    newProperties.properties = Object.keys(properties).reduce((props, property) => {\n        props[property] = domNode.getAttribute(property) || domNode[property];\n        return props;\n    }, {});\n    return newProperties;\n}\nfunction checkDistinguishable(wrappers, index, parentWNodeWrapper) {\n    const wrapperToCheck = wrappers[index];\n    if (isVNodeWrapper(wrapperToCheck) && !wrapperToCheck.node.tag) {\n        return;\n    }\n    const { key } = wrapperToCheck.node.properties;\n    let parentName = 'unknown';\n    if (parentWNodeWrapper) {\n        const { node: { widgetConstructor } } = parentWNodeWrapper;\n        parentName = widgetConstructor.name || 'unknown';\n    }\n    if (key === undefined || key === null) {\n        for (let i = 0; i < wrappers.length; i++) {\n            if (i !== index) {\n                const wrapper = wrappers[i];\n                if (same(wrapper, wrapperToCheck)) {\n                    let nodeIdentifier;\n                    if (isWNodeWrapper(wrapper)) {\n                        nodeIdentifier = wrapper.node.widgetConstructor.name || 'unknown';\n                    }\n                    else {\n                        nodeIdentifier = wrapper.node.tag;\n                    }\n                    console.warn(`A widget (${parentName}) has had a child added or removed, but they were not able to uniquely identified. It is recommended to provide a unique 'key' property when using the same widget or element (${nodeIdentifier}) multiple times as siblings`);\n                    break;\n                }\n            }\n        }\n    }\n}\nfunction same(dnode1, dnode2) {\n    if (isVNodeWrapper(dnode1) && isVNodeWrapper(dnode2)) {\n        if (isDomVNode(dnode1.node) && isDomVNode(dnode2.node)) {\n            if (dnode1.node.domNode !== dnode2.node.domNode) {\n                return false;\n            }\n        }\n        if (dnode1.node.tag !== dnode2.node.tag) {\n            return false;\n        }\n        if (dnode1.node.properties.key !== dnode2.node.properties.key) {\n            return false;\n        }\n        return true;\n    }\n    else if (isWNodeWrapper(dnode1) && isWNodeWrapper(dnode2)) {\n        const widgetConstructor1 = dnode1.registryItem || dnode1.node.widgetConstructor;\n        const widgetConstructor2 = dnode2.registryItem || dnode2.node.widgetConstructor;\n        const { node: { properties: props1 } } = dnode1;\n        const { node: { properties: props2 } } = dnode2;\n        if (dnode1.instance === undefined && typeof widgetConstructor2 === 'string') {\n            return false;\n        }\n        if (widgetConstructor1 !== widgetConstructor2) {\n            return false;\n        }\n        if (props1.key !== props2.key) {\n            return false;\n        }\n        if (!(widgetConstructor1.keys || []).every((key) => props1[key] === props2[key])) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nfunction findIndexOfChild(children, sameAs, start) {\n    for (let i = start; i < children.length; i++) {\n        if (same(children[i], sameAs)) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction createClassPropValue(classes = []) {\n    let classNames = '';\n    if (Array.isArray(classes)) {\n        for (let i = 0; i < classes.length; i++) {\n            let className = classes[i];\n            if (className && className !== true) {\n                classNames = classNames ? `${classNames} ${className}` : className;\n            }\n        }\n        return classNames;\n    }\n    if (classes && classes !== true) {\n        classNames = classes;\n    }\n    return classNames;\n}\nfunction updateAttribute(domNode, attrName, attrValue, namespace) {\n    if (namespace === NAMESPACE_SVG && attrName === 'href' && attrValue) {\n        domNode.setAttributeNS(NAMESPACE_XLINK, attrName, attrValue);\n    }\n    else if ((attrName === 'role' && attrValue === '') || attrValue === undefined) {\n        domNode.removeAttribute(attrName);\n    }\n    else {\n        domNode.setAttribute(attrName, attrValue);\n    }\n}\nfunction arrayFrom(arr) {\n    return Array.prototype.slice.call(arr);\n}\nfunction createFactory(callback, middlewares, key) {\n    const factory = (properties, children) => {\n        if (properties) {\n            const result = w(callback, properties, children);\n            callback.isWidget = true;\n            callback.middlewares = middlewares;\n            return result;\n        }\n        return {\n            middlewares,\n            callback\n        };\n    };\n    const keys = Object.keys(middlewares).reduce((keys, middlewareName) => {\n        const middleware = middlewares[middlewareName];\n        if (middleware.keys) {\n            keys = [...keys, ...middleware.keys];\n        }\n        return keys;\n    }, key ? [key] : []);\n    callback.keys = keys;\n    factory.hasResource = Boolean(middlewares['resource']);\n    factory.keys = keys;\n    factory.isFactory = true;\n    return factory;\n}\nexport function create(middlewares = {}) {\n    function properties() {\n        function returns(callback) {\n            return createFactory(callback, middlewares);\n        }\n        function key(key) {\n            function returns(callback) {\n                return createFactory(callback, middlewares, key);\n            }\n            return returns;\n        }\n        function children() {\n            function returns(callback) {\n                return createFactory(callback, middlewares);\n            }\n            function key(key) {\n                function returns(callback) {\n                    return createFactory(callback, middlewares, key);\n                }\n                return returns;\n            }\n            returns.key = key;\n            return returns;\n        }\n        returns.children = children;\n        returns.key = key;\n        return returns;\n    }\n    function children() {\n        function properties() {\n            function returns(callback) {\n                return createFactory(callback, middlewares);\n            }\n            function key(key) {\n                function returns(callback) {\n                    return createFactory(callback, middlewares, key);\n                }\n                return returns;\n            }\n            returns.key = key;\n            return returns;\n        }\n        function returns(callback) {\n            return createFactory(callback, middlewares);\n        }\n        returns.properties = properties;\n        return returns;\n    }\n    function returns(callback) {\n        return createFactory(callback, middlewares);\n    }\n    returns.children = children;\n    returns.properties = properties;\n    return returns;\n}\nconst factory = create();\nfunction wrapNodes(renderer) {\n    const result = renderer();\n    const isWNodeWrapper = isWNode(result);\n    const callback = () => {\n        return result;\n    };\n    callback.isWNodeWrapper = isWNodeWrapper;\n    return factory(callback);\n}\nexport const widgetInstanceMap = new WeakMap();\nconst widgetMetaMap = new Map();\nconst requestedDomNodes = new Set();\nlet wrapperId = 0;\nlet metaId = 0;\nfunction addNodeToMap(id, key, node) {\n    const widgetMeta = widgetMetaMap.get(id);\n    if (widgetMeta) {\n        widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n        widgetMeta.nodeMap.set(key, node);\n        if (requestedDomNodes.has(`${id}-${key}`)) {\n            widgetMeta.invalidator();\n            requestedDomNodes.delete(`${id}-${key}`);\n        }\n    }\n}\nfunction destroyHandles(meta) {\n    const { destroyMap, middlewareIds } = meta;\n    if (!destroyMap) {\n        return;\n    }\n    for (let i = 0; i < middlewareIds.length; i++) {\n        const id = middlewareIds[i];\n        const destroy = destroyMap.get(id);\n        destroy && destroy();\n        destroyMap.delete(id);\n        if (destroyMap.size === 0) {\n            break;\n        }\n    }\n    destroyMap.clear();\n}\nfunction runDiffs(meta, current, next) {\n    let customProperties = {};\n    meta.customDiffMap = meta.customDiffMap || new Map();\n    if (meta.customDiffMap.size) {\n        meta.customDiffMap.forEach((diffMap) => {\n            diffMap.forEach((diff, propertyName) => {\n                const result = diff(Object.assign({}, current), Object.assign({}, next));\n                if (result) {\n                    customProperties[propertyName] = result;\n                }\n            });\n        });\n    }\n    return customProperties;\n}\nexport const invalidator = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            return widgetMeta.invalidator();\n        }\n    };\n});\nexport const node = factory(({ id }) => {\n    return {\n        get(key) {\n            const [widgetId] = id.split('-');\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap = widgetMeta.nodeMap || new Map();\n                const mountNode = widgetMeta.mountNode;\n                const node = widgetMeta.nodeMap.get(key);\n                if (node &&\n                    (mountNode.contains(node) ||\n                        (global.document.body !== mountNode && global.document.body.contains(node)))) {\n                    return node;\n                }\n                requestedDomNodes.add(`${widgetId}-${key}`);\n            }\n            return null;\n        }\n    };\n});\nexport const diffProperty = factory(({ id }) => {\n    function callback(propertyName, propertiesOrDiff, diff) {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (!diff) {\n            diff = propertiesOrDiff;\n        }\n        if (widgetMeta) {\n            widgetMeta.customDiffMap = widgetMeta.customDiffMap || new Map();\n            widgetMeta.customDiffProperties = widgetMeta.customDiffProperties || new Set();\n            const propertyDiffMap = widgetMeta.customDiffMap.get(id) || new Map();\n            if (!propertyDiffMap.has(propertyName)) {\n                const result = diff({}, widgetMeta.originalProperties);\n                if (result !== undefined) {\n                    if (has('dojo-debug')) {\n                        if (widgetMeta.propertiesCalled) {\n                            console.warn(`Calling \"propertyDiff\" middleware after accessing properties in \"${widgetMeta.widgetName}\", can result in referencing stale properties.`);\n                        }\n                    }\n                    widgetMeta.properties = Object.assign({}, widgetMeta.properties, { [propertyName]: result });\n                }\n                propertyDiffMap.set(propertyName, diff);\n                widgetMeta.customDiffProperties.add(propertyName);\n            }\n            widgetMeta.customDiffMap.set(id, propertyDiffMap);\n        }\n    }\n    return callback;\n});\nexport const destroy = factory(({ id }) => {\n    return (destroyFunction) => {\n        const [widgetId] = id.split('-');\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            widgetMeta.destroyMap = widgetMeta.destroyMap || new Map();\n            if (!widgetMeta.destroyMap.has(id)) {\n                widgetMeta.destroyMap.set(id, destroyFunction);\n            }\n        }\n    };\n});\nexport const getRegistry = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    return () => {\n        const widgetMeta = widgetMetaMap.get(widgetId);\n        if (widgetMeta) {\n            if (!widgetMeta.registryHandler) {\n                widgetMeta.registryHandler = new RegistryHandler();\n                widgetMeta.registryHandler.base = widgetMeta.registry;\n                widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n            }\n            widgetMeta.registryHandler = widgetMeta.registryHandler || new RegistryHandler();\n            return widgetMeta.registryHandler;\n        }\n        return null;\n    };\n});\nexport const defer = factory(({ id }) => {\n    const [widgetId] = id.split('-');\n    let isDeferred = false;\n    return {\n        pause() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (!isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs + 1;\n                isDeferred = true;\n            }\n        },\n        resume() {\n            const widgetMeta = widgetMetaMap.get(widgetId);\n            if (isDeferred && widgetMeta) {\n                widgetMeta.deferRefs = widgetMeta.deferRefs - 1;\n                isDeferred = false;\n            }\n        }\n    };\n});\nfunction wrapFunctionProperties(id, properties) {\n    const props = {};\n    const propertyNames = Object.keys(properties);\n    for (let i = 0; i < propertyNames.length; i++) {\n        const propertyName = propertyNames[i];\n        if (typeof properties[propertyName] === 'function') {\n            props[propertyName] = function WrappedProperty(...args) {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    return widgetMeta.originalProperties[propertyName](...args);\n                }\n                return properties[propertyName](...args);\n            };\n            props[propertyName].unwrap = () => {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    return widgetMeta.originalProperties[propertyName];\n                }\n                return properties[propertyName];\n            };\n        }\n        else {\n            props[propertyName] = properties[propertyName];\n        }\n    }\n    return props;\n}\nexport function renderer(renderer) {\n    let _mountOptions = {\n        sync: false,\n        merge: true,\n        transition: undefined,\n        domNode: global.document.body,\n        registry: new Registry()\n    };\n    let _invalidationQueue = [];\n    let _processQueue = [];\n    let _deferredProcessQueue = [];\n    let _applicationQueue = [];\n    let _eventMap = new WeakMap();\n    let _idToWrapperMap = new Map();\n    let _wrapperSiblingMap = new WeakMap();\n    let _idToChildrenWrappers = new Map();\n    let _insertBeforeMap = new WeakMap();\n    let _nodeToWrapperMap = new WeakMap();\n    let _renderScheduled;\n    let _deferredRenderCallbacks = [];\n    let parentInvalidate;\n    let _allMergedNodes = [];\n    let _appWrapperId;\n    let _deferredProcessIds = new Map();\n    function nodeOperation(propName, propValue, previousValue, domNode) {\n        let result = propValue && !previousValue;\n        if (typeof propValue === 'function') {\n            result = propValue();\n        }\n        if (result === true) {\n            _deferredRenderCallbacks.push(() => {\n                domNode[propName]();\n            });\n        }\n    }\n    function updateEvent(domNode, eventName, currentValue, previousValue) {\n        if (previousValue) {\n            const previousEvent = _eventMap.get(previousValue);\n            previousEvent && domNode.removeEventListener(eventName, previousEvent);\n        }\n        let callback = currentValue;\n        if (eventName === 'input') {\n            callback = function (evt) {\n                currentValue.call(this, evt);\n                evt.target['oninput-value'] = evt.target.value;\n            };\n        }\n        domNode.addEventListener(eventName, callback);\n        _eventMap.set(currentValue, callback);\n    }\n    function removeOrphanedEvents(domNode, previousProperties, properties, onlyEvents = false) {\n        Object.keys(previousProperties).forEach((propName) => {\n            const isEvent = propName.substr(0, 2) === 'on' || onlyEvents;\n            const eventName = onlyEvents ? propName : propName.substr(2);\n            if (isEvent && !properties[propName]) {\n                const eventCallback = _eventMap.get(previousProperties[propName]);\n                if (eventCallback) {\n                    domNode.removeEventListener(eventName, eventCallback);\n                }\n            }\n        });\n    }\n    function resolveRegistryItem(wrapper, instance, id) {\n        if (!isWidget(wrapper.node.widgetConstructor)) {\n            const owningNode = _nodeToWrapperMap.get(wrapper.node);\n            if (owningNode) {\n                if (owningNode.instance) {\n                    instance = owningNode.instance;\n                }\n                else {\n                    id = owningNode.id;\n                }\n            }\n            let registry;\n            if (instance) {\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    registry = instanceData.registry;\n                }\n            }\n            else if (id !== undefined) {\n                const widgetMeta = widgetMetaMap.get(id);\n                if (widgetMeta) {\n                    if (!widgetMeta.registryHandler) {\n                        widgetMeta.registryHandler = new RegistryHandler();\n                        widgetMeta.registryHandler.base = widgetMeta.registry;\n                        widgetMeta.registryHandler.on('invalidate', widgetMeta.invalidator);\n                    }\n                    registry = widgetMeta.registryHandler;\n                }\n            }\n            if (registry) {\n                let registryLabel;\n                if (isLazyDefine(wrapper.node.widgetConstructor)) {\n                    const { label, registryItem } = wrapper.node.widgetConstructor;\n                    if (!registry.has(label)) {\n                        registry.define(label, registryItem);\n                    }\n                    registryLabel = label;\n                }\n                else {\n                    registryLabel = wrapper.node.widgetConstructor;\n                }\n                let item = registry.get(registryLabel);\n                if (isWNodeFactory(item)) {\n                    const node = item(wrapper.node.properties, wrapper.node.children);\n                    if (isWidgetFunction(node.widgetConstructor)) {\n                        wrapper.registryItem = node.widgetConstructor;\n                    }\n                }\n                else {\n                    wrapper.registryItem = item;\n                }\n            }\n        }\n    }\n    function mapNodeToInstance(nodes, wrapper) {\n        while (nodes.length) {\n            let node = nodes.pop();\n            if (isWNode(node) || isVNode(node)) {\n                if (!_nodeToWrapperMap.has(node)) {\n                    _nodeToWrapperMap.set(node, wrapper);\n                    if (node.children && node.children.length) {\n                        nodes = [...nodes, ...node.children];\n                    }\n                }\n            }\n        }\n    }\n    function renderedToWrapper(rendered, parent, currentParent) {\n        const { requiresInsertBefore, hasPreviousSiblings, namespace, depth } = parent;\n        const wrappedRendered = [];\n        const hasParentWNode = isWNodeWrapper(parent);\n        const hasVirtualParentNode = isVirtualWrapper(parent);\n        const currentParentChildren = (isVNodeWrapper(currentParent) && _idToChildrenWrappers.get(currentParent.id)) || [];\n        const hasCurrentParentChildren = currentParentChildren.length > 0;\n        const insertBefore = ((requiresInsertBefore || hasPreviousSiblings !== false) && (hasParentWNode || hasVirtualParentNode)) ||\n            (hasCurrentParentChildren && rendered.length > 1);\n        let previousItem;\n        if (isWNodeWrapper(parent) && rendered.length) {\n            mapNodeToInstance([...rendered], parent);\n        }\n        for (let i = 0; i < rendered.length; i++) {\n            let renderedItem = rendered[i];\n            if (!renderedItem || renderedItem === true) {\n                continue;\n            }\n            if (typeof renderedItem === 'string' || typeof renderedItem === 'number') {\n                renderedItem = toTextVNode(renderedItem);\n            }\n            const owningNode = _nodeToWrapperMap.get(renderedItem);\n            const wrapper = {\n                node: renderedItem,\n                depth: depth + 1,\n                order: i,\n                parentId: parent.id,\n                requiresInsertBefore: insertBefore,\n                hasParentWNode,\n                namespace: namespace\n            };\n            if (isVNode(renderedItem)) {\n                if (renderedItem.deferredPropertiesCallback) {\n                    wrapper.deferredProperties = renderedItem.deferredPropertiesCallback(false);\n                }\n                if (renderedItem.properties.exitAnimation) {\n                    parent.hasAnimations = true;\n                    let nextParent = _idToWrapperMap.get(parent.parentId);\n                    while (nextParent) {\n                        if (nextParent.hasAnimations) {\n                            break;\n                        }\n                        nextParent.hasAnimations = true;\n                        nextParent = _idToWrapperMap.get(nextParent.parentId);\n                    }\n                }\n            }\n            if (owningNode) {\n                wrapper.owningId = owningNode.id;\n            }\n            if (isWNode(renderedItem)) {\n                resolveRegistryItem(wrapper, parent.instance, parent.id);\n            }\n            if (previousItem) {\n                _wrapperSiblingMap.set(previousItem, wrapper);\n            }\n            wrappedRendered.push(wrapper);\n            previousItem = wrapper;\n        }\n        return wrappedRendered;\n    }\n    function findParentDomNode(currentNode) {\n        let parentDomNode;\n        let parentWrapper = _idToWrapperMap.get(currentNode.parentId);\n        while (!parentDomNode && parentWrapper) {\n            if (!parentDomNode &&\n                isVNodeWrapper(parentWrapper) &&\n                !isVirtualWrapper(parentWrapper) &&\n                parentWrapper.domNode) {\n                parentDomNode = parentWrapper.domNode;\n            }\n            parentWrapper = _idToWrapperMap.get(parentWrapper.parentId);\n        }\n        return parentDomNode;\n    }\n    function runDeferredProperties(next) {\n        const { deferredPropertiesCallback } = next.node;\n        if (deferredPropertiesCallback) {\n            const properties = next.node.properties;\n            _deferredRenderCallbacks.push(() => {\n                if (_idToWrapperMap.has(next.owningId)) {\n                    const deferredProperties = next.deferredProperties;\n                    next.deferredProperties = deferredPropertiesCallback(true);\n                    processProperties(next, {\n                        properties: Object.assign({}, deferredProperties, properties)\n                    });\n                }\n            });\n        }\n    }\n    function findInsertBefore(next) {\n        let insertBefore = null;\n        let searchNode = next;\n        while (!insertBefore) {\n            const nextSibling = _wrapperSiblingMap.get(searchNode);\n            if (nextSibling) {\n                let domNode = nextSibling.domNode;\n                if (isWNodeWrapper(nextSibling) || isVirtualWrapper(nextSibling)) {\n                    if (!nextSibling.childDomWrapperId) {\n                        nextSibling.childDomWrapperId = findDomNodeOnParentWrapper(nextSibling.id);\n                    }\n                    if (nextSibling.childDomWrapperId) {\n                        const childWrapper = _idToWrapperMap.get(nextSibling.childDomWrapperId);\n                        if (childWrapper && !isBodyWrapper(childWrapper) && !isHeadWrapper(childWrapper)) {\n                            domNode = childWrapper.domNode;\n                        }\n                    }\n                }\n                if (domNode && domNode.parentNode) {\n                    insertBefore = domNode;\n                    break;\n                }\n                searchNode = nextSibling;\n                continue;\n            }\n            searchNode = searchNode && _idToWrapperMap.get(searchNode.parentId);\n            if (!searchNode || (isVNodeWrapper(searchNode) && !isVirtualWrapper(searchNode))) {\n                break;\n            }\n        }\n        return insertBefore;\n    }\n    function setValue(domNode, propValue, previousValue) {\n        const domValue = domNode.value;\n        const onInputValue = domNode['oninput-value'];\n        const onSelectValue = domNode['select-value'];\n        if (onSelectValue && domValue !== onSelectValue) {\n            domNode.value = onSelectValue;\n            if (domNode.value === onSelectValue) {\n                domNode['select-value'] = undefined;\n            }\n        }\n        else if ((onInputValue && domValue === onInputValue) || propValue !== previousValue) {\n            domNode.value = propValue;\n            domNode['oninput-value'] = undefined;\n        }\n    }\n    function setProperties(domNode, currentProperties = {}, nextWrapper, includesEventsAndAttributes = true) {\n        const properties = nextWrapper.deferredProperties\n            ? Object.assign({}, nextWrapper.deferredProperties, nextWrapper.node.properties) : nextWrapper.node.properties;\n        const propNames = Object.keys(properties);\n        const propCount = propNames.length;\n        if (propNames.indexOf('classes') === -1 && currentProperties.classes) {\n            domNode.removeAttribute('class');\n        }\n        includesEventsAndAttributes && removeOrphanedEvents(domNode, currentProperties, properties);\n        for (let i = 0; i < propCount; i++) {\n            const propName = propNames[i];\n            let propValue = properties[propName];\n            const previousValue = currentProperties[propName];\n            if (propName === 'classes') {\n                const previousClassString = createClassPropValue(previousValue);\n                let currentClassString = createClassPropValue(propValue);\n                if (previousClassString !== currentClassString) {\n                    if (currentClassString) {\n                        if (nextWrapper.merged) {\n                            const domClasses = (domNode.getAttribute('class') || '').split(' ');\n                            for (let i = 0; i < domClasses.length; i++) {\n                                if (currentClassString.indexOf(domClasses[i]) === -1) {\n                                    currentClassString = `${domClasses[i]} ${currentClassString}`;\n                                }\n                            }\n                        }\n                        domNode.setAttribute('class', currentClassString);\n                    }\n                    else {\n                        domNode.removeAttribute('class');\n                    }\n                }\n            }\n            else if (nodeOperations.indexOf(propName) !== -1) {\n                nodeOperation(propName, propValue, previousValue, domNode);\n            }\n            else if (propName === 'styles') {\n                const styleNames = Object.keys(propValue);\n                const styleCount = styleNames.length;\n                for (let j = 0; j < styleCount; j++) {\n                    const styleName = styleNames[j];\n                    const newStyleValue = propValue[styleName];\n                    const oldStyleValue = previousValue && previousValue[styleName];\n                    if (newStyleValue === oldStyleValue) {\n                        continue;\n                    }\n                    domNode.style[styleName] = newStyleValue || '';\n                }\n            }\n            else {\n                if (!propValue && typeof previousValue === 'string') {\n                    propValue = '';\n                }\n                if (propName === 'value') {\n                    if (domNode.tagName === 'SELECT') {\n                        domNode['select-value'] = propValue;\n                    }\n                    setValue(domNode, propValue, previousValue);\n                }\n                else if (propName !== 'key' && propValue !== previousValue) {\n                    const type = typeof propValue;\n                    if (type === 'function' && propName.lastIndexOf('on', 0) === 0 && includesEventsAndAttributes) {\n                        updateEvent(domNode, propName.substr(2), propValue, previousValue);\n                    }\n                    else if (type === 'string' && propName !== 'innerHTML' && includesEventsAndAttributes) {\n                        updateAttribute(domNode, propName, propValue, nextWrapper.namespace);\n                    }\n                    else if (propName === 'scrollLeft' || propName === 'scrollTop') {\n                        if (domNode[propName] !== propValue) {\n                            domNode[propName] = propValue;\n                        }\n                    }\n                    else {\n                        domNode[propName] = propValue;\n                    }\n                }\n            }\n        }\n    }\n    function _createDeferredRenderCallback() {\n        const callbacks = _deferredRenderCallbacks;\n        _deferredRenderCallbacks = [];\n        if (callbacks.length) {\n            return () => {\n                let callback;\n                while ((callback = callbacks.shift())) {\n                    callback();\n                }\n            };\n        }\n    }\n    function _scheduleDeferredRenderCallbacks() {\n        const { sync } = _mountOptions;\n        const run = _createDeferredRenderCallback();\n        if (run) {\n            if (sync) {\n                run();\n            }\n            else {\n                let id;\n                id = global.requestAnimationFrame(() => {\n                    _deferredProcessIds.delete(id);\n                    run();\n                });\n                _deferredProcessIds.set(id, run);\n            }\n        }\n    }\n    function processProperties(next, previousProperties) {\n        if (next.node.attributes && next.node.events) {\n            updateAttributes(next.domNode, previousProperties.attributes || {}, next.node.attributes, next.namespace);\n            setProperties(next.domNode, previousProperties.properties, next, false);\n            const events = next.node.events || {};\n            if (previousProperties.events) {\n                removeOrphanedEvents(next.domNode, previousProperties.events || {}, next.node.events, true);\n            }\n            previousProperties.events = previousProperties.events || {};\n            Object.keys(events).forEach((event) => {\n                updateEvent(next.domNode, event, events[event], previousProperties.events[event]);\n            });\n        }\n        else {\n            setProperties(next.domNode, previousProperties.properties, next);\n        }\n    }\n    function unmount() {\n        _processQueue.push({\n            current: [_idToWrapperMap.get(_appWrapperId)],\n            next: [],\n            meta: {}\n        });\n        if (_renderScheduled) {\n            global.cancelAnimationFrame(_renderScheduled);\n        }\n        _runProcessQueue();\n        _runDomInstructionQueue();\n        _deferredProcessIds.forEach((callback, id) => {\n            global.cancelAnimationFrame(id);\n            callback();\n        });\n        const run = _createDeferredRenderCallback();\n        run && run();\n        _invalidationQueue = [];\n        _processQueue = [];\n        _deferredProcessQueue = [];\n        _applicationQueue = [];\n        _deferredRenderCallbacks = [];\n        _allMergedNodes = [];\n        _eventMap = new WeakMap();\n        _idToWrapperMap.clear();\n        _idToChildrenWrappers.clear();\n        _wrapperSiblingMap = new WeakMap();\n        _nodeToWrapperMap = new WeakMap();\n        _insertBeforeMap = undefined;\n    }\n    function mount(mountOptions = {}) {\n        let domNode = mountOptions.domNode;\n        if (!domNode) {\n            if (has('dojo-debug') && domNode === null) {\n                console.warn('Unable to find node to mount the application, defaulting to the document body.');\n            }\n            domNode = global.document.body;\n        }\n        _mountOptions = Object.assign({}, _mountOptions, mountOptions, { domNode });\n        const renderResult = wrapNodes(renderer)({}, []);\n        _appWrapperId = `${wrapperId++}`;\n        const nextWrapper = {\n            id: _appWrapperId,\n            node: renderResult,\n            order: 0,\n            depth: 1,\n            owningId: '-1',\n            parentId: '-1',\n            siblingId: '-1',\n            properties: {}\n        };\n        _idToWrapperMap.set('-1', {\n            id: `-1`,\n            depth: 0,\n            order: 0,\n            owningId: '',\n            domNode,\n            node: v('fake'),\n            parentId: '-1'\n        });\n        _processQueue.push({\n            current: [],\n            next: [nextWrapper],\n            meta: { mergeNodes: arrayFrom(domNode.childNodes) }\n        });\n        _runProcessQueue();\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _insertBeforeMap = undefined;\n        _scheduleDeferredRenderCallbacks();\n        if (!_renderScheduled) {\n            setRendering(false);\n        }\n    }\n    function invalidate() {\n        parentInvalidate && parentInvalidate();\n    }\n    function _schedule() {\n        const { sync } = _mountOptions;\n        if (sync) {\n            _runInvalidationQueue();\n        }\n        else if (!_renderScheduled) {\n            setRendering(true);\n            _renderScheduled = global.requestAnimationFrame(() => {\n                _runInvalidationQueue();\n            });\n        }\n    }\n    function getWNodeWrapper(id) {\n        const wrapper = _idToWrapperMap.get(id);\n        if (wrapper && isWNodeWrapper(wrapper)) {\n            return wrapper;\n        }\n    }\n    function _runInvalidationQueue() {\n        _renderScheduled = undefined;\n        let invalidationQueue = [..._invalidationQueue];\n        const previouslyRendered = [];\n        _invalidationQueue = [];\n        invalidationQueue.sort((a, b) => {\n            let result = b.depth - a.depth;\n            if (result === 0) {\n                result = b.order - a.order;\n            }\n            return result;\n        });\n        if (_deferredProcessQueue.length) {\n            _processQueue = [..._deferredProcessQueue];\n            _deferredProcessQueue = [];\n            _runProcessQueue();\n            if (_deferredProcessQueue.length) {\n                _invalidationQueue = [...invalidationQueue];\n                invalidationQueue = [];\n            }\n        }\n        let item;\n        while ((item = invalidationQueue.pop())) {\n            let { id } = item;\n            const current = getWNodeWrapper(id);\n            if (!current || previouslyRendered.indexOf(id) !== -1 || !_idToWrapperMap.has(current.parentId)) {\n                continue;\n            }\n            previouslyRendered.push(id);\n            const sibling = _wrapperSiblingMap.get(current);\n            const next = {\n                node: {\n                    type: WNODE,\n                    widgetConstructor: current.node.widgetConstructor,\n                    properties: current.properties || {},\n                    children: current.node.children || []\n                },\n                instance: current.instance,\n                id: current.id,\n                properties: current.properties,\n                depth: current.depth,\n                order: current.order,\n                owningId: current.owningId,\n                parentId: current.parentId,\n                registryItem: current.registryItem\n            };\n            sibling && _wrapperSiblingMap.set(next, sibling);\n            const result = _updateWidget({ current, next });\n            if (result && result.item) {\n                _processQueue.push(result.item);\n                _idToWrapperMap.set(id, next);\n                _runProcessQueue();\n            }\n        }\n        _runDomInstructionQueue();\n        _cleanUpMergedNodes();\n        _scheduleDeferredRenderCallbacks();\n        if (!_renderScheduled) {\n            setRendering(false);\n        }\n    }\n    function _cleanUpMergedNodes() {\n        if (_deferredProcessQueue.length === 0) {\n            let mergedNode;\n            while ((mergedNode = _allMergedNodes.pop())) {\n                mergedNode.parentNode && mergedNode.parentNode.removeChild(mergedNode);\n            }\n            _mountOptions.merge = false;\n        }\n    }\n    function _runProcessQueue() {\n        let item;\n        while ((item = _processQueue.pop())) {\n            if (isAttachApplication(item)) {\n                item.instance && _applicationQueue.push(item);\n            }\n            else {\n                const { current, next, meta } = item;\n                _process(current || EMPTY_ARRAY, next || EMPTY_ARRAY, meta);\n            }\n        }\n    }\n    function _runDomInstructionQueue() {\n        _applicationQueue.reverse();\n        let item;\n        while ((item = _applicationQueue.pop())) {\n            if (item.type === 'create') {\n                const { parentDomNode, next, next: { domNode, merged, requiresInsertBefore, node } } = item;\n                processProperties(next, { properties: {} });\n                runDeferredProperties(next);\n                if (!merged) {\n                    let insertBefore;\n                    if (requiresInsertBefore) {\n                        insertBefore = findInsertBefore(next);\n                    }\n                    else if (_insertBeforeMap) {\n                        insertBefore = _insertBeforeMap.get(next);\n                    }\n                    parentDomNode.insertBefore(domNode, insertBefore);\n                    if (isDomVNode(next.node) && next.node.onAttach) {\n                        next.node.onAttach();\n                    }\n                }\n                if (domNode.tagName === 'OPTION' && domNode.parentElement) {\n                    setValue(domNode.parentElement);\n                }\n                const { enterAnimation, enterAnimationActive } = node.properties;\n                if (_mountOptions.transition && enterAnimation && enterAnimation !== true) {\n                    _mountOptions.transition.enter(domNode, enterAnimation, enterAnimationActive);\n                }\n                const owningWrapper = _nodeToWrapperMap.get(next.node);\n                if (owningWrapper && node.properties.key != null) {\n                    if (owningWrapper.instance) {\n                        const instanceData = widgetInstanceMap.get(owningWrapper.instance);\n                        instanceData && instanceData.nodeHandler.add(domNode, `${node.properties.key}`);\n                    }\n                    else {\n                        addNodeToMap(owningWrapper.id, node.properties.key, domNode);\n                    }\n                }\n                item.next.inserted = true;\n            }\n            else if (item.type === 'update') {\n                const { next, next: { domNode }, current, current: { domNode: currentDomNode } } = item;\n                if (isTextNode(domNode) && isTextNode(currentDomNode) && domNode !== currentDomNode) {\n                    currentDomNode.parentNode && currentDomNode.parentNode.replaceChild(domNode, currentDomNode);\n                }\n                else {\n                    const previousProperties = buildPreviousProperties(domNode, current);\n                    processProperties(next, previousProperties);\n                    runDeferredProperties(next);\n                }\n            }\n            else if (item.type === 'delete') {\n                const { current } = item;\n                const { exitAnimation, exitAnimationActive } = current.node.properties;\n                if (_mountOptions.transition && exitAnimation && exitAnimation !== true) {\n                    _mountOptions.transition.exit(current.domNode, exitAnimation, exitAnimationActive);\n                }\n                else {\n                    current.domNode.parentNode.removeChild(current.domNode);\n                }\n            }\n            else if (item.type === 'attach') {\n                const { instance, attached } = item;\n                const instanceData = widgetInstanceMap.get(instance);\n                if (instanceData) {\n                    instanceData.nodeHandler.addRoot();\n                    attached && instanceData.onAttach();\n                }\n            }\n            else if (item.type === 'detach') {\n                if (item.current.instance) {\n                    const instanceData = widgetInstanceMap.get(item.current.instance);\n                    instanceData && instanceData.onDetach();\n                }\n                item.current.instance = undefined;\n            }\n        }\n        if (_deferredProcessQueue.length === 0) {\n            _nodeToWrapperMap = new WeakMap();\n        }\n    }\n    function _processMergeNodes(next, mergeNodes) {\n        const { merge } = _mountOptions;\n        if (merge && mergeNodes.length) {\n            if (isVNodeWrapper(next)) {\n                let { node: { tag } } = next;\n                for (let i = 0; i < mergeNodes.length; i++) {\n                    const domElement = mergeNodes[i];\n                    const tagName = domElement.tagName || '';\n                    if (tag.toUpperCase() === tagName.toUpperCase()) {\n                        const mergeNodeIndex = _allMergedNodes.indexOf(domElement);\n                        if (mergeNodeIndex !== -1) {\n                            _allMergedNodes.splice(mergeNodeIndex, 1);\n                        }\n                        mergeNodes.splice(i, 1);\n                        next.domNode = domElement;\n                        break;\n                    }\n                }\n            }\n            else {\n                next.mergeNodes = mergeNodes;\n            }\n        }\n    }\n    function distinguishableCheck(childNodes, index) {\n        const parentWNodeWrapper = getWNodeWrapper(childNodes[index].owningId);\n        checkDistinguishable(childNodes, index, parentWNodeWrapper);\n    }\n    function createKeyMap(wrappers) {\n        const keys = [];\n        for (let i = 0; i < wrappers.length; i++) {\n            const wrapper = wrappers[i];\n            if (wrapper.node.properties.key != null) {\n                keys.push(wrapper.node.properties.key);\n            }\n            else {\n                return false;\n            }\n        }\n        return keys;\n    }\n    function _process(current, next, meta = {}) {\n        let { mergeNodes = [], oldIndex = 0, newIndex = 0 } = meta;\n        const currentLength = current.length;\n        const nextLength = next.length;\n        const hasPreviousSiblings = currentLength > 1 || (currentLength > 0 && currentLength < nextLength);\n        let instructions = [];\n        let replace = false;\n        if (oldIndex === 0 && newIndex === 0 && currentLength) {\n            const currentKeys = createKeyMap(current);\n            if (currentKeys) {\n                const nextKeys = createKeyMap(next);\n                if (nextKeys) {\n                    for (let i = 0; i < currentKeys.length; i++) {\n                        if (nextKeys.indexOf(currentKeys[i]) !== -1) {\n                            instructions = [];\n                            replace = false;\n                            break;\n                        }\n                        replace = true;\n                        instructions.push({ current: current[i], next: undefined });\n                    }\n                }\n            }\n        }\n        if (replace || (currentLength === 0 && !_mountOptions.merge)) {\n            for (let i = 0; i < next.length; i++) {\n                instructions.push({ current: undefined, next: next[i] });\n            }\n        }\n        else {\n            if (newIndex < nextLength) {\n                let currentWrapper = oldIndex < currentLength ? current[oldIndex] : undefined;\n                const nextWrapper = next[newIndex];\n                nextWrapper.hasPreviousSiblings = hasPreviousSiblings;\n                _processMergeNodes(nextWrapper, mergeNodes);\n                if (currentWrapper && same(currentWrapper, nextWrapper)) {\n                    oldIndex++;\n                    newIndex++;\n                    if (isVNodeWrapper(currentWrapper) && isVNodeWrapper(nextWrapper)) {\n                        nextWrapper.inserted = currentWrapper.inserted;\n                    }\n                    instructions.push({ current: currentWrapper, next: nextWrapper });\n                }\n                else if (!currentWrapper || findIndexOfChild(current, nextWrapper, oldIndex + 1) === -1) {\n                    has('dojo-debug') && current.length && distinguishableCheck(next, newIndex);\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    newIndex++;\n                }\n                else if (findIndexOfChild(next, currentWrapper, newIndex + 1) === -1) {\n                    has('dojo-debug') && distinguishableCheck(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    oldIndex++;\n                }\n                else {\n                    has('dojo-debug') && distinguishableCheck(next, newIndex);\n                    has('dojo-debug') && distinguishableCheck(current, oldIndex);\n                    instructions.push({ current: currentWrapper, next: undefined });\n                    instructions.push({ current: undefined, next: nextWrapper });\n                    oldIndex++;\n                    newIndex++;\n                }\n            }\n            if (newIndex < nextLength) {\n                _processQueue.push({ current, next, meta: { mergeNodes, oldIndex, newIndex } });\n            }\n            if (currentLength > oldIndex && newIndex >= nextLength) {\n                for (let i = oldIndex; i < currentLength; i++) {\n                    has('dojo-debug') && distinguishableCheck(current, i);\n                    instructions.push({ current: current[i], next: undefined });\n                }\n            }\n        }\n        for (let i = 0; i < instructions.length; i++) {\n            const result = _processOne(instructions[i]);\n            if (result === false) {\n                if (_mountOptions.merge && mergeNodes.length) {\n                    if (newIndex < nextLength) {\n                        _processQueue.pop();\n                    }\n                    _processQueue.push({ next, current, meta });\n                    _deferredProcessQueue = _processQueue;\n                    _processQueue = [];\n                    break;\n                }\n                continue;\n            }\n            const { widget, item, dom } = result;\n            widget && _processQueue.push(widget);\n            item && _processQueue.push(item);\n            dom && _applicationQueue.push(dom);\n        }\n    }\n    function _processOne({ current, next }) {\n        if (current !== next) {\n            if (!current && next) {\n                if (isVNodeWrapper(next)) {\n                    return _createDom({ next });\n                }\n                else {\n                    return _createWidget({ next });\n                }\n            }\n            else if (current && next) {\n                if (isVNodeWrapper(current) && isVNodeWrapper(next)) {\n                    return _updateDom({ current, next });\n                }\n                else if (isWNodeWrapper(current) && isWNodeWrapper(next)) {\n                    return _updateWidget({ current, next });\n                }\n            }\n            else if (current && !next) {\n                if (isVNodeWrapper(current)) {\n                    return _removeDom({ current });\n                }\n                else if (isWNodeWrapper(current)) {\n                    return _removeWidget({ current });\n                }\n            }\n        }\n        return {};\n    }\n    function createWidgetOptions(id, widgetId, middleware) {\n        return {\n            id,\n            properties: () => {\n                const widgetMeta = widgetMetaMap.get(widgetId);\n                if (widgetMeta) {\n                    widgetMeta.propertiesCalled = true;\n                    return Object.assign({}, widgetMeta.properties);\n                }\n                return {};\n            },\n            children: () => {\n                const widgetMeta = widgetMetaMap.get(widgetId);\n                if (widgetMeta) {\n                    return widgetMeta.children;\n                }\n                return [];\n            },\n            middleware\n        };\n    }\n    function resolveMiddleware(middlewares, id, middlewareIds = []) {\n        const keys = Object.keys(middlewares);\n        const results = {};\n        const uniqueId = `${id}-${metaId++}`;\n        for (let i = 0; i < keys.length; i++) {\n            const middleware = middlewares[keys[i]]();\n            const payload = createWidgetOptions(uniqueId, id);\n            if (middleware.middlewares) {\n                const { middlewares: resolvedMiddleware } = resolveMiddleware(middleware.middlewares, id, middlewareIds);\n                payload.middleware = resolvedMiddleware;\n                results[keys[i]] = middleware.callback(payload);\n            }\n            else {\n                results[keys[i]] = middleware.callback(payload);\n            }\n        }\n        middlewareIds.push(uniqueId);\n        return { middlewares: results, ids: middlewareIds };\n    }\n    function _createWidget({ next }) {\n        let { node: { widgetConstructor } } = next;\n        let { registry } = _mountOptions;\n        let Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            resolveRegistryItem(next);\n            if (!next.registryItem) {\n                return false;\n            }\n            Constructor = next.registryItem;\n        }\n        let rendered;\n        let invalidate;\n        next.properties = Object.assign({}, next.node.properties);\n        next.id = next.id || `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        const { id, depth, order } = next;\n        if (!isWidgetBaseConstructor(Constructor)) {\n            let widgetMeta = widgetMetaMap.get(id);\n            if (!widgetMeta) {\n                invalidate = () => {\n                    const widgetMeta = widgetMetaMap.get(id);\n                    if (widgetMeta) {\n                        widgetMeta.dirty = true;\n                        if (!widgetMeta.rendering && _idToWrapperMap.has(id)) {\n                            _invalidationQueue.push({ id, depth, order });\n                            _schedule();\n                        }\n                    }\n                };\n                widgetMeta = {\n                    widgetName: Constructor.name || 'unknown',\n                    mountNode: _mountOptions.domNode,\n                    dirty: false,\n                    invalidator: invalidate,\n                    properties: wrapFunctionProperties(id, next.node.properties),\n                    originalProperties: Object.assign({}, next.node.properties),\n                    children: next.node.children,\n                    deferRefs: 0,\n                    rendering: true,\n                    middleware: {},\n                    middlewareIds: [],\n                    registry: _mountOptions.registry,\n                    propertiesCalled: false\n                };\n                widgetMetaMap.set(next.id, widgetMeta);\n                if (Constructor.middlewares && Object.keys(Constructor.middlewares).length) {\n                    const { middlewares, ids } = resolveMiddleware(Constructor.middlewares, id);\n                    widgetMeta.middleware = middlewares;\n                    widgetMeta.middlewareIds = ids;\n                }\n            }\n            else {\n                invalidate = widgetMeta.invalidator;\n            }\n            rendered = Constructor(createWidgetOptions(id, id, widgetMeta.middleware));\n            widgetMeta.rendering = false;\n            widgetMeta.propertiesCalled = false;\n            if (widgetMeta.deferRefs > 0) {\n                return false;\n            }\n        }\n        else {\n            let instance = new Constructor();\n            instance.registry.base = registry;\n            const instanceData = widgetInstanceMap.get(instance);\n            invalidate = () => {\n                instanceData.dirty = true;\n                if (!instanceData.rendering && _idToWrapperMap.has(id)) {\n                    _invalidationQueue.push({ id, depth, order });\n                    _schedule();\n                }\n            };\n            instanceData.invalidate = invalidate;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            next.instance = instance;\n            rendered = instance.__render__();\n            instanceData.rendering = false;\n        }\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, null);\n            _idToChildrenWrappers.set(id, children);\n        }\n        if (!parentInvalidate && !Constructor.isWNodeWrapper) {\n            parentInvalidate = invalidate;\n        }\n        return {\n            item: {\n                next: children,\n                meta: { mergeNodes: next.mergeNodes }\n            },\n            widget: { type: 'attach', instance: next.instance, id, attached: true }\n        };\n    }\n    function _updateWidget({ current, next }) {\n        current = getWNodeWrapper(current.id) || current;\n        const { instance, domNode, hasAnimations, id } = current;\n        let { node: { widgetConstructor } } = next;\n        const Constructor = next.registryItem || widgetConstructor;\n        if (!isWidget(Constructor)) {\n            return {};\n        }\n        let rendered;\n        let processResult = {};\n        let didRender = false;\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        next.hasAnimations = hasAnimations;\n        next.id = id;\n        next.properties = Object.assign({}, next.node.properties);\n        _wrapperSiblingMap.delete(current);\n        if (domNode && domNode.parentNode) {\n            next.domNode = domNode;\n        }\n        if (!isWidgetBaseConstructor(Constructor)) {\n            const widgetMeta = widgetMetaMap.get(id);\n            if (widgetMeta) {\n                widgetMeta.originalProperties = Object.assign({}, next.properties);\n                widgetMeta.properties = wrapFunctionProperties(id, widgetMeta.originalProperties);\n                widgetMeta.children = next.node.children;\n                widgetMeta.rendering = true;\n                const customProperties = runDiffs(widgetMeta, current.properties, widgetMeta.originalProperties);\n                widgetMeta.properties = Object.assign({}, widgetMeta.properties, customProperties);\n                if (current.node.children.length > 0 || next.node.children.length > 0) {\n                    widgetMeta.dirty = true;\n                }\n                if (!widgetMeta.dirty) {\n                    propertiesDiff(current.properties, next.properties, () => {\n                        widgetMeta.dirty = true;\n                    }, widgetMeta.customDiffProperties ? [...widgetMeta.customDiffProperties.values()] : []);\n                }\n                if (widgetMeta.dirty) {\n                    _idToChildrenWrappers.delete(id);\n                    didRender = true;\n                    rendered = Constructor(createWidgetOptions(id, id, widgetMeta.middleware));\n                    widgetMeta.dirty = false;\n                    if (widgetMeta.deferRefs > 0) {\n                        rendered = null;\n                    }\n                }\n                widgetMeta.rendering = false;\n                widgetMeta.propertiesCalled = false;\n            }\n        }\n        else {\n            const instanceData = widgetInstanceMap.get(instance);\n            next.instance = instance;\n            instanceData.rendering = true;\n            instance.__setProperties__(next.node.properties);\n            instance.__setChildren__(next.node.children);\n            if (instanceData.dirty) {\n                didRender = true;\n                _idToChildrenWrappers.delete(id);\n                rendered = instance.__render__();\n            }\n            instanceData.rendering = false;\n        }\n        _idToWrapperMap.set(next.id, next);\n        processResult.widget = { type: 'attach', instance, id, attached: false };\n        let children;\n        if (rendered) {\n            rendered = Array.isArray(rendered) ? rendered : [rendered];\n            children = renderedToWrapper(rendered, next, current);\n            _idToChildrenWrappers.set(id, children);\n        }\n        if (didRender) {\n            processResult.item = {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            };\n        }\n        return processResult;\n    }\n    function _removeWidget({ current }) {\n        current = getWNodeWrapper(current.id) || current;\n        _idToWrapperMap.delete(current.id);\n        const meta = widgetMetaMap.get(current.id);\n        let currentChildren = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        let processResult = {\n            item: {\n                current: currentChildren,\n                meta: {}\n            }\n        };\n        if (meta) {\n            meta.registryHandler && meta.registryHandler.destroy();\n            destroyHandles(meta);\n            widgetMetaMap.delete(current.id);\n        }\n        else {\n            processResult.widget = { type: 'detach', current, instance: current.instance };\n        }\n        return processResult;\n    }\n    function findDomNodeOnParentWrapper(id) {\n        const children = _idToChildrenWrappers.get(id) || [];\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            if (child.domNode) {\n                return child.id;\n            }\n            const childId = findDomNodeOnParentWrapper(child.id);\n            if (childId) {\n                return childId;\n            }\n        }\n    }\n    function _createDom({ next }) {\n        const parentDomNode = findParentDomNode(next);\n        const isVirtual = isVirtualWrapper(next);\n        const isBody = isBodyWrapper(next);\n        const isHead = isHeadWrapper(next);\n        let mergeNodes = [];\n        next.id = `${wrapperId++}`;\n        _idToWrapperMap.set(next.id, next);\n        if (!next.domNode) {\n            if (next.node.domNode) {\n                next.domNode = next.node.domNode;\n            }\n            else {\n                if (next.node.tag === 'svg') {\n                    next.namespace = NAMESPACE_SVG;\n                }\n                if (isBody) {\n                    next.domNode = global.document.body;\n                }\n                else if (isHead) {\n                    next.domNode = global.document.head;\n                }\n                else if (next.node.tag && !isVirtual) {\n                    if (next.namespace) {\n                        next.domNode = global.document.createElementNS(next.namespace, next.node.tag);\n                    }\n                    else {\n                        next.domNode = global.document.createElement(next.node.tag);\n                    }\n                }\n                else if (next.node.text != null) {\n                    next.domNode = global.document.createTextNode(next.node.text);\n                }\n            }\n            if (_insertBeforeMap && _allMergedNodes.length) {\n                if (parentDomNode === _allMergedNodes[0].parentNode) {\n                    _insertBeforeMap.set(next, _allMergedNodes[0]);\n                }\n            }\n        }\n        else if (_mountOptions.merge) {\n            next.merged = true;\n            if (isTextNode(next.domNode)) {\n                if (next.domNode.data !== next.node.text) {\n                    _allMergedNodes = [next.domNode, ..._allMergedNodes];\n                    next.domNode = global.document.createTextNode(next.node.text);\n                    next.merged = false;\n                }\n            }\n            else {\n                mergeNodes = arrayFrom(next.domNode.childNodes);\n                _allMergedNodes = [..._allMergedNodes, ...mergeNodes];\n            }\n        }\n        let children;\n        if (next.domNode || isVirtual) {\n            if (next.node.children && next.node.children.length) {\n                children = renderedToWrapper(next.node.children, next, null);\n                _idToChildrenWrappers.set(next.id, children);\n            }\n        }\n        const dom = isSpecialWrapper(next)\n            ? undefined\n            : {\n                next: next,\n                parentDomNode: parentDomNode,\n                type: 'create'\n            };\n        if (children) {\n            return {\n                item: {\n                    current: [],\n                    next: children,\n                    meta: { mergeNodes }\n                },\n                dom,\n                widget: isVirtual ? { type: 'attach', id: next.id, attached: false } : undefined\n            };\n        }\n        return { dom };\n    }\n    function _updateDom({ current, next }) {\n        next.domNode = current.domNode;\n        next.namespace = current.namespace;\n        next.id = current.id;\n        next.childDomWrapperId = current.childDomWrapperId;\n        let children;\n        let currentChildren = _idToChildrenWrappers.get(next.id);\n        if (next.node.text != null && next.node.text !== current.node.text) {\n            next.domNode = global.document.createTextNode(next.node.text);\n        }\n        else if (next.node.children) {\n            children = renderedToWrapper(next.node.children, next, current);\n            _idToChildrenWrappers.set(next.id, children);\n        }\n        _wrapperSiblingMap.delete(current);\n        _idToWrapperMap.set(next.id, next);\n        return {\n            item: {\n                current: currentChildren,\n                next: children,\n                meta: {}\n            },\n            dom: { type: 'update', next, current }\n        };\n    }\n    function _removeDom({ current }) {\n        const isSpecial = isSpecialWrapper(current);\n        const children = _idToChildrenWrappers.get(current.id);\n        _idToChildrenWrappers.delete(current.id);\n        _idToWrapperMap.delete(current.id);\n        _wrapperSiblingMap.delete(current);\n        if (current.node.properties.key) {\n            const widgetMeta = widgetMetaMap.get(current.owningId);\n            const parentWrapper = getWNodeWrapper(current.owningId);\n            if (widgetMeta) {\n                widgetMeta.nodeMap && widgetMeta.nodeMap.delete(current.node.properties.key);\n            }\n            else if (parentWrapper && parentWrapper.instance) {\n                const instanceData = widgetInstanceMap.get(parentWrapper.instance);\n                instanceData && instanceData.nodeHandler.remove(current.node.properties.key);\n            }\n        }\n        if (current.hasAnimations || isSpecial) {\n            return {\n                item: { current: children, meta: {} },\n                dom: isSpecial ? undefined : { type: 'delete', current }\n            };\n        }\n        if (children) {\n            _deferredRenderCallbacks.push(() => {\n                let wrappers = children || [];\n                let wrapper;\n                let specialIds = [];\n                while ((wrapper = wrappers.pop())) {\n                    if (isWNodeWrapper(wrapper)) {\n                        wrapper = getWNodeWrapper(wrapper.id) || wrapper;\n                        if (wrapper.instance) {\n                            const instanceData = widgetInstanceMap.get(wrapper.instance);\n                            instanceData && instanceData.onDetach();\n                            wrapper.instance = undefined;\n                        }\n                        else {\n                            const meta = widgetMetaMap.get(wrapper.id);\n                            if (meta) {\n                                meta.registryHandler && meta.registryHandler.destroy();\n                                destroyHandles(meta);\n                                widgetMetaMap.delete(wrapper.id);\n                            }\n                        }\n                    }\n                    let wrapperChildren = _idToChildrenWrappers.get(wrapper.id);\n                    if (wrapperChildren) {\n                        wrappers.push(...wrapperChildren);\n                    }\n                    if (isBodyWrapper(wrapper) || isHeadWrapper(wrapper)) {\n                        specialIds.push(wrapper.id);\n                    }\n                    else if (specialIds.indexOf(wrapper.parentId) !== -1) {\n                        if (isWNodeWrapper(wrapper) || isVirtualWrapper(wrapper)) {\n                            specialIds.push(wrapper.id);\n                        }\n                        else if (wrapper.domNode && wrapper.domNode.parentNode) {\n                            wrapper.domNode.parentNode.removeChild(wrapper.domNode);\n                        }\n                    }\n                    _idToChildrenWrappers.delete(wrapper.id);\n                    _idToWrapperMap.delete(wrapper.id);\n                }\n            });\n        }\n        return {\n            dom: { type: 'delete', current }\n        };\n    }\n    return {\n        mount,\n        unmount,\n        invalidate\n    };\n}\nexport default renderer;\n//# sourceMappingURL=vdom.mjs.map","/**\n * Helper function to generate a value property descriptor\n *\n * @param value        The value the property descriptor should be set to\n * @param enumerable   If the property should be enumberable, defaults to false\n * @param writable     If the property should be writable, defaults to true\n * @param configurable If the property should be configurable, defaults to true\n * @return             The property descriptor object\n */\nexport function getValueDescriptor(value, enumerable = false, writable = true, configurable = true) {\n    return {\n        value: value,\n        enumerable: enumerable,\n        writable: writable,\n        configurable: configurable\n    };\n}\nexport function wrapNative(nativeFunction) {\n    return function (target, ...args) {\n        return nativeFunction.apply(target, args);\n    };\n}\n//# sourceMappingURL=util.mjs.map","import Map from '../shim/Map';\nimport { Destroyable } from './Destroyable';\n/**\n * Map of computed regular expressions, keyed by string\n */\nconst regexMap = new Map();\n/**\n * Determines if the event type glob has been matched\n *\n * @returns boolean that indicates if the glob is matched\n */\nexport function isGlobMatch(globString, targetString) {\n    if (typeof targetString === 'string' && typeof globString === 'string' && globString.indexOf('*') !== -1) {\n        let regex;\n        if (regexMap.has(globString)) {\n            regex = regexMap.get(globString);\n        }\n        else {\n            regex = new RegExp(`^${globString.replace(/\\*/g, '.*')}$`);\n            regexMap.set(globString, regex);\n        }\n        return regex.test(targetString);\n    }\n    else {\n        return globString === targetString;\n    }\n}\n/**\n * Event Class\n */\nexport class Evented extends Destroyable {\n    constructor() {\n        super(...arguments);\n        /**\n         * map of listeners keyed by event type\n         */\n        this.listenersMap = new Map();\n    }\n    emit(event) {\n        this.listenersMap.forEach((methods, type) => {\n            if (isGlobMatch(type, event.type)) {\n                [...methods].forEach((method) => {\n                    method.call(this, event);\n                });\n            }\n        });\n    }\n    on(type, listener) {\n        if (Array.isArray(listener)) {\n            const handles = listener.map((listener) => this._addListener(type, listener));\n            return {\n                destroy() {\n                    handles.forEach((handle) => handle.destroy());\n                }\n            };\n        }\n        return this._addListener(type, listener);\n    }\n    _addListener(type, listener) {\n        const listeners = this.listenersMap.get(type) || [];\n        listeners.push(listener);\n        this.listenersMap.set(type, listeners);\n        return {\n            destroy: () => {\n                const listeners = this.listenersMap.get(type) || [];\n                listeners.splice(listeners.indexOf(listener), 1);\n            }\n        };\n    }\n}\nexport default Evented;\n//# sourceMappingURL=Evented.mjs.map","/* tslint:disable:interface-name */\nimport Map from '../../shim/Map';\nimport { create, invalidator, destroy } from '../vdom';\nconst factory = create({ invalidator, destroy });\nexport function createICacheMiddleware() {\n    const icache = factory(({ middleware: { invalidator, destroy } }) => {\n        const cacheMap = new Map();\n        destroy(() => {\n            cacheMap.clear();\n        });\n        const api = {\n            get: (key) => {\n                const cachedValue = cacheMap.get(key);\n                if (!cachedValue || cachedValue.status === 'pending') {\n                    return undefined;\n                }\n                return cachedValue.value;\n            }\n        };\n        api.set = (key, value, invalidate = true) => {\n            const current = api.get(key);\n            if (typeof value === 'function') {\n                value = value(current);\n                if (value && typeof value.then === 'function') {\n                    cacheMap.set(key, {\n                        status: 'pending',\n                        value\n                    });\n                    value.then((result) => {\n                        const cachedValue = cacheMap.get(key);\n                        if (cachedValue && cachedValue.value === value) {\n                            cacheMap.set(key, {\n                                status: 'resolved',\n                                value: result\n                            });\n                            invalidate && invalidator();\n                        }\n                    });\n                    return undefined;\n                }\n            }\n            cacheMap.set(key, {\n                status: 'resolved',\n                value\n            });\n            invalidate && invalidator();\n            return value;\n        };\n        api.has = (key) => {\n            return cacheMap.has(key);\n        };\n        api.delete = (key, invalidate = true) => {\n            cacheMap.delete(key);\n            invalidate && invalidator();\n        };\n        api.clear = (invalidate = true) => {\n            cacheMap.clear();\n            invalidate && invalidator();\n        };\n        api.getOrSet = (key, value, invalidate = true) => {\n            let cachedValue = cacheMap.get(key);\n            if (!cachedValue) {\n                api.set(key, value, invalidate);\n            }\n            cachedValue = cacheMap.get(key);\n            if (!cachedValue || cachedValue.status === 'pending') {\n                return undefined;\n            }\n            return cachedValue.value;\n        };\n        return api;\n    });\n    return icache;\n}\nexport const icache = createICacheMiddleware();\nexport default icache;\n//# sourceMappingURL=icache.mjs.map","var isArrayLike = undefined, isIterable = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\nimport { wrapNative } from './support/util';\nexport let from;\nexport let of;\nexport let copyWithin;\nexport let fill;\nexport let find;\nexport let findIndex;\nexport let includes;\nexport let flat;\nexport let flatMap;\nlet toLength;\nlet toInteger;\nlet normalizeOffset;\nif (!true || !true || !true) {\n    const MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\n    /**\n     * Ensures a non-negative, non-infinite, safe integer.\n     *\n     * @param length The number to validate\n     * @return A proper length\n     */\n    toLength = function toLength(length) {\n        if (isNaN(length)) {\n            return 0;\n        }\n        length = Number(length);\n        if (isFinite(length)) {\n            length = Math.floor(length);\n        }\n        // Ensure a non-negative, real, safe integer\n        return Math.min(Math.max(length, 0), MAX_SAFE_INTEGER);\n    };\n    /**\n     * From ES6 7.1.4 ToInteger()\n     *\n     * @param value A value to convert\n     * @return An integer\n     */\n    toInteger = function toInteger(value) {\n        value = Number(value);\n        if (isNaN(value)) {\n            return 0;\n        }\n        if (value === 0 || !isFinite(value)) {\n            return value;\n        }\n        return (value > 0 ? 1 : -1) * Math.floor(Math.abs(value));\n    };\n    /**\n     * Normalizes an offset against a given length, wrapping it if negative.\n     *\n     * @param value The original offset\n     * @param length The total length to normalize against\n     * @return If negative, provide a distance from the end (length); otherwise provide a distance from 0\n     */\n    normalizeOffset = function normalizeOffset(value, length) {\n        return value < 0 ? Math.max(length + value, 0) : Math.min(value, length);\n    };\n}\nif (!true) {\n    Array.from = function from(arrayLike, mapFunction, thisArg) {\n        if (arrayLike == null) {\n            throw new TypeError('from: requires an array-like object');\n        }\n        if (mapFunction && thisArg) {\n            mapFunction = mapFunction.bind(thisArg);\n        }\n        /* tslint:disable-next-line:variable-name */\n        const Constructor = this;\n        const length = toLength(arrayLike.length);\n        // Support extension\n        const array = typeof Constructor === 'function' ? Object(new Constructor(length)) : new Array(length);\n        if (!isArrayLike(arrayLike) && !isIterable(arrayLike)) {\n            return array;\n        }\n        // if this is an array and the normalized length is 0, just return an empty array. this prevents a problem\n        // with the iteration on IE when using a NaN array length.\n        if (isArrayLike(arrayLike)) {\n            if (length === 0) {\n                return [];\n            }\n            for (let i = 0; i < arrayLike.length; i++) {\n                array[i] = mapFunction ? mapFunction(arrayLike[i], i) : arrayLike[i];\n            }\n        }\n        else {\n            let i = 0;\n            for (const value of arrayLike) {\n                array[i] = mapFunction ? mapFunction(value, i) : value;\n                i++;\n            }\n        }\n        if (arrayLike.length !== undefined) {\n            array.length = length;\n        }\n        return array;\n    };\n    Array.of = function of(...items) {\n        return Array.prototype.slice.call(items);\n    };\n    Array.prototype.copyWithin = function copyWithin(offset, start, end) {\n        if (this == null) {\n            throw new TypeError('copyWithin: target must be an array-like object');\n        }\n        const length = toLength(this.length);\n        offset = normalizeOffset(toInteger(offset), length);\n        start = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        let count = Math.min(end - start, length - offset);\n        let direction = 1;\n        if (offset > start && offset < start + count) {\n            direction = -1;\n            start += count - 1;\n            offset += count - 1;\n        }\n        while (count > 0) {\n            if (start in this) {\n                this[offset] = this[start];\n            }\n            else {\n                delete this[offset];\n            }\n            offset += direction;\n            start += direction;\n            count--;\n        }\n        return this;\n    };\n    Array.prototype.find = function find(callback, thisArg) {\n        const index = this.findIndex(callback, thisArg);\n        return index !== -1 ? this[index] : undefined;\n    };\n    Array.prototype.findIndex = function findIndex(callback, thisArg) {\n        const length = toLength(this.length);\n        if (!callback) {\n            throw new TypeError('find: second argument must be a function');\n        }\n        if (thisArg) {\n            callback = callback.bind(thisArg);\n        }\n        for (let i = 0; i < length; i++) {\n            if (callback(this[i], i, this)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\nif (!true) {\n    Array.prototype.fill = function fill(value, start, end) {\n        const length = toLength(this.length);\n        let i = normalizeOffset(toInteger(start), length);\n        end = normalizeOffset(end === undefined ? length : toInteger(end), length);\n        while (i < (end || 0)) {\n            this[i++] = value;\n        }\n        return this;\n    };\n}\nif (!true) {\n    Array.prototype.includes = function includes(searchElement, fromIndex = 0) {\n        let len = toLength(this.length);\n        for (let i = fromIndex; i < len; ++i) {\n            const currentElement = this[i];\n            if (searchElement === currentElement ||\n                (searchElement !== searchElement && currentElement !== currentElement)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nif (!true) {\n    Array.prototype.flat = function flat(depth = 1) {\n        return depth > 0\n            ? this.reduce((acc, val) => acc.concat(Array.isArray(val) ? val.flat(depth - 1) : val), [])\n            : this.slice();\n    };\n    Array.prototype.flatMap = function flatMap(callback) {\n        return this.map(callback).flat();\n    };\n}\nfrom = Array.from;\nof = Array.of;\ncopyWithin = wrapNative(Array.prototype.copyWithin);\nfill = wrapNative(Array.prototype.fill);\nfind = wrapNative(Array.prototype.find);\nflat = wrapNative(Array.prototype.flat);\nflatMap = wrapNative(Array.prototype.flatMap);\nfindIndex = wrapNative(Array.prototype.findIndex);\nincludes = wrapNative(Array.prototype.includes);\nexport default Array;","import { DNode, RenderResult } from '@dojo/framework/core/interfaces';\nimport { isVNode, isWNode } from '@dojo/framework/core/vdom';\n\ninterface AriaPropertyObject {\n\t[key: string]: string | null;\n}\n\nexport enum Keys {\n\tDown = 40,\n\tEnd = 35,\n\tEnter = 13,\n\tEscape = 27,\n\tHome = 36,\n\tLeft = 37,\n\tPageDown = 34,\n\tPageUp = 33,\n\tRight = 39,\n\tSpace = 32,\n\tTab = 9,\n\tUp = 38\n}\n\nexport function formatAriaProperties(aria: AriaPropertyObject): AriaPropertyObject {\n\tconst formattedAria = Object.keys(aria).reduce((a: AriaPropertyObject, key: string) => {\n\t\ta[`aria-${key.toLowerCase()}`] = aria[key];\n\t\treturn a;\n\t}, {});\n\treturn formattedAria;\n}\n\nexport function isRenderResult<T extends {}>(child: RenderResult | T): child is RenderResult {\n\tlet childIsRenderResult =\n\t\tchild == null ||\n\t\ttypeof child === 'string' ||\n\t\ttypeof child === 'boolean' ||\n\t\tArray.isArray(child) ||\n\t\tisWNode(child);\n\ttry {\n\t\tchildIsRenderResult = childIsRenderResult || isVNode(child as DNode);\n\t} catch {}\n\n\treturn childIsRenderResult;\n}\n","import { Map } from '../shim/Map';\nimport { Evented } from '../core/Evented';\nimport { Registry } from './Registry';\nexport class RegistryHandler extends Evented {\n    constructor() {\n        super();\n        this._registry = new Registry();\n        this._registryWidgetLabelMap = new Map();\n        this._registryInjectorLabelMap = new Map();\n        this.own(this._registry);\n        const destroy = () => {\n            if (this.baseRegistry) {\n                this._registryWidgetLabelMap.delete(this.baseRegistry);\n                this._registryInjectorLabelMap.delete(this.baseRegistry);\n                this.baseRegistry = undefined;\n            }\n        };\n        this.own({ destroy });\n    }\n    set base(baseRegistry) {\n        if (this.baseRegistry) {\n            this._registryWidgetLabelMap.delete(this.baseRegistry);\n            this._registryInjectorLabelMap.delete(this.baseRegistry);\n        }\n        this.baseRegistry = baseRegistry;\n    }\n    get base() {\n        return this.baseRegistry;\n    }\n    define(label, widget) {\n        this._registry.define(label, widget);\n    }\n    defineInjector(label, injector) {\n        this._registry.defineInjector(label, injector);\n    }\n    has(label) {\n        return this._registry.has(label) || Boolean(this.baseRegistry && this.baseRegistry.has(label));\n    }\n    hasInjector(label) {\n        return this._registry.hasInjector(label) || Boolean(this.baseRegistry && this.baseRegistry.hasInjector(label));\n    }\n    get(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n    }\n    getInjector(label, globalPrecedence = false) {\n        return this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n    }\n    _get(label, globalPrecedence, getFunctionName, labelMap) {\n        const registries = globalPrecedence ? [this.baseRegistry, this._registry] : [this._registry, this.baseRegistry];\n        for (let i = 0; i < registries.length; i++) {\n            const registry = registries[i];\n            if (!registry) {\n                continue;\n            }\n            const item = registry[getFunctionName](label);\n            const registeredLabels = labelMap.get(registry) || [];\n            if (item) {\n                return item;\n            }\n            else if (registeredLabels.indexOf(label) === -1) {\n                const handle = registry.on(label, (event) => {\n                    if (event.action === 'loaded' &&\n                        this[getFunctionName](label, globalPrecedence) === event.item) {\n                        this.emit({ type: 'invalidate' });\n                    }\n                });\n                this.own(handle);\n                labelMap.set(registry, [...registeredLabels, label]);\n            }\n        }\n        return null;\n    }\n}\nexport default RegistryHandler;\n//# sourceMappingURL=RegistryHandler.mjs.map","import { create } from '@dojo/framework/core/vdom';\nimport coreTheme, {\n\tThemeProperties as CoreThemeProperties\n} from '@dojo/framework/core/middleware/theme';\nimport { ThemeWithVariant, ClassNames, Theme } from '@dojo/framework/core/interfaces';\nimport { isThemeInjectorPayloadWithVariant } from '@dojo/framework/core/ThemeInjector';\n\nconst factory = create({ coreTheme });\nexport const THEME_KEY = ' _key';\n\nfunction uppercaseFirstChar(value: string) {\n\treturn `${value.charAt(0).toUpperCase()}${value.slice(1)}`;\n}\n\nfunction lowercaseFirstChar(value: string) {\n\treturn `${value.charAt(0).toLowerCase()}${value.slice(1)}`;\n}\n\nfunction isThemeWithVariant(theme: any): theme is ThemeWithVariant {\n\treturn theme && theme.hasOwnProperty('variant');\n}\n\nexport interface ThemeProperties extends CoreThemeProperties {}\n\nexport const theme = factory(function({ middleware: { coreTheme }, properties }) {\n\tfunction getTheme() {\n\t\tconst { theme } = properties();\n\t\tif (theme) {\n\t\t\treturn theme;\n\t\t}\n\n\t\tconst themePayload = coreTheme.get();\n\t\tif (isThemeInjectorPayloadWithVariant(themePayload)) {\n\t\t\treturn { theme: themePayload.theme, variant: themePayload.variant };\n\t\t} else if (themePayload) {\n\t\t\treturn themePayload.theme;\n\t\t}\n\t}\n\n\treturn {\n\t\tcompose: <T extends ClassNames, B extends ClassNames>(\n\t\t\tbaseCss: B,\n\t\t\tcss: T,\n\t\t\tprefix?: string\n\t\t): Theme | ThemeWithVariant => {\n\t\t\tconst theme = getTheme();\n\t\t\tconst baseKey = baseCss[THEME_KEY];\n\t\t\tconst variantKey = css[THEME_KEY];\n\t\t\tconst virtualCss = Object.keys(baseCss).reduce(\n\t\t\t\t(virtualCss, key) => {\n\t\t\t\t\tif (key === THEME_KEY) {\n\t\t\t\t\t\treturn virtualCss;\n\t\t\t\t\t}\n\t\t\t\t\tif (prefix && !virtualCss[`${prefix}${uppercaseFirstChar(key)}`]) {\n\t\t\t\t\t\tvirtualCss[`${prefix}${uppercaseFirstChar(key)}`] = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tif (!css[key]) {\n\t\t\t\t\t\tvirtualCss[key] = ' ';\n\t\t\t\t\t}\n\t\t\t\t\treturn virtualCss;\n\t\t\t\t},\n\t\t\t\t{ [THEME_KEY]: variantKey } as ClassNames\n\t\t\t);\n\t\t\tconst virtualTheme = coreTheme.classes(virtualCss);\n\t\t\tconst variantTheme = coreTheme.classes(css);\n\t\t\tlet baseTheme = coreTheme.classes(baseCss);\n\t\t\tif (prefix) {\n\t\t\t\tconst prefixedCss = Object.keys({ ...virtualTheme, ...variantTheme }).reduce(\n\t\t\t\t\t(prefixCss, key) => {\n\t\t\t\t\t\tif (key.indexOf(prefix) === 0 && key !== prefix) {\n\t\t\t\t\t\t\tconst classKey = lowercaseFirstChar(key.replace(prefix, ''));\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!variantTheme[key] &&\n\t\t\t\t\t\t\t\tvirtualTheme[key] &&\n\t\t\t\t\t\t\t\tvirtualTheme[key].trim()\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tprefixCss[classKey] = `${baseTheme[classKey]} ${virtualTheme[\n\t\t\t\t\t\t\t\t\tkey\n\t\t\t\t\t\t\t\t].trim()}`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (variantTheme[key]) {\n\t\t\t\t\t\t\t\tprefixCss[classKey] = variantTheme[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn prefixCss;\n\t\t\t\t\t},\n\t\t\t\t\t{} as ClassNames\n\t\t\t\t);\n\t\t\t\tbaseTheme = { ...baseTheme, ...prefixedCss };\n\n\t\t\t\tif (isThemeWithVariant(theme)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttheme: {\n\t\t\t\t\t\t\ttheme: {\n\t\t\t\t\t\t\t\t...theme.theme.theme,\n\t\t\t\t\t\t\t\t[baseKey]: baseTheme\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvariants: theme.theme.variants\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvariant: theme.variant\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...theme,\n\t\t\t\t\t[baseKey]: baseTheme\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst constructedTheme = Object.keys(baseTheme).reduce(\n\t\t\t\t(theme, key) => {\n\t\t\t\t\tif (key === THEME_KEY) {\n\t\t\t\t\t\treturn theme;\n\t\t\t\t\t}\n\t\t\t\t\tconst variantComposesClass = variantTheme[key] && variantTheme[key].trim();\n\t\t\t\t\tif (variantTheme[key]) {\n\t\t\t\t\t\ttheme[key] = variantComposesClass;\n\t\t\t\t\t} else if (virtualTheme[key] && virtualTheme[key].trim()) {\n\t\t\t\t\t\ttheme[key] = `${theme[key]} ${virtualTheme[key].trim()}`;\n\t\t\t\t\t}\n\t\t\t\t\treturn theme;\n\t\t\t\t},\n\t\t\t\t{ ...baseTheme } as ClassNames\n\t\t\t);\n\n\t\t\tif (isThemeWithVariant(theme)) {\n\t\t\t\treturn {\n\t\t\t\t\ttheme: {\n\t\t\t\t\t\ttheme: {\n\t\t\t\t\t\t\t...theme.theme.theme,\n\t\t\t\t\t\t\t[baseKey]: constructedTheme\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvariants: theme.theme.variants\n\t\t\t\t\t},\n\t\t\t\t\tvariant: theme.variant\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...theme,\n\t\t\t\t[baseKey]: constructedTheme\n\t\t\t};\n\t\t},\n\t\t...coreTheme\n\t};\n});\n\nexport default theme;\n","/*** IMPORTS FROM imports-loader ***/\nvar widgetFactory = require(\"src/button\");\n\nvar registerCustomElement = require('@dojo/framework/core/registerCustomElement').default;\n\nvar defaultExport = widgetFactory.default;\ndefaultExport && registerCustomElement(defaultExport);\n\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { create, invalidator, diffProperty, getRegistry } from '../vdom';\nimport icache from './icache';\nimport injector from './injector';\nimport Set from '../../shim/Set';\nimport { auto } from '../diff';\nimport { ThemeInjector, isThemeInjectorPayloadWithVariant, isThemeWithVariants, isThemeWithVariant } from '../ThemeInjector';\nexport const THEME_KEY = ' _key';\nexport const INJECTED_THEME_KEY = '__theme_injector';\nfunction registerThemeInjector(theme, themeRegistry) {\n    const themeInjector = new ThemeInjector(theme);\n    themeRegistry.defineInjector(INJECTED_THEME_KEY, (invalidator) => {\n        themeInjector.setInvalidator(invalidator);\n        return () => themeInjector;\n    });\n    return themeInjector;\n}\nconst factory = create({ invalidator, icache, diffProperty, injector, getRegistry }).properties();\nexport const theme = factory(({ middleware: { invalidator, icache, diffProperty, injector, getRegistry }, properties }) => {\n    let themeKeys = new Set();\n    diffProperty('theme', properties, (current, next) => {\n        const { changed } = auto(current.theme, next.theme, 3);\n        if (changed) {\n            icache.clear();\n            invalidator();\n        }\n    });\n    diffProperty('classes', (current, next) => {\n        let result = false;\n        if ((current.classes && !next.classes) || (!current.classes && next.classes)) {\n            result = true;\n        }\n        else if (current.classes && next.classes) {\n            const keys = [...themeKeys.values()];\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                result = auto(current.classes[key], next.classes[key], 2).changed;\n                if (result) {\n                    break;\n                }\n            }\n        }\n        if (result) {\n            icache.clear();\n            invalidator();\n        }\n    });\n    function getTheme() {\n        const { theme } = properties();\n        if (theme) {\n            return theme;\n        }\n        const themeInjector = injector.get(INJECTED_THEME_KEY);\n        if (themeInjector) {\n            const themePayload = themeInjector.get();\n            if (isThemeInjectorPayloadWithVariant(themePayload)) {\n                return { theme: themePayload.theme, variant: themePayload.variant };\n            }\n            else if (themePayload) {\n                return themePayload.theme;\n            }\n        }\n    }\n    const themeInjector = injector.get(INJECTED_THEME_KEY);\n    if (!themeInjector) {\n        const registry = getRegistry();\n        if (registry) {\n            registerThemeInjector(undefined, registry.base);\n        }\n    }\n    injector.subscribe(INJECTED_THEME_KEY, () => {\n        icache.clear();\n        invalidator();\n    });\n    function set(theme, variant) {\n        const currentTheme = injector.get(INJECTED_THEME_KEY);\n        if (currentTheme) {\n            if (isThemeWithVariants(theme)) {\n                currentTheme.set(theme, variant);\n            }\n            else {\n                currentTheme.set(theme);\n            }\n        }\n    }\n    return {\n        classes(css) {\n            const cachedTheme = icache.get(css);\n            if (cachedTheme) {\n                return cachedTheme;\n            }\n            const _a = THEME_KEY, key = css[_a], classes = __rest(css, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n            themeKeys.add(key);\n            let theme = classes;\n            let { classes: currentClasses } = properties();\n            let currentTheme = getTheme();\n            if (currentTheme && isThemeWithVariant(currentTheme)) {\n                currentTheme = isThemeWithVariants(currentTheme.theme)\n                    ? currentTheme.theme.theme\n                    : currentTheme.theme;\n            }\n            if (currentTheme && currentTheme[key]) {\n                theme = Object.assign({}, theme, currentTheme[key]);\n            }\n            if (currentClasses && currentClasses[key]) {\n                const classKeys = Object.keys(currentClasses[key]);\n                for (let i = 0; i < classKeys.length; i++) {\n                    const classKey = classKeys[i];\n                    if (theme[classKey]) {\n                        theme[classKey] = `${theme[classKey]} ${currentClasses[key][classKey].join(' ')}`;\n                    }\n                }\n            }\n            icache.set(css, theme, false);\n            return theme;\n        },\n        variant() {\n            const theme = getTheme();\n            if (theme && isThemeWithVariant(theme)) {\n                return theme.variant.value.root;\n            }\n        },\n        set,\n        get() {\n            const currentTheme = injector.get(INJECTED_THEME_KEY);\n            if (currentTheme) {\n                return currentTheme.get();\n            }\n        }\n    };\n});\nexport default theme;\n//# sourceMappingURL=theme.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport Map from '../../shim/Map';\nimport Set from '../../shim/Set';\nimport { create, diffProperty, invalidator, destroy } from '../vdom';\nimport { isThenable } from '../../shim/Promise';\nimport { auto } from '../diff';\nexport function createResourceTemplate(template) {\n    return template;\n}\nexport function createResourceTemplateWithInit(template) {\n    return template;\n}\nexport function createMemoryResourceTemplate() {\n    return Object.assign({}, memoryTemplate);\n}\nexport function defaultFilter(query, item, type = 'contains') {\n    const queryKeys = Object.keys(query);\n    for (let i = 0; i < queryKeys.length; i++) {\n        const queryKey = queryKeys[i];\n        const value = query[queryKeys[i]];\n        if (value) {\n            const itemValue = item[queryKey];\n            let result = true;\n            if (typeof itemValue === 'string' && typeof value === 'string' && type !== 'exact') {\n                if (type === 'contains') {\n                    result = item[queryKey].toLowerCase().indexOf(value.toLowerCase()) !== -1;\n                }\n                else {\n                    result = item[queryKey].toLowerCase().indexOf(value.toLowerCase()) === 0;\n                }\n            }\n            else {\n                result = value === item[queryKey];\n            }\n            if (!result) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nexport function defaultFind(request, { put, get }) {\n    const { type, options } = request;\n    const { query } = options;\n    const { data } = get({ query });\n    let found;\n    for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        if (item && defaultFilter(request.query, item, type)) {\n            if (!found || i >= request.start) {\n                found = {\n                    item,\n                    index: i\n                };\n                if (i >= request.start) {\n                    break;\n                }\n            }\n        }\n    }\n    put(found, request);\n}\nexport const memoryTemplate = Object.freeze({\n    init: ({ data }, { put }) => {\n        put({ data, total: data.length }, { offset: 0, size: 30, query: {} });\n    },\n    read: (request, { get, put }) => {\n        const { data } = get();\n        const { offset, size } = request;\n        const filteredData = Object.keys(request.query).length\n            ? data.filter((item) => item && defaultFilter(request.query, item, 'contains'))\n            : data;\n        put({ data: filteredData.slice(offset, offset + size), total: filteredData.length }, request);\n    },\n    find: (request, { get, put }) => {\n        const { type, options } = request;\n        const { query } = options;\n        let { data } = get({ query });\n        if (!data.length) {\n            data = get().data.filter((item) => defaultFilter(query, item));\n        }\n        let found;\n        for (let i = 0; i < data.length; i++) {\n            const item = data[i];\n            if (item && defaultFilter(request.query, item, type)) {\n                if (!found || i >= request.start) {\n                    found = {\n                        item,\n                        index: i\n                    };\n                    if (i >= request.start) {\n                        break;\n                    }\n                }\n            }\n        }\n        put(found, request);\n    }\n});\nfunction getMetaKey({ query, size }) {\n    return `size-${size}-query-${JSON.stringify(query)}`;\n}\nfunction getFindKey(findOptions) {\n    const _a = getFindOptions(findOptions), { options } = _a, find = __rest(_a, [\"options\"]);\n    return `size-${options.size}-query-${JSON.stringify(options.query)}-find-${JSON.stringify(find)}`;\n}\nfunction getReadKey({ page, size, query }) {\n    return `page-${JSON.stringify(page)}-size-${size}-query-${JSON.stringify(query)}`;\n}\nfunction getDataKey({ query = {} } = {}) {\n    return `${JSON.stringify(query)}`;\n}\nfunction getFindOptions(findOptions) {\n    const { type = 'contains', start, query, options } = findOptions;\n    return { type, start, query, options };\n}\nfunction isFindOptions(options) {\n    return Boolean(options && !!options.options);\n}\nfunction isFindRequest(options) {\n    return isFindOptions(options);\n}\nfunction isFindResponse(options) {\n    return Boolean(options && !!options.item);\n}\nfunction transformData(item, transformConfig) {\n    let transformedItem = {};\n    let sourceKeys = [];\n    Object.keys(transformConfig).forEach((key) => {\n        const sourceKey = transformConfig[key];\n        transformedItem = Object.assign({}, transformedItem, { [key]: item[sourceKey] });\n        sourceKeys.push(sourceKey);\n    });\n    Object.keys(item)\n        .filter((key) => sourceKeys.indexOf(key) === -1)\n        .forEach((key) => {\n        transformedItem = Object.assign({}, transformedItem, { [key]: item[key] });\n    });\n    return transformedItem;\n}\nfunction transformQuery(query, transformConfig) {\n    const queryKeys = Object.keys(query);\n    let transformedQuery = {};\n    for (let i = 0; i < queryKeys.length; i++) {\n        const queryKey = queryKeys[i];\n        transformedQuery[transformConfig[queryKey] || queryKey] = query[queryKey];\n    }\n    return transformedQuery;\n}\nfunction transformOptions(options, transformConfig) {\n    if (transformConfig) {\n        if (isFindOptions(options) && options.options.query) {\n            const query = transformQuery(options.options.query, transformConfig);\n            options.options = Object.assign({}, options.options, { query });\n        }\n        if (options.query && transformConfig) {\n            const query = transformQuery(options.query, transformConfig);\n            return Object.assign({}, options, { query });\n        }\n    }\n    return Object.assign({}, options);\n}\nfunction isTemplateWithInit(value) {\n    return Boolean(value && value.init);\n}\nfunction diffInitOptions(current, next) {\n    const keys = new Set([...Object.keys(current), ...Object.keys(next)]);\n    return [...keys].some((initKey) => auto(current[initKey], next[initKey], 1).changed);\n}\nfunction createResource(template, initOptions) {\n    const dataMap = new Map();\n    const metaMap = new Map();\n    const statusMap = new Map();\n    const findMap = new Map();\n    const requestPageMap = new Map();\n    const invalidatorMaps = {\n        read: new Map(),\n        find: new Map(),\n        meta: new Map(),\n        failed: new Map(),\n        loading: new Map()\n    };\n    const { read, find } = template;\n    function get(request = {}) {\n        const dataKey = getDataKey(request);\n        const data = dataMap.get(dataKey) || [];\n        return { data, total: data.length };\n    }\n    function put(response, request) {\n        if (isFindRequest(request) && (isFindResponse(response) || !response)) {\n            setFind(response, request);\n        }\n        else if (!isFindRequest(request) && !isFindResponse(response) && response) {\n            setData(response, request);\n        }\n    }\n    if (isTemplateWithInit(template)) {\n        template.init(initOptions, { put, get });\n    }\n    function invalidate(type, key) {\n        const keyedInvalidatorMap = invalidatorMaps[type];\n        const invalidatorSet = keyedInvalidatorMap.get(key);\n        if (invalidatorSet) {\n            [...invalidatorSet].forEach((invalidator) => {\n                invalidator();\n            });\n        }\n    }\n    function invalidateAll() {\n        Object.keys(invalidatorMaps).forEach((key) => {\n            const map = invalidatorMaps[key];\n            map.forEach((invalidatorSet) => {\n                invalidatorSet.forEach((invalidator) => {\n                    invalidator();\n                });\n            });\n        });\n    }\n    function subscribe(type, invalidator, key) {\n        const keyedInvalidatorMap = invalidatorMaps[type];\n        const invalidatorSet = keyedInvalidatorMap.get(key) || new Set();\n        invalidatorSet.add(invalidator);\n        keyedInvalidatorMap.set(key, invalidatorSet);\n    }\n    function subscribeRead(invalidator, options) {\n        subscribe('read', invalidator, getReadKey(options));\n    }\n    function subscribeMeta(invalidator, options) {\n        subscribe('meta', invalidator, getReadKey(options));\n    }\n    function subscribeFind(invalidator, options) {\n        subscribe('find', invalidator, getFindKey(options));\n    }\n    function subscribeLoading(invalidator, options) {\n        if (isFindOptions(options)) {\n            subscribe('loading', invalidator, getFindKey(options));\n        }\n        else {\n            subscribe('loading', invalidator, getReadKey(options));\n        }\n    }\n    function subscribeFailed(invalidator, options) {\n        if (isFindOptions(options)) {\n            subscribe('failed', invalidator, getFindKey(options));\n        }\n        else {\n            subscribe('failed', invalidator, getReadKey(options));\n        }\n    }\n    function unsubscribe(invalidator) {\n        Object.keys(invalidatorMaps).forEach((type) => {\n            const keyedInvalidatorMap = invalidatorMaps[type];\n            const keys = keyedInvalidatorMap.keys();\n            [...keys].forEach((key) => {\n                const invalidatorSet = keyedInvalidatorMap.get(key);\n                if (invalidatorSet && invalidatorSet.has(invalidator)) {\n                    invalidatorSet.delete(invalidator);\n                    if (invalidatorSet.size === 0) {\n                        keyedInvalidatorMap.delete(key);\n                    }\n                    else {\n                        keyedInvalidatorMap.set(key, invalidatorSet);\n                    }\n                }\n            });\n        });\n    }\n    function releaseResource() {\n        dataMap.clear();\n        metaMap.clear();\n        statusMap.clear();\n        requestPageMap.clear();\n    }\n    function isStatus(statusType, key) {\n        const status = statusMap.get(key);\n        if (status) {\n            return status === statusType;\n        }\n        return false;\n    }\n    function setStatus(status, key) {\n        statusMap.set(key, status);\n    }\n    function clearStatus(key) {\n        statusMap.delete(key);\n    }\n    function isLoading(options) {\n        const key = isFindOptions(options) ? getFindKey(options) : getReadKey(options);\n        return isStatus('LOADING', key);\n    }\n    function isFailed(options) {\n        const key = isFindOptions(options) ? getFindKey(options) : getReadKey(options);\n        return isStatus('FAILED', key);\n    }\n    function setMeta(options, total) {\n        const metaKey = getMetaKey(options);\n        let meta = metaMap.get(metaKey);\n        if (!meta) {\n            meta = Object.assign({}, options, { total });\n        }\n        else {\n            if (!meta.total || total > meta.total) {\n                meta.total = total;\n            }\n        }\n        invalidate('meta', getMetaKey(options));\n        metaMap.set(metaKey, Object.assign({}, meta));\n    }\n    function setData(response, request) {\n        const { data, total } = response;\n        const { size, offset, query } = request;\n        const dataKey = getDataKey(request);\n        const cachedData = dataMap.get(dataKey) || [];\n        const maxItem = total ? total : offset + data.length;\n        for (let i = offset; i < maxItem; i += 1) {\n            if (data[i - offset] === undefined) {\n                break;\n            }\n            cachedData[i] = data[i - offset];\n        }\n        clearStatus(dataKey);\n        dataMap.set(dataKey, cachedData);\n        const page = Math.floor(offset / size) + 1;\n        setMeta({ size, query, page }, total);\n        invalidate('read', getReadKey({ size, query, page }));\n        return cachedData.slice(offset, offset + size).filter(() => true);\n    }\n    function setFind(response, request) {\n        const { options } = request;\n        const { size } = options;\n        const key = getFindKey(request);\n        if (!response) {\n            findMap.set(key, response);\n        }\n        else {\n            findMap.set(key, Object.assign({}, response, { page: Math.floor(response.index / size) + 1, pageIndex: response.index % size }));\n        }\n        clearStatus(key);\n        invalidate('find', getFindKey(request));\n    }\n    function getCachedPageData(options) {\n        const { size, page } = options;\n        const metaKey = getMetaKey(options);\n        const dataKey = getDataKey(options);\n        const requestedPages = requestPageMap.get(metaKey) || [];\n        const cachedData = dataMap.get(dataKey);\n        if (cachedData) {\n            const offset = (page - 1) * size;\n            const requestedCachedData = cachedData.slice(offset, offset + size).filter(() => true);\n            setMeta(options, cachedData.length);\n            if (requestedCachedData.length === size || requestedPages.indexOf(page) !== -1) {\n                return requestedCachedData;\n            }\n        }\n    }\n    function getOrRead(options) {\n        const pages = Array.isArray(options.page) ? options.page : [options.page];\n        const { size, query } = options;\n        const getOrReadResponse = [];\n        const requestKey = getReadKey(options);\n        const promises = [];\n        for (let i = 0; i < pages.length; i++) {\n            const page = pages[i];\n            const offset = (page - 1) * size;\n            const statusKey = getReadKey({ page, size, query });\n            const metaKey = getMetaKey({ size, query, page });\n            const requestedPages = requestPageMap.get(metaKey) || [];\n            if (isLoading({ page, size, query }) || isFailed({ page, size, query })) {\n                getOrReadResponse.push(undefined);\n                continue;\n            }\n            const cachedData = getCachedPageData({ size, query, page });\n            if (cachedData) {\n                getOrReadResponse.push(cachedData);\n                continue;\n            }\n            requestedPages.push(page);\n            requestPageMap.set(metaKey, requestedPages);\n            const response = read({ offset, size, query }, {\n                get,\n                put\n            });\n            if (isThenable(response)) {\n                promises.push(response);\n                getOrReadResponse.push(undefined);\n                setStatus('LOADING', statusKey);\n                invalidate('loading', getReadKey({ size, page, query }));\n                response\n                    .then(() => {\n                    clearStatus(statusKey);\n                    invalidate('read', getReadKey({ size, page, query }));\n                    invalidate('loading', getReadKey({ size, page, query }));\n                })\n                    .catch(() => {\n                    setStatus('FAILED', statusKey);\n                    invalidate('loading', getReadKey({ size, page, query }));\n                    invalidate('failed', getReadKey({ size, page, query }));\n                });\n            }\n            else {\n                getOrReadResponse.push(getCachedPageData({ size, query, page }));\n            }\n        }\n        if (promises.length) {\n            setStatus('LOADING', requestKey);\n            Promise.all(promises)\n                .then(() => {\n                clearStatus(requestKey);\n                invalidate('read', getReadKey(options));\n                invalidate('loading', getReadKey(options));\n            })\n                .catch(() => {\n                setStatus('FAILED', requestKey);\n                invalidate('loading', getReadKey(options));\n                invalidate('failed', getReadKey(options));\n            });\n        }\n        return getOrReadResponse;\n    }\n    function resourceFind(options) {\n        const key = getFindKey(getFindOptions(options));\n        if (isStatus('LOADING', key) || isStatus('FAILED', key)) {\n            return undefined;\n        }\n        if (findMap.has(key)) {\n            return findMap.get(key);\n        }\n        const response = find(getFindOptions(options), { put, get });\n        if (isThenable(response)) {\n            setStatus('LOADING', key);\n            invalidate('loading', getFindKey(options));\n            response.then(() => {\n                clearStatus(key);\n                invalidate('find', getFindKey(options));\n                invalidate('loading', getFindKey(options));\n            });\n            return undefined;\n        }\n        else {\n            return findMap.get(key);\n        }\n    }\n    function resourceInit(options, requireDiff = false) {\n        if (isTemplateWithInit(template)) {\n            let reset = true;\n            if (requireDiff) {\n                reset = diffInitOptions(initOptions, options);\n            }\n            if (reset) {\n                releaseResource();\n                template.init(options, { put, get });\n                invalidateAll();\n            }\n        }\n        else {\n            releaseResource();\n        }\n        initOptions = options;\n    }\n    function meta(options, request = false) {\n        if (request) {\n            getOrRead(options);\n        }\n        return metaMap.get(getMetaKey(options));\n    }\n    function destroy(id) {\n        releaseResource();\n        Object.keys(invalidatorMaps).forEach((key) => {\n            invalidatorMaps[key].clear();\n        });\n        if (initOptions) {\n            const resourceMap = templateToResourceMap.get(template);\n            if (resourceMap) {\n                resourceMap.delete(`${id}/${initOptions.id}`);\n            }\n        }\n        templateToResourceMap.get(template);\n    }\n    return {\n        find: resourceFind,\n        getOrRead,\n        init: resourceInit,\n        meta,\n        subscribeMeta,\n        subscribeRead,\n        subscribeFind,\n        subscribeFailed,\n        subscribeLoading,\n        unsubscribe,\n        isLoading,\n        isFailed,\n        destroy\n    };\n}\nconst optionInvalidatorMap = new Map();\nconst templateToResourceMap = new Map();\nconst idToResourceMap = new Map();\nfunction createOptionsWrapper() {\n    let options = {\n        page: 1,\n        size: 30,\n        query: {}\n    };\n    function invalidate() {\n        const invalidatorSet = optionInvalidatorMap.get(setOptions) || [];\n        [...invalidatorSet].forEach((invalidator) => {\n            invalidator();\n        });\n    }\n    function setOptions(newOptions) {\n        if (newOptions) {\n            const calculatedOptions = Object.assign({}, options, newOptions);\n            const { changed } = auto(options, calculatedOptions, 2);\n            if (changed) {\n                options = calculatedOptions;\n                invalidate();\n            }\n        }\n        return options;\n    }\n    setOptions.options = setOptions;\n    return setOptions;\n}\nfunction isTemplate(value) {\n    return Boolean(value && typeof value.read === 'function');\n}\nfunction isResource(value) {\n    return Boolean(value && !!value.id);\n}\nfunction getResource(templateOrWrapper, id, init) {\n    const templateId = (isResource(templateOrWrapper) ? templateOrWrapper.id : init && `${id}/${init.id}`) || 'global';\n    const template = isResource(templateOrWrapper) ? templateOrWrapper.template : templateOrWrapper;\n    const initOptions = isResource(templateOrWrapper) ? templateOrWrapper.initOptions : init;\n    const resourceMap = templateToResourceMap.get(template) || new Map();\n    let resource = resourceMap.get(templateId);\n    const registeredResources = idToResourceMap.get(id) || new Set();\n    if (!resource) {\n        resource = createResource(template, initOptions);\n        resourceMap.set(templateId, resource);\n        templateToResourceMap.set(template, resourceMap);\n        const ownerId = templateId.substring(0, templateId.indexOf('/'));\n        const isOwner = ownerId === id;\n        if (!isOwner) {\n            const ownerResources = idToResourceMap.get(ownerId) || new Set();\n            ownerResources.add({ resource, type: 'owner' });\n            idToResourceMap.set(ownerId, ownerResources);\n        }\n        registeredResources.add({ resource, type: isOwner ? 'owner' : 'subscribed' });\n    }\n    else {\n        if (init) {\n            resource.init(init, true);\n        }\n        registeredResources.add({ resource, type: 'subscribed' });\n    }\n    idToResourceMap.set(id, registeredResources);\n    return resource;\n}\nexport function createResourceMiddleware() {\n    const factory = create({ diffProperty, invalidator, destroy }).properties();\n    return factory(({ id: middlewareId, middleware: { diffProperty, invalidator, destroy } }) => {\n        const optionsMap = new Map();\n        destroy(() => {\n            const resources = idToResourceMap.get(middlewareId);\n            if (resources) {\n                resources.forEach((resource) => {\n                    if (resource.type === 'subscribed') {\n                        resource.resource.unsubscribe(invalidator);\n                    }\n                    else {\n                        resource.resource.destroy(middlewareId);\n                    }\n                });\n            }\n            idToResourceMap.delete(middlewareId);\n        });\n        diffProperty('resource', () => {\n            return {};\n        }, ({ resource: current }, { resource: next }) => {\n            if (current && next) {\n                const id = next.template.id || 'global';\n                const { template: { initOptions: currentInitOptions } } = current;\n                const { template: { initOptions: nextInitOptions } } = next;\n                if (nextInitOptions) {\n                    const changed = diffInitOptions(currentInitOptions || {}, nextInitOptions);\n                    if (changed) {\n                        const resourceMap = templateToResourceMap.get(next.template.template);\n                        if (resourceMap) {\n                            const resource = resourceMap.get(id);\n                            if (resource) {\n                                resource.init(nextInitOptions);\n                                invalidator();\n                            }\n                        }\n                    }\n                }\n                const nextOptions = next.options;\n                const currOptions = current.options;\n                if (currOptions && currOptions !== nextOptions) {\n                    const invalidatorSet = optionInvalidatorMap.get(currOptions.options);\n                    if (invalidatorSet) {\n                        invalidatorSet.delete(invalidator);\n                        invalidator();\n                    }\n                }\n            }\n            if (next) {\n                const nextOptions = next.options;\n                const currOptions = current && current.options;\n                if (nextOptions) {\n                    const options = (options) => {\n                        const invalidatorSet = optionInvalidatorMap.get(nextOptions.options) || new Set();\n                        invalidatorSet.add(invalidator);\n                        optionInvalidatorMap.set(nextOptions.options, invalidatorSet);\n                        return nextOptions.options(options);\n                    };\n                    options.options = nextOptions.options;\n                    if (!currOptions || currOptions.options !== nextOptions.options) {\n                        invalidator();\n                    }\n                    return {\n                        options,\n                        template: next.template\n                    };\n                }\n            }\n        });\n        const middleware = function (resource) {\n            if (isTemplate(resource.template)) {\n                let { template, transform, initOptions } = resource, rest = __rest(resource, [\"template\", \"transform\", \"initOptions\"]);\n                return Object.assign({ template: {\n                        template,\n                        transform,\n                        id: initOptions ? `${middlewareId}/${initOptions.id}` : 'global',\n                        initOptions\n                    } }, rest);\n            }\n            return resource;\n        };\n        middleware.createOptions = (key) => {\n            const options = optionsMap.get(key);\n            if (options) {\n                return options;\n            }\n            const optionsWrapper = createOptionsWrapper();\n            function setOptions(options) {\n                const invalidatorSet = optionInvalidatorMap.get(optionsWrapper.options) || new Set();\n                invalidatorSet.add(invalidator);\n                optionInvalidatorMap.set(optionsWrapper.options, invalidatorSet);\n                return optionsWrapper(options);\n            }\n            setOptions.options = optionsWrapper.options;\n            optionsMap.set(key, setOptions);\n            return setOptions;\n        };\n        middleware.getOrRead = (template, options, init) => {\n            const resource = getResource(template, middlewareId, init);\n            const transform = !isTemplate(template) && template.transform;\n            const resourceOptions = transformOptions(options, transform);\n            resource.subscribeRead(invalidator, options);\n            const data = resource.getOrRead(resourceOptions);\n            if (data && transform) {\n                return data.map((items) => {\n                    if (items) {\n                        return items.map((item) => transformData(item, transform));\n                    }\n                    return items;\n                });\n            }\n            return data;\n        };\n        middleware.find = (template, options, init) => {\n            const resource = getResource(template, middlewareId, init);\n            const transform = !isTemplate(template) && template.transform;\n            const findOptions = transformOptions(options, transform);\n            resource.subscribeFind(invalidator, findOptions);\n            const result = resource.find(findOptions);\n            if (result && result.item && transform) {\n                result.item = transformData(result.item, transform);\n            }\n            return result;\n        };\n        middleware.meta = (template, options, request = false, init) => {\n            const resource = getResource(template, middlewareId, init);\n            const transform = !isTemplate(template) && template.transform;\n            const resourceOptions = transformOptions(options, transform);\n            resource.subscribeMeta(invalidator, resourceOptions);\n            if (request) {\n                resource.subscribeRead(invalidator, resourceOptions);\n            }\n            return resource.meta(resourceOptions, request);\n        };\n        middleware.isLoading = (template, options, init) => {\n            const resource = getResource(template, middlewareId, init);\n            const transform = !isTemplate(template) && template.transform;\n            const resourceOptions = transformOptions(options, transform);\n            resource.subscribeLoading(invalidator, resourceOptions);\n            return resource.isLoading(resourceOptions);\n        };\n        middleware.isFailed = (template, options, init) => {\n            const resource = getResource(template, middlewareId, init);\n            const transform = !isTemplate(template) && template.transform;\n            const resourceOptions = transformOptions(options, transform);\n            resource.subscribeFailed(invalidator, resourceOptions);\n            return resource.isFailed(resourceOptions);\n        };\n        return middleware;\n    });\n}\n//# sourceMappingURL=resources.mjs.map","import { Evented } from '../core/Evented';\nexport class Injector extends Evented {\n    constructor(payload) {\n        super();\n        this._payload = payload;\n    }\n    setInvalidator(invalidator) {\n        this._invalidator = invalidator;\n    }\n    get() {\n        return this._payload;\n    }\n    set(payload) {\n        this._payload = payload;\n        if (this._invalidator) {\n            this._invalidator();\n        }\n    }\n}\nexport default Injector;\n//# sourceMappingURL=Injector.mjs.map","var _a;\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport global from './global';\nimport { is as objectIs } from './object';\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Map = global.Map;\nif (!true) {\n    Map = global.Map = (_a = class Map {\n            constructor(iterable) {\n                this._keys = [];\n                this._values = [];\n                this[Symbol.toStringTag] = 'Map';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            const value = iterable[i];\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.set(value[0], value[1]);\n                        }\n                    }\n                }\n            }\n            /**\n             * An alternative to Array.prototype.indexOf using Object.is\n             * to check for equality. See http://mzl.la/1zuKO2V\n             */\n            _indexOfKey(keys, key) {\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    if (objectIs(keys[i], key)) {\n                        return i;\n                    }\n                }\n                return -1;\n            }\n            get size() {\n                return this._keys.length;\n            }\n            clear() {\n                this._keys.length = this._values.length = 0;\n            }\n            delete(key) {\n                const index = this._indexOfKey(this._keys, key);\n                if (index < 0) {\n                    return false;\n                }\n                this._keys.splice(index, 1);\n                this._values.splice(index, 1);\n                return true;\n            }\n            entries() {\n                const values = this._keys.map((key, i) => {\n                    return [key, this._values[i]];\n                });\n                return new ShimIterator(values);\n            }\n            forEach(callback, context) {\n                const keys = this._keys;\n                const values = this._values;\n                for (let i = 0, length = keys.length; i < length; i++) {\n                    callback.call(context, values[i], keys[i], this);\n                }\n            }\n            get(key) {\n                const index = this._indexOfKey(this._keys, key);\n                return index < 0 ? undefined : this._values[index];\n            }\n            has(key) {\n                return this._indexOfKey(this._keys, key) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._keys);\n            }\n            set(key, value) {\n                let index = this._indexOfKey(this._keys, key);\n                index = index < 0 ? this._keys.length : index;\n                this._keys[index] = key;\n                this._values[index] = value;\n                return this;\n            }\n            values() {\n                return new ShimIterator(this._values);\n            }\n            [Symbol.iterator]() {\n                return this.entries();\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Map;","import { create, getRegistry, invalidator, destroy } from '../vdom';\nconst injectorFactory = create({ getRegistry, invalidator, destroy });\nexport const injector = injectorFactory(({ middleware: { getRegistry, invalidator, destroy } }) => {\n    const handles = [];\n    destroy(() => {\n        let handle;\n        while ((handle = handles.pop())) {\n            handle.destroy();\n        }\n    });\n    const registry = getRegistry();\n    return {\n        subscribe(label, callback = invalidator) {\n            if (registry) {\n                const item = registry.getInjector(label);\n                if (item) {\n                    const handle = item.invalidator.on('invalidate', () => {\n                        callback();\n                    });\n                    handles.push(handle);\n                    return () => {\n                        const index = handles.indexOf(handle);\n                        if (index !== -1) {\n                            handles.splice(index, 1);\n                            handle.destroy();\n                        }\n                    };\n                }\n            }\n        },\n        get(label) {\n            if (registry) {\n                const item = registry.getInjector(label);\n                if (item) {\n                    return item.injector();\n                }\n            }\n            return null;\n        }\n    };\n});\nexport default injector;\n//# sourceMappingURL=injector.mjs.map","import Promise from '../shim/Promise';\n/**\n * No op function used to replace a Destroyable instance's `destroy` method, once the instance has been destroyed\n */\nfunction noop() {\n    return Promise.resolve(false);\n}\n/**\n * No op function used to replace a Destroyable instance's `own` method, once the instance has been destroyed\n */\nfunction destroyed() {\n    throw new Error('Call made to destroyed method');\n}\nexport class Destroyable {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.handles = [];\n    }\n    /**\n     * Register handles for the instance that will be destroyed when `this.destroy` is called\n     *\n     * @param {Handle} handle The handle to add for the instance\n     * @returns {Handle} A wrapper Handle. When the wrapper Handle's `destroy` method is invoked, the original handle is\n     *                   removed from the instance, and its `destroy` method is invoked.\n     */\n    own(handle) {\n        const { handles: _handles } = this;\n        _handles.push(handle);\n        return {\n            destroy() {\n                _handles.splice(_handles.indexOf(handle));\n                handle.destroy();\n            }\n        };\n    }\n    /**\n     * Destroys all handlers registered for the instance\n     *\n     * @returns {Promise<any} A Promise that resolves once all handles have been destroyed\n     */\n    destroy() {\n        return new Promise((resolve) => {\n            this.handles.forEach((handle) => {\n                handle && handle.destroy && handle.destroy();\n            });\n            this.destroy = noop;\n            this.own = destroyed;\n            resolve(true);\n        });\n    }\n}\nexport default Destroyable;\n//# sourceMappingURL=Destroyable.mjs.map","import global from '../../shim/global';\nimport { create, diffProperty, node, destroy, invalidator } from '../vdom';\nimport { createICacheMiddleware } from './icache';\nconst icache = createICacheMiddleware();\nconst factory = create({ icache, diffProperty, node, destroy, invalidator }).properties();\nexport const focus = factory(({ middleware: { icache, diffProperty, node, destroy, invalidator } }) => {\n    let initialized = false;\n    let currentElement;\n    let previous = 0;\n    const nodeSet = new Set();\n    diffProperty('focus', (_, next) => {\n        const result = next.focus && next.focus();\n        if (result) {\n            const current = icache.getOrSet('current', 0);\n            icache.set('current', current + 1);\n        }\n    });\n    function onFocusChange() {\n        const activeElement = global.document.activeElement;\n        if ((nodeSet.has(currentElement) || nodeSet.has(activeElement)) && currentElement !== activeElement) {\n            invalidator();\n        }\n        currentElement = activeElement;\n    }\n    destroy(() => {\n        global.document.removeEventListener('focusin', onFocusChange);\n        global.document.removeEventListener('focusout', onFocusChange);\n        nodeSet.clear();\n    });\n    return {\n        shouldFocus() {\n            const current = icache.get('current') || 0;\n            const shouldFocus = current !== previous;\n            previous = current;\n            return shouldFocus;\n        },\n        focus() {\n            const current = icache.getOrSet('current', 0);\n            icache.set('current', current + 1);\n        },\n        isFocused(key) {\n            const domNode = node.get(key);\n            if (!domNode) {\n                return false;\n            }\n            nodeSet.add(domNode);\n            if (!initialized) {\n                global.document.addEventListener('focusin', onFocusChange);\n                global.document.addEventListener('focusout', onFocusChange);\n                initialized = true;\n            }\n            return global.document.activeElement === domNode;\n        }\n    };\n});\nexport default focus;\n//# sourceMappingURL=focus.mjs.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import has from '../core/has';\nexport let assign;\n/**\n * Gets the own property descriptor of the specified object.\n * An own property descriptor is one that is defined directly on the object and is not\n * inherited from the object's prototype.\n * @param o Object that contains the property.\n * @param p Name of the property.\n */\nexport let getOwnPropertyDescriptor;\n/**\n * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n * @param o Object that contains the own properties.\n */\nexport let getOwnPropertyNames;\n/**\n * Returns an array of all symbol properties found directly on object o.\n * @param o Object to retrieve the symbols from.\n */\nexport let getOwnPropertySymbols;\n/**\n * Returns true if the values are the same value, false otherwise.\n * @param value1 The first value.\n * @param value2 The second value.\n */\nexport let is;\n/**\n * Returns the names of the enumerable properties and methods of an object.\n * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n */\nexport let keys;\n/* ES7 Object static methods */\nexport let getOwnPropertyDescriptors;\nexport let entries;\nexport let values;\nif (!true) {\n    const keys = Object.keys.bind(Object);\n    Object.keys = function symbolAwareKeys(o) {\n        return keys(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.assign = function assign(target, ...sources) {\n        if (target == null) {\n            // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        const to = Object(target);\n        sources.forEach((nextSource) => {\n            if (nextSource) {\n                // Skip over if undefined or null\n                keys(nextSource).forEach((nextKey) => {\n                    to[nextKey] = nextSource[nextKey];\n                });\n            }\n        });\n        return to;\n    };\n    const getOwnPropertyNames = Object.getOwnPropertyNames.bind(Object);\n    Object.getOwnPropertyNames = function symbolAwareGetOwnPropertyNames(o) {\n        return getOwnPropertyNames(o).filter((key) => !Boolean(key.match(/^@@.+/)));\n    };\n    Object.getOwnPropertySymbols = function getOwnPropertySymbols(o) {\n        return getOwnPropertyNames(o)\n            .filter((key) => Boolean(key.match(/^@@.+/)))\n            .map((key) => Symbol.for(key.substring(2)));\n    };\n    Object.is = function is(value1, value2) {\n        if (value1 === value2) {\n            return value1 !== 0 || 1 / value1 === 1 / value2; // -0\n        }\n        return value1 !== value1 && value2 !== value2; // NaN\n    };\n}\nif (!true) {\n    Object.getOwnPropertyDescriptors = function getOwnPropertyDescriptors(o) {\n        return Object.getOwnPropertyNames(o).reduce((previous, key) => {\n            previous[key] = Object.getOwnPropertyDescriptor(o, key);\n            return previous;\n        }, {});\n    };\n    Object.entries = function entries(o) {\n        return keys(o).map((key) => [key, o[key]]);\n    };\n    Object.values = function values(o) {\n        return keys(o).map((key) => o[key]);\n    };\n}\nassign = Object.assign;\ngetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\ngetOwnPropertyNames = Object.getOwnPropertyNames;\ngetOwnPropertySymbols = Object.getOwnPropertySymbols;\nis = Object.is;\nkeys = Object.keys;\ngetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\nentries = Object.entries;\nvalues = Object.values;\nexport default Object;\n//# sourceMappingURL=object.mjs.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport Registry from './Registry';\nimport { create as vdomCreate, diffProperty, dom as vdomDom, invalidator, isTextNode, renderer, w as vdomW } from './vdom';\nimport { from } from '../shim/array';\nimport global from '../shim/global';\nimport ThemeInjector from './ThemeInjector';\nimport { createMemoryResourceTemplate, createResourceMiddleware } from './middleware/resources';\nconst RESERVED_PROPS = ['focus'];\nexport var CustomElementChildType;\n(function (CustomElementChildType) {\n    CustomElementChildType[\"DOJO\"] = \"DOJO\";\n    CustomElementChildType[\"NODE\"] = \"NODE\";\n    CustomElementChildType[\"TEXT\"] = \"TEXT\";\n})(CustomElementChildType || (CustomElementChildType = {}));\nfunction isElement(item) {\n    return item && item.nodeType === 1;\n}\nfunction isDojoChild(item) {\n    return isElement(item) && item.tagName.indexOf('-') > -1;\n}\nfunction w(node, properties, children) {\n    const wrappedWNode = vdomW(node, properties, children);\n    function wrapper(...args) {\n        const { domNode } = node;\n        if (args.length && domNode) {\n            setTimeout(() => {\n                domNode.dispatchEvent(new CustomEvent('render', {\n                    bubbles: false,\n                    detail: args\n                }));\n            });\n        }\n        return wrappedWNode;\n    }\n    Object.keys(wrappedWNode).forEach((key) => (wrapper[key] = wrappedWNode[key]));\n    return wrapper;\n}\nfunction dom(options, children) {\n    const wrappedDomNode = vdomDom(options, children);\n    function wrapper(...args) {\n        const { domNode } = wrappedDomNode;\n        if (args.length && domNode) {\n            setTimeout(() => {\n                domNode.dispatchEvent(new CustomEvent('render', {\n                    bubbles: false,\n                    detail: args\n                }));\n            });\n        }\n        return wrappedDomNode;\n    }\n    Object.keys(wrappedDomNode).forEach((key) => (wrapper[key] = wrappedDomNode[key]));\n    return wrapper;\n}\nconst resource = createResourceMiddleware();\nconst factory = vdomCreate({ diffProperty, invalidator, resource }).properties();\nexport function DomToWidgetWrapper(domNode) {\n    const wrapper = factory(function DomToWidgetWrapper({ properties, middleware: { invalidator, diffProperty } }) {\n        diffProperty('', invalidator);\n        const props = Object.keys(properties()).reduce((props, key) => {\n            const value = properties()[key];\n            if (key.indexOf('on') === 0 || RESERVED_PROPS.indexOf(key) !== -1) {\n                key = `__${key}`;\n            }\n            props[key] = value;\n            return props;\n        }, {});\n        return dom({ node: domNode, props, diffType: 'dom' });\n    });\n    wrapper.domNode = domNode;\n    return wrapper;\n}\nfunction registerThemeInjector(theme, themeRegistry) {\n    const themeInjector = new ThemeInjector(theme);\n    themeRegistry.defineInjector('__theme_injector', (invalidator) => {\n        themeInjector.setInvalidator(invalidator);\n        return () => themeInjector;\n    });\n    return themeInjector;\n}\nexport function create(descriptor, WidgetConstructor) {\n    const { attributes = [], properties = [], registryFactory = () => new Registry() } = descriptor;\n    const attributeMap = {};\n    attributes.forEach((propertyName) => {\n        const attributeName = propertyName.toLowerCase();\n        attributeMap[attributeName] = propertyName;\n    });\n    properties.forEach((propertyName) => {\n        const attributeName = propertyName.toLowerCase();\n        attributeMap[attributeName] = propertyName;\n    });\n    return class extends HTMLElement {\n        constructor() {\n            super(...arguments);\n            this._properties = {};\n            this._children = [];\n            this._eventProperties = {};\n            this._propertiesMap = {};\n            this._initialised = false;\n            this._childType = descriptor.childType;\n        }\n        connectedCallback() {\n            if (this._initialised) {\n                return;\n            }\n            this._waitTillReady();\n        }\n        _hasBeenParsed() {\n            if (document.readyState !== 'loading') {\n                return true;\n            }\n            let element = this;\n            while (element) {\n                if (element.nextSibling) {\n                    return true;\n                }\n                element = element.parentNode;\n            }\n            return false;\n        }\n        _waitTillReady() {\n            this._initialised = true;\n            if (this._hasBeenParsed()) {\n                this._readyCallback();\n            }\n            else {\n                setTimeout(() => {\n                    this._waitTillReady();\n                }, 100);\n            }\n        }\n        _readyCallback() {\n            const domProperties = {};\n            const { properties = [], events = [] } = descriptor;\n            this._properties = Object.assign({}, this._propertiesWithAttributes(properties), this._attributesToProperties(attributes));\n            const props = [...attributes, ...properties].filter((propName) => !WidgetConstructor.hasResource || propName !== 'resource');\n            const resourceProps = [\n                'dojoResourceTemplate',\n                'dojoResourceInitOptions',\n                'dojoResourceOptions',\n                'dojoResourceTransform',\n                'dojoResourceId'\n            ];\n            const useResource = WidgetConstructor.hasResource &&\n                !resourceProps.some((resourceProp) => props.indexOf(resourceProp) > -1);\n            if (useResource) {\n                props.push(...resourceProps);\n                this._properties = Object.assign({}, this._properties, { dojoResourceTemplate: createMemoryResourceTemplate() }, this._propertiesWithAttributes(resourceProps));\n                resourceProps.forEach((resourcePropertyName) => {\n                    const value = this._propertiesMap[resourcePropertyName] || this[resourcePropertyName];\n                    if (value !== undefined) {\n                        this._properties[resourcePropertyName] = value;\n                    }\n                    domProperties[resourcePropertyName] = {\n                        get: () => this._getProperty(resourcePropertyName),\n                        set: (value) => {\n                            this._setProperty(resourcePropertyName, value);\n                        }\n                    };\n                });\n            }\n            props.forEach((propertyName) => {\n                const isReservedProp = RESERVED_PROPS.indexOf(propertyName) !== -1;\n                const value = this._propertiesMap[propertyName] || !isReservedProp ? this[propertyName] : undefined;\n                let filteredPropertyName = propertyName.replace(/^on/, '__');\n                if (isReservedProp) {\n                    filteredPropertyName = `__${propertyName}`;\n                }\n                if (value !== undefined) {\n                    this._properties[propertyName] = value;\n                }\n                if (filteredPropertyName !== propertyName) {\n                    domProperties[filteredPropertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n                if (!isReservedProp) {\n                    domProperties[propertyName] = {\n                        get: () => this._getProperty(propertyName),\n                        set: (value) => this._setProperty(propertyName, value)\n                    };\n                }\n            });\n            events.forEach((propertyName) => {\n                const eventName = propertyName.replace(/^on/, '').toLowerCase();\n                const filteredPropertyName = propertyName.replace(/^on/, '__on');\n                domProperties[filteredPropertyName] = {\n                    get: () => this._getEventProperty(propertyName),\n                    set: (value) => this._setEventProperty(propertyName, value)\n                };\n                this._eventProperties[propertyName] = undefined;\n                this._properties[propertyName] = (...args) => {\n                    const eventCallback = this._getEventProperty(propertyName);\n                    if (typeof eventCallback === 'function') {\n                        eventCallback(...args);\n                    }\n                    this.dispatchEvent(new CustomEvent(eventName, {\n                        bubbles: false,\n                        detail: args\n                    }));\n                };\n            });\n            Object.defineProperties(this, domProperties);\n            const children = from(this.childNodes).filter((childNode) => !isTextNode(childNode) || childNode.data.replace(/^\\s+|\\s+$/g, ''));\n            if (!this._childType) {\n                if (children.some((child) => isDojoChild(child))) {\n                    this._childType = CustomElementChildType.DOJO;\n                }\n                else {\n                    this._childType = CustomElementChildType.NODE;\n                }\n            }\n            from(children).forEach((childNode) => {\n                if (this._childType === CustomElementChildType.DOJO) {\n                    childNode.addEventListener('dojo-ce-render', () => this._render());\n                    childNode.addEventListener('dojo-ce-connected', () => this._render());\n                    this._children.push(DomToWidgetWrapper(childNode));\n                }\n                else {\n                    this._children.push(dom({ node: childNode, diffType: 'dom' }));\n                }\n            });\n            this.addEventListener('dojo-ce-connected', (e) => this._childConnected(e));\n            const widgetProperties = this._properties;\n            const renderChildren = () => this.__children__();\n            const Wrapper = factory(({ middleware: { resource } }) => {\n                if (!useResource) {\n                    return w(WidgetConstructor, widgetProperties, renderChildren());\n                }\n                const { dojoResourceTemplate, dojoResourceOptions, dojoResourceTransform, dojoResourceId, dojoResourceInitOptions = { id: dojoResourceId || '', data: [] } } = widgetProperties, childProperties = __rest(widgetProperties, [\"dojoResourceTemplate\", \"dojoResourceOptions\", \"dojoResourceTransform\", \"dojoResourceId\", \"dojoResourceInitOptions\"]);\n                const resourceProp = resource({\n                    template: dojoResourceTemplate,\n                    transform: dojoResourceTransform,\n                    options: dojoResourceOptions || (dojoResourceId && this._resource.createOptions(dojoResourceId)),\n                    initOptions: dojoResourceInitOptions\n                });\n                return w(WidgetConstructor, Object.assign({}, childProperties, { resource: resourceProp }), renderChildren());\n            });\n            const registry = registryFactory();\n            const themeContext = registerThemeInjector(this._getVariant() ? { theme: this._getTheme(), variant: this._getVariant() } : this._getTheme(), registry);\n            global.addEventListener('dojo-theme-set', () => {\n                const variant = this._getVariant();\n                if (variant !== 'noVariant') {\n                    themeContext.set(this._getTheme(), variant);\n                }\n                else {\n                    themeContext.set(this._getTheme());\n                }\n            });\n            const r = renderer(() => w(Wrapper, {}));\n            this._renderer = r;\n            r.mount({ domNode: this, merge: false, registry });\n            const root = this.children[0];\n            if (root) {\n                const { display = 'block' } = global.getComputedStyle(root);\n                this.style.display = display;\n            }\n            this.dispatchEvent(new CustomEvent('dojo-ce-connected', {\n                bubbles: true,\n                detail: this\n            }));\n        }\n        _getTheme() {\n            if (global && global.dojoce && global.dojoce.theme) {\n                return global.dojoce.themes[global.dojoce.theme];\n            }\n        }\n        _getVariant() {\n            if (global && global.dojoce && global.dojoce.variant) {\n                return global.dojoce.variant;\n            }\n        }\n        _childConnected(e) {\n            const node = e.detail;\n            if (node.parentNode === this) {\n                const exists = this._children.some((child) => child.domNode === node);\n                if (!exists) {\n                    node.addEventListener('dojo-ce-render', () => this._render());\n                    this._children.push(DomToWidgetWrapper(node));\n                    this._render();\n                }\n            }\n        }\n        _render() {\n            if (this._renderer) {\n                this._renderer.invalidate();\n                this.dispatchEvent(new CustomEvent('dojo-ce-render', {\n                    bubbles: false,\n                    detail: this\n                }));\n            }\n        }\n        __properties__() {\n            return Object.assign({}, this._properties, this._eventProperties);\n        }\n        __children__() {\n            if (this._children.some((child) => child.domNode.getAttribute && child.domNode.getAttribute('slot'))) {\n                const slots = this._children.reduce((slots, child) => {\n                    const { domNode } = child;\n                    const slotName = domNode.getAttribute && domNode.getAttribute('slot');\n                    if (!slotName) {\n                        return slots;\n                    }\n                    let slotResult = child.isFactory\n                        ? w(child, domNode.__properties__ ? Object.assign({}, domNode.__properties__()) : {}, domNode.__children__ ? [...domNode.__children__()] : [])\n                        : child;\n                    const existingSlotValue = slots[slotName];\n                    return Object.assign({}, slots, { [slotName]: existingSlotValue ? [...existingSlotValue, slotResult] : [slotResult] });\n                }, {});\n                return [\n                    Object.keys(slots).reduce((result, key) => {\n                        const value = slots[key];\n                        return Object.assign({}, result, { [key]: value.length === 1 ? value[0] : value });\n                    }, {})\n                ];\n            }\n            if (this._childType === CustomElementChildType.DOJO) {\n                return this._children.filter((Child) => Child.domNode.isWidget).map((Child) => {\n                    const { domNode } = Child;\n                    return w(Child, Object.assign({}, domNode.__properties__()), [...domNode.__children__()]);\n                });\n            }\n            else {\n                return this._children;\n            }\n        }\n        attributeChangedCallback(name, oldValue, value) {\n            const propertyName = attributeMap[name];\n            if (attributes.indexOf(propertyName) >= 0) {\n                this._setProperty(propertyName, value);\n            }\n            else {\n                try {\n                    const parsedValue = value ? JSON.parse(value) : null;\n                    this._setProperty(propertyName, parsedValue);\n                }\n                catch (e) {\n                    // if json parsing error, we do not set the property\n                }\n            }\n        }\n        _setEventProperty(propertyName, value) {\n            this._eventProperties[propertyName] = value;\n        }\n        _getEventProperty(propertyName) {\n            return this._eventProperties[propertyName];\n        }\n        _setProperty(propertyName, value) {\n            this._properties[propertyName] = value;\n            this._render();\n        }\n        _getProperty(propertyName) {\n            return this._properties[propertyName];\n        }\n        _propertiesWithAttributes(properties) {\n            return properties.reduce((properties, propertyName) => {\n                const attributeName = propertyName.toLowerCase();\n                const value = this.getAttribute(attributeName);\n                if (value !== null) {\n                    try {\n                        properties[propertyName] = JSON.parse(value);\n                    }\n                    catch (e) {\n                        // invalid json values do not get set\n                    }\n                }\n                return properties;\n            }, {});\n        }\n        _attributesToProperties(attributes) {\n            return attributes.reduce((properties, propertyName) => {\n                const attributeName = propertyName.toLowerCase();\n                const value = this.getAttribute(attributeName);\n                if (value !== null) {\n                    properties[propertyName] = value;\n                }\n                return properties;\n            }, {});\n        }\n        static get observedAttributes() {\n            return Object.keys(attributeMap);\n        }\n        get isWidget() {\n            return true;\n        }\n        set(key, value) {\n            this._propertiesMap[key] = value;\n            if (this._renderer) {\n                this._setProperty(key, value);\n            }\n        }\n    };\n}\nexport function register(WidgetConstructor) {\n    const descriptor = WidgetConstructor.__customElementDescriptor;\n    if (!descriptor) {\n        throw new Error('Cannot get descriptor for Custom Element, have you added the @customElement decorator to your Widget?');\n    }\n    global.customElements.define(descriptor.tagName, create(descriptor, WidgetConstructor));\n}\nexport default register;\n//# sourceMappingURL=registerCustomElement.mjs.map","import global from '../shim/global';\n/**\n * A cache of results of feature tests\n */\nexport const testCache = {};\n/**\n * A cache of the un-resolved feature tests\n */\nexport const testFunctions = {};\n/* Grab the staticFeatures if there are available */\nconst { staticFeatures } = global.DojoHasEnvironment || {};\n/* Cleaning up the DojoHasEnviornment */\nif ('DojoHasEnvironment' in global) {\n    delete global.DojoHasEnvironment;\n}\n/**\n * Custom type guard to narrow the `staticFeatures` to either a map or a function that\n * returns a map.\n *\n * @param value The value to guard for\n */\nfunction isStaticFeatureFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * The cache of asserted features that were available in the global scope when the\n * module loaded\n */\nconst staticCache = staticFeatures\n    ? isStaticFeatureFunction(staticFeatures)\n        ? staticFeatures.apply(global)\n        : staticFeatures\n    : {}; /* Providing an empty cache, if none was in the environment\n\n\n/**\n* AMD plugin function.\n*\n* Resolves resourceId into a module id based on possibly-nested tenary expression that branches on has feature test\n* value(s).\n*\n* @param resourceId The id of the module\n* @param normalize Resolves a relative module id into an absolute module id\n*/\nexport function normalize(resourceId, normalize) {\n    const tokens = resourceId.match(/[\\?:]|[^:\\?]*/g) || [];\n    let i = 0;\n    function get(skip) {\n        const term = tokens[i++];\n        if (term === ':') {\n            // empty string module name, resolves to null\n            return null;\n        }\n        else {\n            // postfixed with a ? means it is a feature to branch on, the term is the name of the feature\n            if (tokens[i++] === '?') {\n                if (!skip && has(term)) {\n                    // matched the feature, get the first value from the options\n                    return get();\n                }\n                else {\n                    // did not match, get the second value, passing over the first\n                    get(true);\n                    return get(skip);\n                }\n            }\n            // a module\n            return term;\n        }\n    }\n    const id = get();\n    return id && normalize(id);\n}\n/**\n * Check if a feature has already been registered\n *\n * @param feature the name of the feature\n */\nexport function exists(feature) {\n    const normalizedFeature = feature.toLowerCase();\n    return Boolean(normalizedFeature in staticCache || normalizedFeature in testCache || testFunctions[normalizedFeature]);\n}\n/**\n * Register a new test for a named feature.\n *\n * @example\n * has.add('dom-addeventlistener', !!document.addEventListener);\n *\n * @example\n * has.add('touch-events', function () {\n *    return 'ontouchstart' in document\n * });\n *\n * @param feature the name of the feature\n * @param value the value reported of the feature, or a function that will be executed once on first test\n * @param overwrite if an existing value should be overwritten. Defaults to false.\n */\nexport function add(feature, value, overwrite = false) {\n    const normalizedFeature = feature.toLowerCase();\n    if (exists(normalizedFeature) && !overwrite && !(normalizedFeature in staticCache)) {\n        throw new TypeError(`Feature \"${feature}\" exists and overwrite not true.`);\n    }\n    if (typeof value === 'function') {\n        testFunctions[normalizedFeature] = value;\n    }\n    else {\n        testCache[normalizedFeature] = value;\n        delete testFunctions[normalizedFeature];\n    }\n}\n/**\n * Return the current value of a named feature.\n *\n * @param feature The name of the feature to test.\n */\nexport default function has(feature, strict = false) {\n    let result;\n    const normalizedFeature = feature.toLowerCase();\n    if (normalizedFeature in staticCache) {\n        result = staticCache[normalizedFeature];\n    }\n    else if (testFunctions[normalizedFeature]) {\n        result = testCache[normalizedFeature] = testFunctions[normalizedFeature].call(null);\n        delete testFunctions[normalizedFeature];\n    }\n    else if (normalizedFeature in testCache) {\n        result = testCache[normalizedFeature];\n    }\n    else if (strict) {\n        throw new TypeError(`Attempt to detect unregistered has feature \"${feature}\"`);\n    }\n    return result;\n}\n/*\n * Out of the box feature tests\n */\nadd('public-path', undefined);\n/* flag for dojo debug, default to false */\nadd('dojo-debug', false);\n/* Detects if the environment is \"browser like\" */\nadd('host-browser', true);\n/* Detects if the environment is \"jsdom\" */\nadd('host-jsdom', true && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('jsdom') !== -1);\n/* Detects if the environment appears to be NodeJS */\nadd('host-node', false);\nadd('fetch', true);\nadd('es6-array', true);\nadd('es6-array-fill', true);\nadd('es7-array', true);\nadd('es2019-array', true);\n/* Map */\nadd('es6-map', true);\nadd('es6-iterator', true);\n/* Math */\nadd('es6-math', true);\nadd('es6-math-imul', true);\n/* Object */\nadd('es6-object', true);\nadd('es2017-object', true);\n/* Observable */\nadd('es-observable', false);\n/* Promise */\nadd('es6-promise', true);\nadd('es2018-promise-finally', () => true && typeof global.Promise.prototype.finally !== 'undefined', true);\n/* Set */\nadd('es6-set', true);\n/* String */\nadd('es6-string', true);\nadd('es6-string-raw', true);\nadd('es2017-string', true);\n/* Symbol */\nadd('es6-symbol', true);\n/* WeakMap */\nadd('es6-weakmap', true);\n/* Miscellaneous features */\nadd('microtasks', true);\nadd('postmessage', true);\nadd('raf', true);\nadd('setimmediate', false);\n/* DOM Features */\nadd('dom-mutationobserver', true);\nadd('dom-webanimation', () => true && global.Animation !== undefined && global.KeyframeEffect !== undefined, true);\nadd('abort-controller', () => typeof global.AbortController !== 'undefined');\nadd('abort-signal', () => typeof global.AbortSignal !== 'undefined');\nadd('dom-intersection-observer', () => true && global.IntersectionObserver !== undefined, true);\nadd('dom-resize-observer', () => true && global.ResizeObserver !== undefined, true);\nadd('dom-pointer-events', () => true && global.onpointerdown !== undefined, true);\nadd('dom-css-variables', true);\nadd('dom-inert', () => true && Element.prototype.hasOwnProperty('inert'), true);\nadd('build-elide', false);\nadd('test', false);\nadd('global-this', () => typeof global.globalThis !== 'undefined');\n//# sourceMappingURL=has.mjs.map","import Promise from '../shim/Promise';\nimport Map from '../shim/Map';\nimport { Evented } from '../core/Evented';\n/**\n * Widget base type\n */\nexport const WIDGET_BASE_TYPE = '__widget_base_type';\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor(item) {\n    return Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\nexport function isWidgetFunction(item) {\n    return Boolean(item && item.isWidget);\n}\nexport function isWNodeFactory(node) {\n    if (typeof node === 'function' && node.isFactory) {\n        return true;\n    }\n    return false;\n}\nexport function isWidget(item) {\n    return isWidgetBaseConstructor(item) || isWidgetFunction(item);\n}\nexport function isWidgetConstructorDefaultExport(item) {\n    return Boolean(item &&\n        item.hasOwnProperty('__esModule') &&\n        item.hasOwnProperty('default') &&\n        (isWidget(item.default) || isWNodeFactory(item.default)));\n}\n/**\n * The Registry implementation\n */\nexport class Registry extends Evented {\n    /**\n     * Emit loaded event for registry label\n     */\n    emitLoadedEvent(widgetLabel, item) {\n        this.emit({\n            type: widgetLabel,\n            action: 'loaded',\n            item\n        });\n    }\n    define(label, item) {\n        if (this._widgetRegistry === undefined) {\n            this._widgetRegistry = new Map();\n        }\n        if (this._widgetRegistry.has(label)) {\n            throw new Error(`widget has already been registered for '${label.toString()}'`);\n        }\n        this._widgetRegistry.set(label, item);\n        if (item instanceof Promise) {\n            item.then((widgetCtor) => {\n                this._widgetRegistry.set(label, widgetCtor);\n                this.emitLoadedEvent(label, widgetCtor);\n                return widgetCtor;\n            }, (error) => {\n                throw error;\n            });\n        }\n        else if (isWidgetBaseConstructor(item)) {\n            this.emitLoadedEvent(label, item);\n        }\n    }\n    defineInjector(label, injectorFactory) {\n        if (this._injectorRegistry === undefined) {\n            this._injectorRegistry = new Map();\n        }\n        if (this._injectorRegistry.has(label)) {\n            throw new Error(`injector has already been registered for '${label.toString()}'`);\n        }\n        const invalidator = new Evented();\n        const injectorItem = {\n            injector: injectorFactory(() => invalidator.emit({ type: 'invalidate' })),\n            invalidator\n        };\n        this._injectorRegistry.set(label, injectorItem);\n        this.emitLoadedEvent(label, injectorItem);\n    }\n    get(label) {\n        if (!this._widgetRegistry || !this.has(label)) {\n            return null;\n        }\n        const item = this._widgetRegistry.get(label);\n        if (isWidget(item) || isWNodeFactory(item)) {\n            return item;\n        }\n        if (item instanceof Promise) {\n            return null;\n        }\n        const promise = item();\n        this._widgetRegistry.set(label, promise);\n        promise.then((widgetCtor) => {\n            if (isWidgetConstructorDefaultExport(widgetCtor)) {\n                widgetCtor = widgetCtor.default;\n            }\n            this._widgetRegistry.set(label, widgetCtor);\n            this.emitLoadedEvent(label, widgetCtor);\n            return widgetCtor;\n        }, (error) => {\n            throw error;\n        });\n        return null;\n    }\n    getInjector(label) {\n        if (!this._injectorRegistry || !this.hasInjector(label)) {\n            return null;\n        }\n        return this._injectorRegistry.get(label);\n    }\n    has(label) {\n        return Boolean(this._widgetRegistry && this._widgetRegistry.has(label));\n    }\n    hasInjector(label) {\n        return Boolean(this._injectorRegistry && this._injectorRegistry.has(label));\n    }\n}\nexport default Registry;\n//# sourceMappingURL=Registry.mjs.map","var _a;\nimport global from './global';\nvar isArrayLike = undefined, ShimIterator = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let Set = global.Set;\nif (!true) {\n    Set = global.Set = (_a = class Set {\n            constructor(iterable) {\n                this._setData = [];\n                this[Symbol.toStringTag] = 'Set';\n                if (iterable) {\n                    if (isArrayLike(iterable)) {\n                        for (let i = 0; i < iterable.length; i++) {\n                            this.add(iterable[i]);\n                        }\n                    }\n                    else {\n                        for (const value of iterable) {\n                            this.add(value);\n                        }\n                    }\n                }\n            }\n            add(value) {\n                if (this.has(value)) {\n                    return this;\n                }\n                this._setData.push(value);\n                return this;\n            }\n            clear() {\n                this._setData.length = 0;\n            }\n            delete(value) {\n                const idx = this._setData.indexOf(value);\n                if (idx === -1) {\n                    return false;\n                }\n                this._setData.splice(idx, 1);\n                return true;\n            }\n            entries() {\n                return new ShimIterator(this._setData.map((value) => [value, value]));\n            }\n            forEach(callbackfn, thisArg) {\n                const iterator = this.values();\n                let result = iterator.next();\n                while (!result.done) {\n                    callbackfn.call(thisArg, result.value, result.value, this);\n                    result = iterator.next();\n                }\n            }\n            has(value) {\n                return this._setData.indexOf(value) > -1;\n            }\n            keys() {\n                return new ShimIterator(this._setData);\n            }\n            get size() {\n                return this._setData.length;\n            }\n            values() {\n                return new ShimIterator(this._setData);\n            }\n            [Symbol.iterator]() {\n                return new ShimIterator(this._setData);\n            }\n        },\n        _a[Symbol.species] = _a,\n        _a);\n}\nexport default Set;","import global from './global';\nvar isArrayLike = undefined;\n// !has('es6-iterator')\n// elided: import './iterator'\nimport has from '../core/has';\n// !has('es6-symbol')\n// elided: import './Symbol'\nexport let WeakMap = global.WeakMap;\nif (!true) {\n    const DELETED = {};\n    const getUID = function getUID() {\n        return Math.floor(Math.random() * 100000000);\n    };\n    const generateName = (function () {\n        let startId = Math.floor(Date.now() % 100000000);\n        return function generateName() {\n            return '__wm' + getUID() + (startId++ + '__');\n        };\n    })();\n    WeakMap = global.WeakMap = class WeakMap {\n        constructor(iterable) {\n            this[Symbol.toStringTag] = 'WeakMap';\n            this._name = generateName();\n            this._frozenEntries = [];\n            if (iterable) {\n                if (isArrayLike(iterable)) {\n                    for (let i = 0; i < iterable.length; i++) {\n                        const item = iterable[i];\n                        this.set(item[0], item[1]);\n                    }\n                }\n                else {\n                    for (const [key, value] of iterable) {\n                        this.set(key, value);\n                    }\n                }\n            }\n        }\n        _getFrozenEntryIndex(key) {\n            for (let i = 0; i < this._frozenEntries.length; i++) {\n                if (this._frozenEntries[i].key === key) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        delete(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                entry.value = DELETED;\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                this._frozenEntries.splice(frozenIndex, 1);\n                return true;\n            }\n            return false;\n        }\n        get(key) {\n            if (key === undefined || key === null) {\n                return undefined;\n            }\n            const entry = key[this._name];\n            if (entry && entry.key === key && entry.value !== DELETED) {\n                return entry.value;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return this._frozenEntries[frozenIndex].value;\n            }\n        }\n        has(key) {\n            if (key === undefined || key === null) {\n                return false;\n            }\n            const entry = key[this._name];\n            if (Boolean(entry && entry.key === key && entry.value !== DELETED)) {\n                return true;\n            }\n            const frozenIndex = this._getFrozenEntryIndex(key);\n            if (frozenIndex >= 0) {\n                return true;\n            }\n            return false;\n        }\n        set(key, value) {\n            if (!key || (typeof key !== 'object' && typeof key !== 'function')) {\n                throw new TypeError('Invalid value used as weak map key');\n            }\n            let entry = key[this._name];\n            if (!entry || entry.key !== key) {\n                entry = Object.create(null, {\n                    key: { value: key }\n                });\n                if (Object.isFrozen(key)) {\n                    this._frozenEntries.push(entry);\n                }\n                else {\n                    Object.defineProperty(key, this._name, {\n                        value: entry\n                    });\n                }\n            }\n            entry.value = value;\n            return this;\n        }\n    };\n}\nexport default WeakMap;","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"@dojo/widgets/button\",\"root\":\"button-m__root__wCywK\",\"pressed\":\"button-m__pressed__2zyjz\",\"popup\":\"button-m__popup__2Fl0t\",\"disabled\":\"button-m__disabled__19w7M\",\"label\":\"button-m__label__3hxN8\"};","import { focus } from '@dojo/framework/core/middleware/focus';\nimport { create, tsx } from '@dojo/framework/core/vdom';\n\nimport { formatAriaProperties } from '../common/util';\nimport { theme } from '../middleware/theme';\nimport * as css from '../theme/default/button.m.css';\n\nexport interface ButtonProperties {\n\t/** Custom aria attributes */\n\taria?: { [key: string]: string | null };\n\t/** Whether the button is disabled or clickable */\n\tdisabled?: boolean;\n\t/** The name of the button */\n\tname?: string;\n\t/** Handler for events triggered by button losing focus */\n\tonBlur?(): void;\n\t/** Handler for events triggered by a button click */\n\tonClick?(): void;\n\t/** Handler for events triggered by \"on down\" */\n\tonDown?(): void;\n\t/** Handler for events triggered by \"on focus\" */\n\tonFocus?(): void;\n\t/** Handler for events triggered by \"on out\" */\n\tonOut?(): void;\n\t/** Handler for events triggered by \"on over\" */\n\tonOver?(): void;\n\t/** Handler for events triggered by \"on up\" */\n\tonUp?(): void;\n\t/** Indicates status of a toggle button */\n\tpressed?: boolean;\n\t/** Button type can be \"submit\", \"reset\", \"button\", or \"menu\" */\n\ttype?: 'submit' | 'reset' | 'button' | 'menu';\n\t/**  Defines a value for the button submitted with form data */\n\tvalue?: string;\n\t/** `id` set on the root button DOM node */\n\twidgetId?: string;\n\t/** The title text for the button node */\n\ttitle?: string;\n}\n\nconst factory = create({ focus, theme }).properties<ButtonProperties>();\n\nexport const Button = factory(function Button({\n\tchildren,\n\tid,\n\tmiddleware: { focus, theme },\n\tproperties\n}) {\n\tconst {\n\t\taria = {},\n\t\tdisabled,\n\t\twidgetId,\n\t\tname,\n\t\tpressed,\n\t\ttype = 'button',\n\t\tvalue,\n\t\tonClick,\n\t\tonOut,\n\t\tonOver,\n\t\tonDown,\n\t\tonUp,\n\t\tonBlur,\n\t\tonFocus,\n\t\ttitle\n\t} = properties();\n\n\tconst themeCss = theme.classes(css);\n\tconst idBase = widgetId || `button-${id}`;\n\n\treturn (\n\t\t<button\n\t\t\tclasses={[\n\t\t\t\ttheme.variant(),\n\t\t\t\tthemeCss.root,\n\t\t\t\tdisabled ? themeCss.disabled : null,\n\t\t\t\tpressed ? themeCss.pressed : null\n\t\t\t]}\n\t\t\ttitle={title}\n\t\t\tdisabled={disabled}\n\t\t\tid={idBase}\n\t\t\tfocus={focus.shouldFocus()}\n\t\t\tname={name}\n\t\t\ttype={type as any}\n\t\t\tvalue={value}\n\t\t\tonblur={() => onBlur && onBlur()}\n\t\t\tonclick={(event: MouseEvent) => {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tonClick && onClick();\n\t\t\t}}\n\t\t\tonfocus={() => onFocus && onFocus()}\n\t\t\tonpointerenter={() => onOver && onOver()}\n\t\t\tonpointerleave={() => onOut && onOut()}\n\t\t\tonpointerdown={() => onDown && onDown()}\n\t\t\tonpointerup={() => onUp && onUp()}\n\t\t\t{...formatAriaProperties(aria)}\n\t\t\taria-pressed={typeof pressed === 'boolean' ? (pressed ? 'true' : 'false') : undefined}\n\t\t>\n\t\t\t<span classes={themeCss.label}>{children()}</span>\n\t\t</button>\n\t);\n});\n\nexport default Button;\n","import global from '../shim/global';\nimport Injector from './Injector';\nimport cssVars from '../shim/cssVariables';\nimport Map from '../shim/Map';\nimport has from './has';\nexport function isVariantModule(variant) {\n    return typeof variant !== 'string';\n}\nexport function isThemeWithVariant(theme) {\n    return theme && theme.hasOwnProperty('variant');\n}\nexport function isThemeWithVariants(theme) {\n    return theme && theme.hasOwnProperty('variants');\n}\nexport function isThemeInjectorPayloadWithVariant(theme) {\n    return !!theme && theme.hasOwnProperty('variant');\n}\nlet processCssVariant = function (_) { };\nif (!true) {\n    const setUpCssVariantSupport = () => {\n        const styleId = '__dojo_processed_styles';\n        const processedCssMap = new Map();\n        let variantStyleElement;\n        function applyStyles(css) {\n            const style = document.createElement('style');\n            style.textContent = css;\n            style.setAttribute('id', styleId);\n            if (variantStyleElement && variantStyleElement.parentNode) {\n                variantStyleElement.parentNode.replaceChild(style, variantStyleElement);\n            }\n            else {\n                global.document.head.appendChild(style);\n            }\n            variantStyleElement = style;\n        }\n        return function processCssVariant(variantName) {\n            const processedCss = processedCssMap.get(variantName);\n            if (processedCss) {\n                applyStyles(processedCss);\n            }\n            else {\n                cssVars({\n                    exclude: `style[id=${styleId}]`,\n                    onSuccess: (css) => {\n                        let temp = css;\n                        let index = temp.indexOf(variantName);\n                        let variantCss = '';\n                        while (index !== -1) {\n                            temp = temp.substring(index + variantName.length);\n                            const match = temp.match(/\\{([^}]+)\\}/);\n                            if (match) {\n                                if (variantCss) {\n                                    variantCss = `${variantCss.substring(0, variantCss.length - 1)}${match[0].substring(1)}`;\n                                }\n                                else {\n                                    variantCss = match[0];\n                                }\n                            }\n                            index = temp.indexOf(variantName);\n                        }\n                        if (variantCss) {\n                            css = `:root ${variantCss}${css}`;\n                        }\n                        return css;\n                    },\n                    onComplete: (css) => {\n                        processedCssMap.set(variantName, css);\n                        applyStyles(css);\n                    },\n                    updateDOM: false,\n                    silent: true\n                });\n            }\n        };\n    };\n    processCssVariant = setUpCssVariantSupport();\n}\nfunction createThemeInjectorPayload(theme, variant) {\n    if (isThemeWithVariant(theme)) {\n        if (typeof theme.variant === 'string') {\n            return {\n                theme: theme.theme,\n                variant: { name: theme.variant, value: theme.theme.variants[theme.variant] }\n            };\n        }\n        return { theme: theme.theme, variant: theme.variant };\n    }\n    else if (isThemeWithVariants(theme)) {\n        variant = variant || 'default';\n        if (isVariantModule(variant)) {\n            if (!true) {\n                processCssVariant(variant.value.root);\n            }\n            return { theme, variant };\n        }\n        if (!true) {\n            processCssVariant(theme.variants[variant].root);\n        }\n        return { theme: theme, variant: { name: variant, value: theme.variants[variant] } };\n    }\n    return { theme };\n}\nexport class ThemeInjector extends Injector {\n    constructor(theme) {\n        super(theme ? createThemeInjectorPayload(theme) : theme);\n    }\n    set(theme, variant) {\n        super.set(createThemeInjectorPayload(theme, variant));\n    }\n    get() {\n        return super.get();\n    }\n}\nexport default ThemeInjector;\n//# sourceMappingURL=ThemeInjector.mjs.map","var _a;\nimport global from './global';\nvar queueMicroTask = undefined;\n// !has('microtasks')\n// elided: import './support/queue'\n// !has('es6-symbol')\n// elided: import './Symbol'\nimport has from '../core/has';\nexport let ShimPromise = global.Promise;\nexport const isThenable = function isThenable(value) {\n    return value && typeof value.then === 'function';\n};\nif (!true) {\n    global.Promise = ShimPromise = (_a = class Promise {\n            /**\n             * Creates a new Promise.\n             *\n             * @constructor\n             *\n             * @param executor\n             * The executor function is called immediately when the Promise is instantiated. It is responsible for\n             * starting the asynchronous operation when it is invoked.\n             *\n             * The executor must call either the passed `resolve` function when the asynchronous operation has completed\n             * successfully, or the `reject` function when the operation fails.\n             */\n            constructor(executor) {\n                /**\n                 * The current state of this promise.\n                 */\n                this.state = 1 /* Pending */;\n                this[Symbol.toStringTag] = 'Promise';\n                /**\n                 * If true, the resolution of this promise is chained (\"locked in\") to another promise.\n                 */\n                let isChained = false;\n                /**\n                 * Whether or not this promise is in a resolved state.\n                 */\n                const isResolved = () => {\n                    return this.state !== 1 /* Pending */ || isChained;\n                };\n                /**\n                 * Callbacks that should be invoked once the asynchronous operation has completed.\n                 */\n                let callbacks = [];\n                /**\n                 * Initially pushes callbacks onto a queue for execution once this promise settles. After the promise settles,\n                 * enqueues callbacks for execution on the next event loop turn.\n                 */\n                let whenFinished = function (callback) {\n                    if (callbacks) {\n                        callbacks.push(callback);\n                    }\n                };\n                /**\n                 * Settles this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const settle = (newState, value) => {\n                    // A promise can only be settled once.\n                    if (this.state !== 1 /* Pending */) {\n                        return;\n                    }\n                    this.state = newState;\n                    this.resolvedValue = value;\n                    whenFinished = queueMicroTask;\n                    // Only enqueue a callback runner if there are callbacks so that initially fulfilled Promises don't have to\n                    // wait an extra turn.\n                    if (callbacks && callbacks.length > 0) {\n                        queueMicroTask(function () {\n                            if (callbacks) {\n                                let count = callbacks.length;\n                                for (let i = 0; i < count; ++i) {\n                                    callbacks[i].call(null);\n                                }\n                                callbacks = null;\n                            }\n                        });\n                    }\n                };\n                /**\n                 * Resolves this promise.\n                 *\n                 * @param newState The resolved state for this promise.\n                 * @param {T|any} value The resolved value for this promise.\n                 */\n                const resolve = (newState, value) => {\n                    if (isResolved()) {\n                        return;\n                    }\n                    if (isThenable(value)) {\n                        value.then(settle.bind(null, 0 /* Fulfilled */), settle.bind(null, 2 /* Rejected */));\n                        isChained = true;\n                    }\n                    else {\n                        settle(newState, value);\n                    }\n                };\n                this.then = (onFulfilled, onRejected) => {\n                    return new Promise((resolve, reject) => {\n                        // whenFinished initially queues up callbacks for execution after the promise has settled. Once the\n                        // promise has settled, whenFinished will schedule callbacks for execution on the next turn through the\n                        // event loop.\n                        whenFinished(() => {\n                            const callback = this.state === 2 /* Rejected */ ? onRejected : onFulfilled;\n                            if (typeof callback === 'function') {\n                                try {\n                                    resolve(callback(this.resolvedValue));\n                                }\n                                catch (error) {\n                                    reject(error);\n                                }\n                            }\n                            else if (this.state === 2 /* Rejected */) {\n                                reject(this.resolvedValue);\n                            }\n                            else {\n                                resolve(this.resolvedValue);\n                            }\n                        });\n                    });\n                };\n                try {\n                    executor(resolve.bind(null, 0 /* Fulfilled */), resolve.bind(null, 2 /* Rejected */));\n                }\n                catch (error) {\n                    settle(2 /* Rejected */, error);\n                }\n            }\n            static all(iterable) {\n                return new this(function (resolve, reject) {\n                    const values = [];\n                    let complete = 0;\n                    let total = 0;\n                    let populating = true;\n                    function fulfill(index, value) {\n                        values[index] = value;\n                        ++complete;\n                        finish();\n                    }\n                    function finish() {\n                        if (populating || complete < total) {\n                            return;\n                        }\n                        resolve(values);\n                    }\n                    function processItem(index, item) {\n                        ++total;\n                        if (isThenable(item)) {\n                            // If an item Promise rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(fulfill.bind(null, index), reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(fulfill.bind(null, index));\n                        }\n                    }\n                    let i = 0;\n                    for (const value of iterable) {\n                        processItem(i, value);\n                        i++;\n                    }\n                    populating = false;\n                    finish();\n                });\n            }\n            static race(iterable) {\n                return new this(function (resolve, reject) {\n                    for (const item of iterable) {\n                        if (item instanceof Promise) {\n                            // If a Promise item rejects, this Promise is immediately rejected with the item\n                            // Promise's rejection error.\n                            item.then(resolve, reject);\n                        }\n                        else {\n                            Promise.resolve(item).then(resolve);\n                        }\n                    }\n                });\n            }\n            static reject(reason) {\n                return new this(function (resolve, reject) {\n                    reject(reason);\n                });\n            }\n            static resolve(value) {\n                return new this(function (resolve) {\n                    resolve(value);\n                });\n            }\n            catch(onRejected) {\n                return this.then(undefined, onRejected);\n            }\n        },\n        _a[Symbol.species] = ShimPromise,\n        _a);\n    // this cast is needed in order to omit finally in the class declaration; this was done so the finally code\n    // is not duplicated and always added in the conditional below\n}\nif (!has('es2018-promise-finally')) {\n    global.Promise.prototype.finally = function (onFinally) {\n        return this.then(onFinally && ((value) => Promise.resolve(onFinally()).then(() => value)), onFinally &&\n            ((reason) => Promise.resolve(onFinally()).then(() => {\n                throw reason;\n            })));\n    };\n}\nexport default ShimPromise;","import { WIDGET_BASE_TYPE } from './Registry';\nfunction isObjectOrArray(value) {\n    return Object.prototype.toString.call(value) === '[object Object]' || Array.isArray(value);\n}\nexport function always(previousProperty, newProperty) {\n    return {\n        changed: true,\n        value: newProperty\n    };\n}\nexport function ignore(previousProperty, newProperty) {\n    return {\n        changed: false,\n        value: newProperty\n    };\n}\nexport function reference(previousProperty, newProperty) {\n    return {\n        changed: previousProperty !== newProperty,\n        value: newProperty\n    };\n}\nexport function shallow(previousProperty, newProperty, depth = 0) {\n    let changed = false;\n    const validOldProperty = previousProperty && isObjectOrArray(previousProperty);\n    const validNewProperty = newProperty && isObjectOrArray(newProperty);\n    if (!validOldProperty || !validNewProperty) {\n        return {\n            changed: true,\n            value: newProperty\n        };\n    }\n    const previousKeys = Object.keys(previousProperty);\n    const newKeys = Object.keys(newProperty);\n    if (previousKeys.length !== newKeys.length) {\n        changed = true;\n    }\n    else {\n        changed = newKeys.some((key) => {\n            if (depth > 0) {\n                return auto(newProperty[key], previousProperty[key], depth - 1).changed;\n            }\n            return newProperty[key] !== previousProperty[key];\n        });\n    }\n    return {\n        changed,\n        value: newProperty\n    };\n}\nexport function auto(previousProperty, newProperty, depth = 0) {\n    let result;\n    if (typeof newProperty === 'function') {\n        if (newProperty._type === WIDGET_BASE_TYPE) {\n            result = reference(previousProperty, newProperty);\n        }\n        else {\n            result = ignore(previousProperty, newProperty);\n        }\n    }\n    else if (isObjectOrArray(newProperty)) {\n        result = shallow(previousProperty, newProperty, depth);\n    }\n    else {\n        result = reference(previousProperty, newProperty);\n    }\n    return result;\n}\n//# sourceMappingURL=diff.mjs.map"],"sourceRoot":""}